<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>上手教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之进制转换]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[栈的介绍 定义: 栈是一种数据结构，一种特殊的线性表 特点: 只允许在一端进行插入操作，另一端进行删除操作 元素满足先进后出原则，即先入栈的元素最后出栈 算法详解算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可上代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 10typedef struct &#123; int data[maxsize]; int top;&#125;seqstack, *pseqstack;pseqstack init_stack()&#123; pseqstack s = (pseqstack)malloc(sizeof(seqstack)); if(s)&#123; s -&gt; top = -1; &#125; return s;&#125;void push_stack(pseqstack s, int e)&#123; if (!s || s -&gt; top &gt; maxsize -1)&#123; printf("入栈失败!\n"); //return 0; &#125; else&#123; s -&gt; top ++; /*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!) */ s -&gt; data[s -&gt; top] = e; //return 1; &#125;&#125;int pop_stack(pseqstack s, int *x)&#123; if (!s || s -&gt; top == -1)&#123; printf("出栈失败!\n"); return -1; &#125; else&#123; *x = s -&gt; data[s -&gt; top]; s -&gt; top --; return *x; &#125;&#125;/* 输出栈的每一个元素 */void print_each(pseqstack s)&#123; int top0 = s-&gt;top; while(top0 != -1)&#123; printf("%d\n", s-&gt;data[top0]); top0 --; &#125; &#125;/*进制转换，x是十进制de 数，y 是待转换进制*/void transfer(pseqstack s, int x, int y)&#123; int res; /* 整除后不等于０， 执行循环 */ while(x != 0)&#123; push_stack(s, (x%y)); x = x / y; &#125; //printf("%d\n", s-&gt;top); /* 加上输出功能 */ while(s-&gt; top != -1)&#123; pop_stack(s, &amp;res); printf("%d", res); if (s-&gt;top == -1)&#123; printf("\n"); &#125; &#125; &#125;int main()&#123; int num; // 十进制数 int scale; // 要转换的进制数 printf("输入十进制数字，进制数: "); scanf("%d %d", &amp;num, &amp;scale); pseqstack S = init_stack(); transfer(S, num, scale); //print_each(S); &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>进制转化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之约瑟夫问题的求解]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[问题介绍约瑟夫问题 求解方案 顺序表 循环链表(不带头节点)值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘 顺序表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/* 约瑟夫问题的顺序表实现author: Qian Jipeng(C)date: 2019-3-21*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 100typedef struct node&#123; int data[maxsize]; int length;&#125;SeqList, *PSeqList;/* 初始化 */PSeqList Init()&#123; PSeqList L; L = (PSeqList)malloc(sizeof(SeqList)); if (L)&#123; L-&gt;length = 0; &#125; return L; /* 返回顺序表指针 */&#125;/* 插入 */int InSeqList(PSeqList L, int i, int e)&#123; if(i &lt; 1 || i &gt; L-&gt;length+1 || L-&gt;length &gt;= maxsize)&#123; printf("插入失败!\n"); return 0; &#125; else&#123; int j; L-&gt;data[i-1] = e; for (j=L-&gt;length; j&gt;=i; j--)&#123; L-&gt;data[j] = L-&gt;data[j-1]; /* 依次往后移动 */ &#125; L-&gt;length ++; &#125; return 1;&#125;/* 删除 */int DelSeqList(PSeqList L, int i, int *x)&#123; if ( i &lt; 1 || i &gt; L-&gt;length)&#123; printf("删除位置不合法\n"); return 0; &#125; int j; int tmp; // 保存将被删除的元素 tmp = L-&gt;data[i-1]; for (j = i ; j &lt;= L-&gt;length; j++ )&#123; // 从第I 个开始往前移动一位 L-&gt;data[j-1] = L-&gt;data[j]; &#125; L-&gt;length --; //printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp); return 1;&#125;// 功能函数 s 开始， 数到 m int yusefu_SeqList(PSeqList L, int s, int m)&#123; int x; int i; int s1; int w; // 保存删除的元素 if( L-&gt; length == 0)&#123; printf("表空!\n"); return 0; &#125; s1 = s -1; // 依次出去 for (i = L-&gt;length; i &gt; 0; i--)&#123; /* 关键步骤 */ s1 = (s1+m-1) % i; w = L -&gt; data[s1]; // 下标 s1, 是第s1+1 个元素！！！ DelSeqList(L, s1+1, &amp;x); printf("出列: %d\n", w); &#125; return 1;&#125;int main()&#123; int len; // 序列长度 int num[maxsize]; // 用来存输入的数 PSeqList L = (PSeqList)malloc(sizeof(SeqList)); printf("输入序列元素个数: "); scanf("%d", &amp;len); printf("输入约瑟夫序列(空格分开): "); // 依次插入 for (int l = 0; l &lt; len; l++ )&#123; scanf("%d", &amp;num[l]); InSeqList(L, l+1, num[l]); //printf(" %d ", num[l]); &#125; yusefu_SeqList(L, 2, 5); return 0;&#125; 2.循环链表 这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:1. 先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空2. 接着用个循环，创建剩下的单个节点，同样只有数据域3. 再把这些节点连接起来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/* 约瑟夫问题的循环链表实现* author: Qian Jipeng(C)* date: 2019-3-24* version: 2.0(1.0 aborted for too complexed)*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;/* node definition */typedef struct node&#123; int data; struct node * next;&#125;linklist;/* \brief: crate the linklist and do insert, return the first node's ptr \param: n -&gt;&gt; the size of the serises\return: the first node's ptr*//* creat the node in range(1, n)*/linklist * initLink(int n)&#123; linklist * head = (linklist*)malloc(sizeof(linklist)); /* the first node initionalized (not head node)*/ head-&gt;data = 1; head-&gt;next = NULL; /* a ptr to move through the list */ linklist * tmp = head; /* we satrt with the second node for a loop */ for (int i = 2; i &lt;= n; i ++) &#123; linklist * body = (linklist*)malloc(sizeof(linklist)); /* creat and init single node */ body -&gt; data = i; body -&gt; next = NULL; /* connect the single nodes together */ tmp -&gt; next = body; tmp = tmp -&gt; next; &#125; //printf("%d\n", tmp-&gt;data); /* now tmp is just the last node */ tmp -&gt; next = head; /*connect the head and the rear */ return head; /* by this method, we created a loop linklist */&#125;void yusefu(linklist * head,int k,int m)&#123; linklist * tail = head; //找到链表第一个结点的上一个结点，为删除操作做准备 while (tail -&gt; next != head) &#123; tail = tail -&gt; next; &#125; linklist * p = head; //找到编号为k的人(或者是第几个开始，可以改) while (p -&gt; data != k) &#123; tail = p; p = p-&gt;next; &#125; //从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了， while (p -&gt; next != p) &#123; //找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。 for (int i = 1; i &lt; m; i ++) &#123; tail = p; p = p -&gt; next; &#125; tail-&gt;next=p-&gt;next;//从链表上将p结点去除 printf("%d \t",p -&gt; data); free(p); p = tail -&gt; next;//继续使用p指针指向出列编号的下一个编号 &#125; /* the last one */ printf("%d \n",p -&gt; data); free(p);&#125;int main() &#123; linklist * head=initLink(10); yusefu(head, 2, 5); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>约瑟夫问题</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之逆波兰式]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[学的数据结构，感觉掌握的不牢固，于是实现了一个demo 中缀表达式转换为后缀表达式并求值 算法思想:创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，直到表达式末尾, 最后一个入栈的就是最终结果 先实现求值这一步吧，已知后缀表达式 转换这一环节待更新… 源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 100#define datatype inttypedef struct &#123; datatype data[maxsize]; int top; // top 指明当前栈顶元素的位置&#125; SeqStack, *PSeqStack;// 初始化顺序栈PSeqStack Init_SeqStack()&#123; PSeqStack S; S = (PSeqStack) malloc(sizeof(SeqStack)); //printf("%p\n", S); if (S) S -&gt; top = -1; // top 设为-1 (认为设定),表示空 return S; // 返回指向顺序栈的指针&#125;// 判断栈空int Empty_SeqStack(PSeqStack S)&#123; // 没有元素，空栈 if (S -&gt; top == -1) return 1; // 1 表示为空 return 0; &#125;// 入栈void Push_SeqStack(PSeqStack S, datatype x)&#123; if (S -&gt; top == maxsize-1)&#123; printf("栈满不能再入栈\n"); //return 0; // 返回 0 表示失败 &#125; else&#123; S -&gt; top ++; S -&gt; data[S -&gt; top] = x; //return 1; &#125;&#125;// 出栈,保存栈顶元素于*x中，并删除void Pop_SeqStack(PSeqStack S, datatype *x)&#123; if (Empty_SeqStack(S))&#123; printf("栈空不能出栈\n"); //return 0; // 0 表示出栈失败 &#125; else&#123; *x = S -&gt; data[S -&gt; top]; S -&gt; top --; //return 1; &#125;&#125;// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别int GetTop_SeqStack(PSeqStack S, datatype *x)&#123; if (Empty_SeqStack(S))&#123; printf("栈空不能取top元素\n"); return 0; &#125; else&#123; *x = S -&gt; data[S -&gt; top]; return 1; &#125;&#125;// 销毁栈，参数为待销毁顺序栈的指针地址void Destory_SeqStack(PSeqStack *S)&#123; // *S 二级指针 if (*S) free (*S); *S = NULL; return;&#125;/* 判断是否是操作数 */int IsNum(char c)&#123; if (c &gt;= '0' &amp;&amp; c &lt;= '9')&#123; return 1; &#125; return 0;&#125;char transfer()&#123; &#125;/* 核心函数 */int calculate(char *A)&#123; PSeqStack s = Init_SeqStack(); int result; int a, b, c; // a,b 上一次，上上一次入栈的元素，Ｃ是临时变量 char ch; ch = *A ++; /* 我们人为设置，在字符数组末尾加一个'#', 作为结束符 */ while(ch != '#')&#123; if (IsNum(ch))&#123; Push_SeqStack(s, ch - '0'); &#125; else &#123; /* 这里注意， 先进后出 */ Pop_SeqStack(s, &amp;b); Pop_SeqStack(s, &amp;a); switch (ch) &#123; case '+': c = a+b; break; case '-': c = a-b; break; case '*': c = a*b; break; case '/': c = a/b; break; default: break; &#125; /* 临时结果入栈 */ Push_SeqStack(s, c); &#125; ch = *A ++; &#125; GetTop_SeqStack(s, &amp;result); Destory_SeqStack(&amp;s); return result;&#125;int main()&#123; char num[12] = &#123;'1','2','8','5','-','*','+','4','2','/','-', '#'&#125;; printf("计算结果: %d\n",calculate(num)); return 0;&#125; 测试输入: 1char num[12] = &#123;'1','2','8','5','-','*','+','4','2','/','-', '#'&#125;; 测试结果: 15 写在最后其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有std::sort()函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…我学数据结构最大的收获就是： 学会用计算机的思维去思考问题 学会如何调试程序 学会耐心做一件事课程设计]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>逆波兰式</tag>
        <tag>堆栈</tag>
        <tag>中缀表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统下文件乱码问题解决]]></title>
    <url>%2F2019%2F08%2F17%2FLinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1%2F</url>
    <content type="text"><![CDATA[今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。 主要是用到了Linux的 iconv 命令 Step one 获取当前文件编码我当前文件是 Student.cpp 1file Student.cpp 得到输出如下： 1Student.cpp: C source, UTF-8 Unicode text 是个万国码 Step Two 获取本机编码1cat /etc/sysconfig/i18n 不知道为什么我这里报错，没有这个文件???不过Linux一般都是UTF-8 Step Three 修改文件编码1iconv -f GBK -t UTF-8 Student.cpp -o Student0.cpp 这里Student.cpp是原来的文件，Student0.cpp是我修改后的文件。 改后打开文件就没有乱码问题了 这里有个问题，如果有多个文件不能在一起转化比如我有两个文件，Student.cpp 和 Student.h 必须要执行两次命令，尴尬。后来想起来可以用通配符，文件名不改变，即可 注意： 通配符要慎用! 最后的最后: 写了个小项目，放在了仓库中编码转换]]></content>
      <categories>
        <category>utils</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>编码</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[和小薇薇的700天]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[Encrypted passage, enter password to read. Decrypt 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]]></content>
      <categories>
        <category>小胖子</category>
      </categories>
      <tags>
        <tag>700天</tag>
      </tags>
  </entry>
</search>
