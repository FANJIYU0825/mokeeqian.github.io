<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构之进制转换]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[栈的介绍 定义: 栈是一种数据结构，一种特殊的线性表 特点: 只允许在一端进行插入操作，另一端进行删除操作 元素满足先进后出原则，即先入栈的元素最后出栈 算法详解算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可上代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 10typedef struct &#123; int data[maxsize]; int top;&#125;seqstack, *pseqstack;pseqstack init_stack()&#123; pseqstack s = (pseqstack)malloc(sizeof(seqstack)); if(s)&#123; s -&gt; top = -1; &#125; return s;&#125;void push_stack(pseqstack s, int e)&#123; if (!s || s -&gt; top &gt; maxsize -1)&#123; printf("入栈失败!\n"); //return 0; &#125; else&#123; s -&gt; top ++; /*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!) */ s -&gt; data[s -&gt; top] = e; //return 1; &#125;&#125;int pop_stack(pseqstack s, int *x)&#123; if (!s || s -&gt; top == -1)&#123; printf("出栈失败!\n"); return -1; &#125; else&#123; *x = s -&gt; data[s -&gt; top]; s -&gt; top --; return *x; &#125;&#125;/* 输出栈的每一个元素 */void print_each(pseqstack s)&#123; int top0 = s-&gt;top; while(top0 != -1)&#123; printf("%d\n", s-&gt;data[top0]); top0 --; &#125; &#125;/*进制转换，x是十进制de 数，y 是待转换进制*/void transfer(pseqstack s, int x, int y)&#123; int res; /* 整除后不等于０， 执行循环 */ while(x != 0)&#123; push_stack(s, (x%y)); x = x / y; &#125; //printf("%d\n", s-&gt;top); /* 加上输出功能 */ while(s-&gt; top != -1)&#123; pop_stack(s, &amp;res); printf("%d", res); if (s-&gt;top == -1)&#123; printf("\n"); &#125; &#125; &#125;int main()&#123; int num; // 十进制数 int scale; // 要转换的进制数 printf("输入十进制数字，进制数: "); scanf("%d %d", &amp;num, &amp;scale); pseqstack S = init_stack(); transfer(S, num, scale); //print_each(S); &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>进制转化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之约瑟夫问题的求解]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[问题介绍约瑟夫问题 求解方案 顺序表 循环链表(不带头节点)值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘 顺序表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/* 约瑟夫问题的顺序表实现author: Qian Jipeng(C)date: 2019-3-21*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 100typedef struct node&#123; int data[maxsize]; int length;&#125;SeqList, *PSeqList;/* 初始化 */PSeqList Init()&#123; PSeqList L; L = (PSeqList)malloc(sizeof(SeqList)); if (L)&#123; L-&gt;length = 0; &#125; return L; /* 返回顺序表指针 */&#125;/* 插入 */int InSeqList(PSeqList L, int i, int e)&#123; if(i &lt; 1 || i &gt; L-&gt;length+1 || L-&gt;length &gt;= maxsize)&#123; printf("插入失败!\n"); return 0; &#125; else&#123; int j; L-&gt;data[i-1] = e; for (j=L-&gt;length; j&gt;=i; j--)&#123; L-&gt;data[j] = L-&gt;data[j-1]; /* 依次往后移动 */ &#125; L-&gt;length ++; &#125; return 1;&#125;/* 删除 */int DelSeqList(PSeqList L, int i, int *x)&#123; if ( i &lt; 1 || i &gt; L-&gt;length)&#123; printf("删除位置不合法\n"); return 0; &#125; int j; int tmp; // 保存将被删除的元素 tmp = L-&gt;data[i-1]; for (j = i ; j &lt;= L-&gt;length; j++ )&#123; // 从第I 个开始往前移动一位 L-&gt;data[j-1] = L-&gt;data[j]; &#125; L-&gt;length --; //printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp); return 1;&#125;// 功能函数 s 开始， 数到 m int yusefu_SeqList(PSeqList L, int s, int m)&#123; int x; int i; int s1; int w; // 保存删除的元素 if( L-&gt; length == 0)&#123; printf("表空!\n"); return 0; &#125; s1 = s -1; // 依次出去 for (i = L-&gt;length; i &gt; 0; i--)&#123; /* 关键步骤 */ s1 = (s1+m-1) % i; w = L -&gt; data[s1]; // 下标 s1, 是第s1+1 个元素！！！ DelSeqList(L, s1+1, &amp;x); printf("出列: %d\n", w); &#125; return 1;&#125;int main()&#123; int len; // 序列长度 int num[maxsize]; // 用来存输入的数 PSeqList L = (PSeqList)malloc(sizeof(SeqList)); printf("输入序列元素个数: "); scanf("%d", &amp;len); printf("输入约瑟夫序列(空格分开): "); // 依次插入 for (int l = 0; l &lt; len; l++ )&#123; scanf("%d", &amp;num[l]); InSeqList(L, l+1, num[l]); //printf(" %d ", num[l]); &#125; yusefu_SeqList(L, 2, 5); return 0;&#125; 2.循环链表 这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:1. 先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空2. 接着用个循环，创建剩下的单个节点，同样只有数据域3. 再把这些节点连接起来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/* 约瑟夫问题的循环链表实现* author: Qian Jipeng(C)* date: 2019-3-24* version: 2.0(1.0 aborted for too complexed)*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;/* node definition */typedef struct node&#123; int data; struct node * next;&#125;linklist;/* \brief: crate the linklist and do insert, return the first node's ptr \param: n -&gt;&gt; the size of the serises\return: the first node's ptr*//* creat the node in range(1, n)*/linklist * initLink(int n)&#123; linklist * head = (linklist*)malloc(sizeof(linklist)); /* the first node initionalized (not head node)*/ head-&gt;data = 1; head-&gt;next = NULL; /* a ptr to move through the list */ linklist * tmp = head; /* we satrt with the second node for a loop */ for (int i = 2; i &lt;= n; i ++) &#123; linklist * body = (linklist*)malloc(sizeof(linklist)); /* creat and init single node */ body -&gt; data = i; body -&gt; next = NULL; /* connect the single nodes together */ tmp -&gt; next = body; tmp = tmp -&gt; next; &#125; //printf("%d\n", tmp-&gt;data); /* now tmp is just the last node */ tmp -&gt; next = head; /*connect the head and the rear */ return head; /* by this method, we created a loop linklist */&#125;void yusefu(linklist * head,int k,int m)&#123; linklist * tail = head; //找到链表第一个结点的上一个结点，为删除操作做准备 while (tail -&gt; next != head) &#123; tail = tail -&gt; next; &#125; linklist * p = head; //找到编号为k的人(或者是第几个开始，可以改) while (p -&gt; data != k) &#123; tail = p; p = p-&gt;next; &#125; //从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了， while (p -&gt; next != p) &#123; //找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。 for (int i = 1; i &lt; m; i ++) &#123; tail = p; p = p -&gt; next; &#125; tail-&gt;next=p-&gt;next;//从链表上将p结点去除 printf("%d \t",p -&gt; data); free(p); p = tail -&gt; next;//继续使用p指针指向出列编号的下一个编号 &#125; /* the last one */ printf("%d \n",p -&gt; data); free(p);&#125;int main() &#123; linklist * head=initLink(10); yusefu(head, 2, 5); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>约瑟夫问题</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之逆波兰式]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[学的数据结构，感觉掌握的不牢固，于是实现了一个demo 中缀表达式转换为后缀表达式并求值 算法思想:创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，直到表达式末尾, 最后一个入栈的就是最终结果 先实现求值这一步吧，已知后缀表达式 转换这一环节待更新… 源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 100#define datatype inttypedef struct &#123; datatype data[maxsize]; int top; // top 指明当前栈顶元素的位置&#125; SeqStack, *PSeqStack;// 初始化顺序栈PSeqStack Init_SeqStack()&#123; PSeqStack S; S = (PSeqStack) malloc(sizeof(SeqStack)); //printf("%p\n", S); if (S) S -&gt; top = -1; // top 设为-1 (认为设定),表示空 return S; // 返回指向顺序栈的指针&#125;// 判断栈空int Empty_SeqStack(PSeqStack S)&#123; // 没有元素，空栈 if (S -&gt; top == -1) return 1; // 1 表示为空 return 0; &#125;// 入栈void Push_SeqStack(PSeqStack S, datatype x)&#123; if (S -&gt; top == maxsize-1)&#123; printf("栈满不能再入栈\n"); //return 0; // 返回 0 表示失败 &#125; else&#123; S -&gt; top ++; S -&gt; data[S -&gt; top] = x; //return 1; &#125;&#125;// 出栈,保存栈顶元素于*x中，并删除void Pop_SeqStack(PSeqStack S, datatype *x)&#123; if (Empty_SeqStack(S))&#123; printf("栈空不能出栈\n"); //return 0; // 0 表示出栈失败 &#125; else&#123; *x = S -&gt; data[S -&gt; top]; S -&gt; top --; //return 1; &#125;&#125;// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别int GetTop_SeqStack(PSeqStack S, datatype *x)&#123; if (Empty_SeqStack(S))&#123; printf("栈空不能取top元素\n"); return 0; &#125; else&#123; *x = S -&gt; data[S -&gt; top]; return 1; &#125;&#125;// 销毁栈，参数为待销毁顺序栈的指针地址void Destory_SeqStack(PSeqStack *S)&#123; // *S 二级指针 if (*S) free (*S); *S = NULL; return;&#125;/* 判断是否是操作数 */int IsNum(char c)&#123; if (c &gt;= '0' &amp;&amp; c &lt;= '9')&#123; return 1; &#125; return 0;&#125;char transfer()&#123; &#125;/* 核心函数 */int calculate(char *A)&#123; PSeqStack s = Init_SeqStack(); int result; int a, b, c; // a,b 上一次，上上一次入栈的元素，Ｃ是临时变量 char ch; ch = *A ++; /* 我们人为设置，在字符数组末尾加一个'#', 作为结束符 */ while(ch != '#')&#123; if (IsNum(ch))&#123; Push_SeqStack(s, ch - '0'); &#125; else &#123; /* 这里注意， 先进后出 */ Pop_SeqStack(s, &amp;b); Pop_SeqStack(s, &amp;a); switch (ch) &#123; case '+': c = a+b; break; case '-': c = a-b; break; case '*': c = a*b; break; case '/': c = a/b; break; default: break; &#125; /* 临时结果入栈 */ Push_SeqStack(s, c); &#125; ch = *A ++; &#125; GetTop_SeqStack(s, &amp;result); Destory_SeqStack(&amp;s); return result;&#125;int main()&#123; char num[12] = &#123;'1','2','8','5','-','*','+','4','2','/','-', '#'&#125;; printf("计算结果: %d\n",calculate(num)); return 0;&#125; 测试输入: 1char num[12] = &#123;'1','2','8','5','-','*','+','4','2','/','-', '#'&#125;; 测试结果: 15 写在最后其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有std::sort()函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…我学数据结构最大的收获就是： 学会用计算机的思维去思考问题 学会如何调试程序 学会耐心做一件事课程设计]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>逆波兰式</tag>
        <tag>堆栈</tag>
        <tag>中缀表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统下文件乱码问题解决]]></title>
    <url>%2F2019%2F08%2F17%2FLinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1%2F</url>
    <content type="text"><![CDATA[今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。 主要是用到了Linux的 iconv 命令 Step one 获取当前文件编码我当前文件是 Student.cpp 1file Student.cpp 得到输出如下： 1Student.cpp: C source, UTF-8 Unicode text 是个万国码 Step Two 获取本机编码1cat /etc/sysconfig/i18n 不知道为什么我这里报错，没有这个文件???不过Linux一般都是UTF-8 Step Three 修改文件编码1iconv -f GBK -t UTF-8 Student.cpp -o Student0.cpp 这里Student.cpp是原来的文件，Student0.cpp是我修改后的文件。 改后打开文件就没有乱码问题了 这里有个问题，如果有多个文件不能在一起转化比如我有两个文件，Student.cpp 和 Student.h 必须要执行两次命令，尴尬。后来想起来可以用通配符，文件名不改变，即可 注意： 通配符要慎用! 最后的最后: 写了个小项目，放在了仓库中编码转换]]></content>
      <categories>
        <category>utils</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>编码</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>上手教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[和小薇薇的700天]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[Encrypted passage, enter password to read. Decrypt ]]></content>
      <categories>
        <category>小胖子</category>
      </categories>
      <tags>
        <tag>700天</tag>
      </tags>
  </entry>
</search>
