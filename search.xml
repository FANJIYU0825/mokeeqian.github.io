<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java web 学习开篇]]></title>
    <url>%2F2019%2F08%2F20%2Fjava%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[写在前面以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说： 我是做C++的。可是，我们真的懂C++了吗？这要看我们对懂的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: 你永远不知道C++编译器背着你干了哪些事。这句话其实我很认同。例如: 默认构造函数在什么情况下编译器会为我们提供？ 答案是： 在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。 C++的虚函数机制是什么样的？ 就我所了解的，虚函数机制是靠虚函数表VTable和虚函数指针VPtr来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作深度探索C++对象模型) C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。至于为什么要学习前端知识呢？ B/S模式向C/S模式转变的趋向 当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现 增加技术栈 俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。 放弃C++，转向java? 真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。 学习过程目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>jsp</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>上手教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之进制转换]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[栈的介绍 定义: 栈是一种数据结构，一种特殊的线性表 特点: 只允许在一端进行插入操作，另一端进行删除操作 元素满足先进后出原则，即先入栈的元素最后出栈 算法详解算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可上代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 10typedef struct &#123; int data[maxsize]; int top;&#125;seqstack, *pseqstack;pseqstack init_stack()&#123; pseqstack s = (pseqstack)malloc(sizeof(seqstack)); if(s)&#123; s -&gt; top = -1; &#125; return s;&#125;void push_stack(pseqstack s, int e)&#123; if (!s || s -&gt; top &gt; maxsize -1)&#123; printf("入栈失败!\n"); //return 0; &#125; else&#123; s -&gt; top ++; /*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!) */ s -&gt; data[s -&gt; top] = e; //return 1; &#125;&#125;int pop_stack(pseqstack s, int *x)&#123; if (!s || s -&gt; top == -1)&#123; printf("出栈失败!\n"); return -1; &#125; else&#123; *x = s -&gt; data[s -&gt; top]; s -&gt; top --; return *x; &#125;&#125;/* 输出栈的每一个元素 */void print_each(pseqstack s)&#123; int top0 = s-&gt;top; while(top0 != -1)&#123; printf("%d\n", s-&gt;data[top0]); top0 --; &#125; &#125;/*进制转换，x是十进制de 数，y 是待转换进制*/void transfer(pseqstack s, int x, int y)&#123; int res; /* 整除后不等于０， 执行循环 */ while(x != 0)&#123; push_stack(s, (x%y)); x = x / y; &#125; //printf("%d\n", s-&gt;top); /* 加上输出功能 */ while(s-&gt; top != -1)&#123; pop_stack(s, &amp;res); printf("%d", res); if (s-&gt;top == -1)&#123; printf("\n"); &#125; &#125; &#125;int main()&#123; int num; // 十进制数 int scale; // 要转换的进制数 printf("输入十进制数字，进制数: "); scanf("%d %d", &amp;num, &amp;scale); pseqstack S = init_stack(); transfer(S, num, scale); //print_each(S); &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>进制转化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之约瑟夫问题的求解]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[问题介绍约瑟夫问题 求解方案 顺序表 循环链表(不带头节点)值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘 顺序表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110/* 约瑟夫问题的顺序表实现author: Qian Jipeng(C)date: 2019-3-21*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 100typedef struct node&#123; int data[maxsize]; int length;&#125;SeqList, *PSeqList;/* 初始化 */PSeqList Init()&#123; PSeqList L; L = (PSeqList)malloc(sizeof(SeqList)); if (L)&#123; L-&gt;length = 0; &#125; return L; /* 返回顺序表指针 */&#125;/* 插入 */int InSeqList(PSeqList L, int i, int e)&#123; if(i &lt; 1 || i &gt; L-&gt;length+1 || L-&gt;length &gt;= maxsize)&#123; printf("插入失败!\n"); return 0; &#125; else&#123; int j; L-&gt;data[i-1] = e; for (j=L-&gt;length; j&gt;=i; j--)&#123; L-&gt;data[j] = L-&gt;data[j-1]; /* 依次往后移动 */ &#125; L-&gt;length ++; &#125; return 1;&#125;/* 删除 */int DelSeqList(PSeqList L, int i, int *x)&#123; if ( i &lt; 1 || i &gt; L-&gt;length)&#123; printf("删除位置不合法\n"); return 0; &#125; int j; int tmp; // 保存将被删除的元素 tmp = L-&gt;data[i-1]; for (j = i ; j &lt;= L-&gt;length; j++ )&#123; // 从第I 个开始往前移动一位 L-&gt;data[j-1] = L-&gt;data[j]; &#125; L-&gt;length --; //printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp); return 1;&#125;// 功能函数 s 开始， 数到 m int yusefu_SeqList(PSeqList L, int s, int m)&#123; int x; int i; int s1; int w; // 保存删除的元素 if( L-&gt; length == 0)&#123; printf("表空!\n"); return 0; &#125; s1 = s -1; // 依次出去 for (i = L-&gt;length; i &gt; 0; i--)&#123; /* 关键步骤 */ s1 = (s1+m-1) % i; w = L -&gt; data[s1]; // 下标 s1, 是第s1+1 个元素！！！ DelSeqList(L, s1+1, &amp;x); printf("出列: %d\n", w); &#125; return 1;&#125;int main()&#123; int len; // 序列长度 int num[maxsize]; // 用来存输入的数 PSeqList L = (PSeqList)malloc(sizeof(SeqList)); printf("输入序列元素个数: "); scanf("%d", &amp;len); printf("输入约瑟夫序列(空格分开): "); // 依次插入 for (int l = 0; l &lt; len; l++ )&#123; scanf("%d", &amp;num[l]); InSeqList(L, l+1, num[l]); //printf(" %d ", num[l]); &#125; yusefu_SeqList(L, 2, 5); return 0;&#125; 2.循环链表 这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:1. 先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空2. 接着用个循环，创建剩下的单个节点，同样只有数据域3. 再把这些节点连接起来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/* 约瑟夫问题的循环链表实现* author: Qian Jipeng(C)* date: 2019-3-24* version: 2.0(1.0 aborted for too complexed)*/#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;/* node definition */typedef struct node&#123; int data; struct node * next;&#125;linklist;/* \brief: crate the linklist and do insert, return the first node's ptr \param: n -&gt;&gt; the size of the serises\return: the first node's ptr*//* creat the node in range(1, n)*/linklist * initLink(int n)&#123; linklist * head = (linklist*)malloc(sizeof(linklist)); /* the first node initionalized (not head node)*/ head-&gt;data = 1; head-&gt;next = NULL; /* a ptr to move through the list */ linklist * tmp = head; /* we satrt with the second node for a loop */ for (int i = 2; i &lt;= n; i ++) &#123; linklist * body = (linklist*)malloc(sizeof(linklist)); /* creat and init single node */ body -&gt; data = i; body -&gt; next = NULL; /* connect the single nodes together */ tmp -&gt; next = body; tmp = tmp -&gt; next; &#125; //printf("%d\n", tmp-&gt;data); /* now tmp is just the last node */ tmp -&gt; next = head; /*connect the head and the rear */ return head; /* by this method, we created a loop linklist */&#125;void yusefu(linklist * head,int k,int m)&#123; linklist * tail = head; //找到链表第一个结点的上一个结点，为删除操作做准备 while (tail -&gt; next != head) &#123; tail = tail -&gt; next; &#125; linklist * p = head; //找到编号为k的人(或者是第几个开始，可以改) while (p -&gt; data != k) &#123; tail = p; p = p-&gt;next; &#125; //从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了， while (p -&gt; next != p) &#123; //找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。 for (int i = 1; i &lt; m; i ++) &#123; tail = p; p = p -&gt; next; &#125; tail-&gt;next=p-&gt;next;//从链表上将p结点去除 printf("%d \t",p -&gt; data); free(p); p = tail -&gt; next;//继续使用p指针指向出列编号的下一个编号 &#125; /* the last one */ printf("%d \n",p -&gt; data); free(p);&#125;int main() &#123; linklist * head=initLink(10); yusefu(head, 2, 5); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>约瑟夫问题</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构之逆波兰式]]></title>
    <url>%2F2019%2F08%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[学的数据结构，感觉掌握的不牢固，于是实现了一个demo 中缀表达式转换为后缀表达式并求值 算法思想:创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，直到表达式末尾, 最后一个入栈的就是最终结果 先实现求值这一步吧，已知后缀表达式 转换这一环节待更新… 源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define maxsize 100#define datatype inttypedef struct &#123; datatype data[maxsize]; int top; // top 指明当前栈顶元素的位置&#125; SeqStack, *PSeqStack;// 初始化顺序栈PSeqStack Init_SeqStack()&#123; PSeqStack S; S = (PSeqStack) malloc(sizeof(SeqStack)); //printf("%p\n", S); if (S) S -&gt; top = -1; // top 设为-1 (认为设定),表示空 return S; // 返回指向顺序栈的指针&#125;// 判断栈空int Empty_SeqStack(PSeqStack S)&#123; // 没有元素，空栈 if (S -&gt; top == -1) return 1; // 1 表示为空 return 0; &#125;// 入栈void Push_SeqStack(PSeqStack S, datatype x)&#123; if (S -&gt; top == maxsize-1)&#123; printf("栈满不能再入栈\n"); //return 0; // 返回 0 表示失败 &#125; else&#123; S -&gt; top ++; S -&gt; data[S -&gt; top] = x; //return 1; &#125;&#125;// 出栈,保存栈顶元素于*x中，并删除void Pop_SeqStack(PSeqStack S, datatype *x)&#123; if (Empty_SeqStack(S))&#123; printf("栈空不能出栈\n"); //return 0; // 0 表示出栈失败 &#125; else&#123; *x = S -&gt; data[S -&gt; top]; S -&gt; top --; //return 1; &#125;&#125;// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别int GetTop_SeqStack(PSeqStack S, datatype *x)&#123; if (Empty_SeqStack(S))&#123; printf("栈空不能取top元素\n"); return 0; &#125; else&#123; *x = S -&gt; data[S -&gt; top]; return 1; &#125;&#125;// 销毁栈，参数为待销毁顺序栈的指针地址void Destory_SeqStack(PSeqStack *S)&#123; // *S 二级指针 if (*S) free (*S); *S = NULL; return;&#125;/* 判断是否是操作数 */int IsNum(char c)&#123; if (c &gt;= '0' &amp;&amp; c &lt;= '9')&#123; return 1; &#125; return 0;&#125;char transfer()&#123; &#125;/* 核心函数 */int calculate(char *A)&#123; PSeqStack s = Init_SeqStack(); int result; int a, b, c; // a,b 上一次，上上一次入栈的元素，Ｃ是临时变量 char ch; ch = *A ++; /* 我们人为设置，在字符数组末尾加一个'#', 作为结束符 */ while(ch != '#')&#123; if (IsNum(ch))&#123; Push_SeqStack(s, ch - '0'); &#125; else &#123; /* 这里注意， 先进后出 */ Pop_SeqStack(s, &amp;b); Pop_SeqStack(s, &amp;a); switch (ch) &#123; case '+': c = a+b; break; case '-': c = a-b; break; case '*': c = a*b; break; case '/': c = a/b; break; default: break; &#125; /* 临时结果入栈 */ Push_SeqStack(s, c); &#125; ch = *A ++; &#125; GetTop_SeqStack(s, &amp;result); Destory_SeqStack(&amp;s); return result;&#125;int main()&#123; char num[12] = &#123;'1','2','8','5','-','*','+','4','2','/','-', '#'&#125;; printf("计算结果: %d\n",calculate(num)); return 0;&#125; 测试输入: 1char num[12] = &#123;'1','2','8','5','-','*','+','4','2','/','-', '#'&#125;; 测试结果: 15 写在最后其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有std::sort()函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…我学数据结构最大的收获就是： 学会用计算机的思维去思考问题 学会如何调试程序 学会耐心做一件事课程设计]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>逆波兰式</tag>
        <tag>堆栈</tag>
        <tag>中缀表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统下文件乱码问题解决]]></title>
    <url>%2F2019%2F08%2F17%2FLinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1%2F</url>
    <content type="text"><![CDATA[今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。 主要是用到了Linux的 iconv 命令 Step one 获取当前文件编码我当前文件是 Student.cpp 1file Student.cpp 得到输出如下： 1Student.cpp: C source, UTF-8 Unicode text 是个万国码 Step Two 获取本机编码1cat /etc/sysconfig/i18n 不知道为什么我这里报错，没有这个文件???不过Linux一般都是UTF-8 Step Three 修改文件编码1iconv -f GBK -t UTF-8 Student.cpp -o Student0.cpp 这里Student.cpp是原来的文件，Student0.cpp是我修改后的文件。 改后打开文件就没有乱码问题了 这里有个问题，如果有多个文件不能在一起转化比如我有两个文件，Student.cpp 和 Student.h 必须要执行两次命令，尴尬。后来想起来可以用通配符，文件名不改变，即可 注意： 通配符要慎用! 最后的最后: 写了个小项目，放在了仓库中编码转换]]></content>
      <categories>
        <category>utils</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>编码</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[和小薇薇的700天]]></title>
    <url>%2F2019%2F08%2F16%2F%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[Encrypted passage, enter password to read. Decrypt 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]]></content>
      <categories>
        <category>小胖子</category>
      </categories>
      <tags>
        <tag>700天</tag>
      </tags>
  </entry>
</search>
