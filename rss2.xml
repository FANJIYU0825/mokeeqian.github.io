<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Sun, 15 Sep 2019 09:23:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>深入理解C函数调用机制</title>
      <link>http://www.qianjipeng.top/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6.html</link>
      <guid>http://www.qianjipeng.top/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6.html</guid>
      <pubDate>Sun, 15 Sep 2019 07:21:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;C语言是面向过程的一种语言，而函数则作为解决一个个问题的“过程”，在一个程序中，会出现函数的声明、定义以及调用，我们已经知道
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>C语言是面向过程的一种语言，而函数则作为解决一个个问题的“过程”，在一个程序中，会出现函数的声明、定义以及调用，我们已经知道C函数的调用和栈有关，但是在有些程序的debug过程中，如果不了解函数调用的底层实现原理，是很痛苦的。所以这里就以x86-64下的C语言函数调用为例，至于为什么不带上C++，前面已经说过，C++ is not greater C，C++里面的构造函数、虚函数，更为复杂，所以这里不做讨论。<br><br>在此之前，需要了解一下：</p><ul><li><font color="red">栈帧</font><br><br>栈帧也叫过程活动记录，可以说每个函数的调用都对应着一个栈帧，栈帧里保存了函数运行的环境：函数参数、返回地址(下一条指令的地址)、局部变量等。要知道，<strong>栈的存储顺序是从高地址往低地址存储</strong>，每个函数的每次调用，都会有属于自己的栈帧，ebp(32位)/rbp(64位)叫做栈底指针寄存器，指向栈帧的底部(高地址)；esp/rsp指向栈帧顶部(低地址)</li><li><font color="red">x86-64下16个通用寄存器</font><br><img src="https://pic1.zhimg.com/80/v2-8f2a02c38a3b53ce857b87ed01272b80_hd.png" alt><ul><li>每个寄存器的用途并不是单一的。</li><li>%rax 通常用于存储函数调用的返回结果，同时也用于乘法和除法指令中。在imul 指令中，两个64位的乘法最多会产生128位的结果，需要 %rax 与 %rdx 共同存储乘法结果，在div 指令中被除数是128 位的，同样需要%rax 与 %rdx 共同存储被除数。</li><li>%rsp 是堆栈指针寄存器，通常会指向栈顶位置，堆栈的 pop 和push 操作就是通过改变 %rsp 的值即移动堆栈指针的位置来实现的。</li><li>%rbp 是栈帧指针，用于标识当前栈帧的起始位置</li><li>%rdi, %rsi, %rdx, %rcx,%r8, %r9 六个寄存器用于存储函数调用时的6个参数（如果有6个或6个以上参数的话）。</li><li>被标识为 “miscellaneous registers” 的寄存器，属于通用性更为广泛的寄存器，编译器或汇编程序可以根据需要存储任何数据。</li><li>这里还要区分一下 “Caller Save” 和 ”Callee Save” 寄存器，即寄存器的值是由”调用者保存“ 还是由 ”被调用者保存“。当产生函数调用时，子函数内通常也会使用到通用寄存器，那么这些寄存器中之前保存的调用者(父函数）的值就会被覆盖。为了避免数据覆盖而导致从子函数返回时寄存器中的数据不可恢复，CPU 体系结构中就规定了通用寄存器的保存方式。<br>如果一个寄存器被标识为”Caller Save”， 那么在进行子函数调用前，就需要由调用者提前保存好这些寄存器的值，保存方法通常是把寄存器的值压入堆栈中，调用者保存完成后，在被调用者（子函数）中就可以随意覆盖这些寄存器的值了。<br>如果一个寄存被标识为“Callee Save”，那么在函数调用时，调用者就不必保存这些寄存器的值而直接进行子函数调用，进入子函数后，子函数在覆盖这些寄存器之前，需要先保存这些寄存器的值，即这些寄存器的值是由被调用者来保存和恢复的。</li></ul></li></ul><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p>函数调用时，caller与callee的栈帧结构如图：<br><br><img src="https://pic2.zhimg.com/80/v2-bd5a0aa1625c4445ba33e506b91dba29_hd.png" alt><br>子函数调用时，执行的操作：<br></p><ol><li>父函数将调用参数<strong><font color="red">从后向前</font></strong>压栈 </li><li>将返回地址压栈保存 </li><li>跳转到子函数起始地址执行</li><li>子函数将父函数栈帧起始地址（%rpb） 压栈</li><li>将 %rbp 的值设置为当前 %rsp 的值，即将 %rbp 指向子函数栈帧的起始地址</li></ol><p>示例代码：<br><br><strong>testfun.c</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void <span class="function"><span class="keyword">fun</span>(<span class="title">int</span></span> a, int b, int c) &#123;</span><br><span class="line">int x = <span class="number">10</span>;</span><br><span class="line">int y = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span>(1,2,3);</span></span><br><span class="line"><span class="function"><span class="title">return</span></span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc进行编译：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc testfun<span class="selector-class">.c</span> -g -o testfun</span><br></pre></td></tr></table></figure><p>gcc生成汇编代码：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.file<span class="string">"testfun.c"</span></span><br><span class="line">.text</span><br><span class="line">.globl<span class="function"><span class="keyword">fun</span></span></span><br><span class="line"><span class="function">.<span class="title">type</span></span><span class="function"><span class="keyword">fun</span>, @<span class="title">function</span></span></span><br><span class="line"><span class="function"><span class="keyword">fun</span>:</span></span><br><span class="line"><span class="function">.<span class="title">LFB0</span></span>:</span><br><span class="line">.cfi_startproc</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset <span class="number">16</span></span><br><span class="line">.cfi_offset <span class="number">6</span>, -<span class="number">16</span></span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register <span class="number">6</span></span><br><span class="line">movl%edi, -<span class="number">20</span>(%rbp)</span><br><span class="line">movl%esi, -<span class="number">24</span>(%rbp)</span><br><span class="line">movl%edx, -<span class="number">28</span>(%rbp)</span><br><span class="line">movl$<span class="number">10</span>, -<span class="number">8</span>(%rbp)</span><br><span class="line">movl$<span class="number">100</span>, -<span class="number">4</span>(%rbp)</span><br><span class="line">nop</span><br><span class="line">popq%rbp</span><br><span class="line">.cfi_def_cfa <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.<span class="symbol">LFE0:</span></span><br><span class="line">.size<span class="function"><span class="keyword">fun</span>, .<span class="title">-</span></span><span class="function"><span class="keyword">fun</span></span></span><br><span class="line"><span class="function">.<span class="title">globl</span></span>main</span><br><span class="line">.<span class="keyword">type</span>main, @function</span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">.<span class="symbol">LFB1:</span></span><br><span class="line">.cfi_startproc</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset <span class="number">16</span></span><br><span class="line">.cfi_offset <span class="number">6</span>, -<span class="number">16</span></span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register <span class="number">6</span></span><br><span class="line">movl$<span class="number">3</span>, %edx</span><br><span class="line">movl$<span class="number">2</span>, %esi</span><br><span class="line">movl$<span class="number">1</span>, %edi</span><br><span class="line">call<span class="function"><span class="keyword">fun</span></span></span><br><span class="line"><span class="function"><span class="title">movl</span></span>$<span class="number">0</span>, %eax</span><br><span class="line">popq%rbp</span><br><span class="line">.cfi_def_cfa <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.<span class="symbol">LFE1:</span></span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident<span class="string">"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609"</span></span><br><span class="line">.section.note.GNU-stack,<span class="string">""</span>,@progbits</span><br></pre></td></tr></table></figure><p>貌似不大好看，使用objdump反汇编看看(只保留关键代码)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">testfun</span>:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">00000000004004d6 &lt;fun&gt;:</span><br><span class="line">void fun(int a, int b, int c) &#123;</span><br><span class="line">  4004d6:55                   push   %rbp</span><br><span class="line">  4004d7:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4004da:89 7d ec             mov    %edi,-0x14(%rbp)</span><br><span class="line">  4004dd:89 75 e8             mov    %esi,-0x18(%rbp)</span><br><span class="line">  4004e0:89 55 e4             mov    %edx,-0x1c(%rbp)</span><br><span class="line">int x = 10;</span><br><span class="line">  4004e3:c7 45 f8 0a 00 00 00 movl   $0xa,-0x8(%rbp)</span><br><span class="line">int y = 100;</span><br><span class="line">  4004ea:c7 45 fc 64 00 00 00 movl   $0x64,-0x4(%rbp)</span><br><span class="line">&#125;</span><br><span class="line">  4004f1:90                   nop</span><br><span class="line">  4004f2:5d                   pop    %rbp</span><br><span class="line">  4004f3:c3                   retq   </span><br><span class="line"></span><br><span class="line">00000000004004f4 &lt;main&gt;:</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  4004f4:55                   push   %rbp</span><br><span class="line">  4004f5:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">fun(1,2,3);// 对fun(int, int, int)的调用</span><br><span class="line">  4004f8:ba 03 00 00 00       mov    $0x3,%edx// 3先入栈</span><br><span class="line">  4004fd:be 02 00 00 00       mov    $0x2,%esi// 然后是2</span><br><span class="line">  400502:bf 01 00 00 00       mov    $0x1,%ed// 最后是1</span><br><span class="line">  400507:e8 ca ff ff ff       callq  4004d6 &lt;fun&gt;</span><br><span class="line">return 0;</span><br><span class="line">  40050c:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">&#125;</span><br><span class="line">  400511:5d                   pop    %rbp</span><br><span class="line">  400512:c3                   retq   </span><br><span class="line">  400513:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40051a:00 00 00 </span><br><span class="line">  40051d:0f 1f 00             nopl   (%rax)</span><br></pre></td></tr></table></figure><p>这个就好看多了，有对应的汇编代码和C源码，对于我这个汇编菜鸟来说真是太人性化了。不过这还是不够，我们还有寄存器没有观察。万能的gdb，这件事就交给你了。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> gdb testfun -tui<span class="comment">// 使用tui界面</span></span><br></pre></td></tr></table></figure><p>接着，</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> layout regs<span class="comment">// 分配一个寄存器界面布局</span></span><br></pre></td></tr></table></figure><p>然后，</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set disassmele-<span class="keyword">next</span>-<span class="keyword">line</span> <span class="keyword">on</span><span class="comment">// 实时显示反汇编代码</span></span><br></pre></td></tr></table></figure><p>接着，在fun()的调用位置打上断点，</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ b <span class="number">7</span><span class="comment">//也就是我们的fun(1,2,3);</span></span><br><span class="line">$ b *<span class="function"><span class="keyword">fun</span>// 注意 *<span class="keyword">fun</span>是汇编级别的<span class="title">fun</span><span class="params">()</span></span>函数地址</span><br></pre></td></tr></table></figure><p>接着，单步运行，</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> ni<span class="comment">// 注意,ni和si都是相对于汇编代码的单步运行，n和s只是相对于C代码的单步运行；</span></span><br><span class="line"><span class="comment">// 再者，n和s都有单步运行的功能，只不过s直接会进入函数调用的内部</span></span><br></pre></td></tr></table></figure><p><strong>1. main</strong></p><p>首先，3进入%edx寄存器<br><br>然后,2进入%esi寄存器<br><br>接着，1进入%edi寄存器<br><br>然后对fun()函数进行调用</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">0</span>x00000000004004f8 &lt;main+<span class="number">4</span>&gt;<span class="symbol">:</span> ba <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  mov    $<span class="number">0</span>x3,%edx</span><br><span class="line">   <span class="number">0</span>x00000000004004fd &lt;main+<span class="number">9</span>&gt;<span class="symbol">:</span> be <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  mov    $<span class="number">0</span>x2,%esi</span><br><span class="line">   <span class="number">0</span>x0000000000400502 &lt;main+<span class="number">14</span>&gt;<span class="symbol">:</span>        bf <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  mov    $<span class="number">0</span>x1,%edi</span><br><span class="line">=&gt; <span class="number">0</span>x0000000000400507 &lt;main+<span class="number">19</span>&gt;<span class="symbol">:</span>        <span class="symbol">e8</span> ca ff ff ff  callq  <span class="number">0</span>x4004d6 &lt;fun&gt;</span><br></pre></td></tr></table></figure><p><img src="http://px1awapyv.bkt.clouddn.com/step1.png" alt></p><p><strong>2. fun</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=&gt; <span class="number">0x00000000004004d6</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">0</span>&gt;:  <span class="number">55</span>      push   %rbp</span><br><span class="line">   <span class="number">0x00000000004004d7</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">1</span>&gt;:  <span class="number">48</span> <span class="number">89</span> e5        mov    %rsp,%rbp</span><br><span class="line">   <span class="number">0x00000000004004da</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">4</span>&gt;:  <span class="number">89</span> <span class="number">7</span>d ec        mov    %edi,-<span class="number">0x14</span>(%rbp)</span><br><span class="line">   <span class="number">0x00000000004004dd</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">7</span>&gt;:  <span class="number">89</span> <span class="number">75</span> e8        mov    %esi,-<span class="number">0x18</span>(%rbp)</span><br><span class="line">   <span class="number">0x00000000004004e0</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">10</span>&gt;: <span class="number">89</span> <span class="number">55</span> e4        mov    %edx,-<span class="number">0x1c</span>(%rbp)</span><br><span class="line">   <span class="number">0x00000000004004f1</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">27</span>&gt;: <span class="number">90</span>      nop</span><br><span class="line">   <span class="number">0x00000000004004f2</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">28</span>&gt;: <span class="number">5</span>d      pop    %rbp</span><br><span class="line">   <span class="number">0x00000000004004f3</span> &lt;<span class="function"><span class="keyword">fun</span><span class="title">+</span></span><span class="number">29</span>&gt;: c3      retq</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>线程与进程</title>
      <link>http://www.qianjipeng.top/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B.html</link>
      <guid>http://www.qianjipeng.top/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B.html</guid>
      <pubDate>Sat, 14 Sep 2019 07:22:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;计算机系统中的进程与线程&quot;&gt;&lt;a href=&quot;#计算机系统中的进程与线程&quot; class=&quot;headerlink&quot; title=&quot;计算机系统中的进程与线程&quot;&gt;&lt;/a&gt;计算机系统中的进程与线程&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.c
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="计算机系统中的进程与线程"><a href="#计算机系统中的进程与线程" class="headerlink" title="计算机系统中的进程与线程"></a>计算机系统中的进程与线程</h1><p><a href="https://www.jianshu.com/p/a4fa4edbeb8a" target="_blank" rel="noopener">参考这篇文章</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li>进程和线程都是一个对cpu工作的时间段的描述</li><li>进程是资源分配的最小单位，线程是cpu调度的最小单位</li><li>进程是线程的爸爸(开玩笑的比喻)</li></ul><h2 id="要知道的知识"><a href="#要知道的知识" class="headerlink" title="要知道的知识"></a>要知道的知识</h2><ul><li>cpu的运算和执行速度很快、非常快，就连寄存器也只能勉强追上cpu的车尾灯，至于内存以及其他存储设备，是远远追不上cpu的处理速度的</li><li>计算机很笨，cpu在同一时间段只能做一件事情，我们平时的一边码代码，一边开网易云音乐，其实是cpu不断在这两个客户端软件之间来回切换，只不过切换的速度太快了，以至于我们以为cpu是同时运行的</li><li>计算机执行程序的过程，轮流执行，加载程序A的上下文，执行程序A，保存程序A的上下文；加载程序B的上下文，执行程序B，保存程序B的上下文；……</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是资源分配的最小单位，貌似有点抽象，就来打个比方吧。我们开了一个word，开了一个qq音乐和一个网易云音乐，那么我们的计算机中就有了三个进程(假使不存在其他的程序，假使)，那么下图就是我们的cpu运行这三个程序的情况：<br><img src="https://pic3.zhimg.com/80/v2-0ae120b1a3510dddaf3cf464895a0776_hd.jpg" alt><br>每个小方格都是一个cpu运行的时间片段，约100ms，cpu就是这样不断地在这些程序之间来回切换，由于时间间隔太短，所以造成了多个程序“并行运行”的假象。其实不然，这是早些年在单核cpu上出现的技术，所以说，当运行的程序过多，cpu负载越大，切换的时间也就越长，所以我们会感觉到明显的卡顿现象。于是乎，多核cpu出现了。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>可以说，线程是进程的儿子，一个进程可以拥有多个线程，这些线程会共享cpu为进程分配的资源，就好像多个儿子共享父亲的财产。<br><img src="https://pic4.zhimg.com/80/v2-10425b0a0856632b913d445dbdfa4deb_hd.jpg" alt><br>以qq为例，我们打开了qq，我们一边聊天，一边发图片，一边发文件，一边刷新qq消息，这些都是在我们的qq程序里面实现的，也就是说，我们做的这四个工作，都是在qq这个进程之下。</p><h3 id="区别及联系"><a href="#区别及联系" class="headerlink" title="区别及联系"></a>区别及联系</h3><p>联系：</p><ul><li>一个线程只会属于一个进程，但一个进程至少会有一个线程</li><li>资源分配给进程，这些资源会被它下面的线程共享</li><li>线程在执行过程中，需要同步协作，不同进程的线程需要依靠消息通信来实现协作</li></ul><p>区别：</p><ul><li>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位</li><li>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行</li><li>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.</li><li>系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>C/C++之sizeof与strlen</title>
      <link>http://www.qianjipeng.top/C++%E4%B9%8Bsizeof%E4%B8%8Estrlen.html</link>
      <guid>http://www.qianjipeng.top/C++%E4%B9%8Bsizeof%E4%B8%8Estrlen.html</guid>
      <pubDate>Thu, 12 Sep 2019 13:47:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;C-C-中的sizeof与strlen&quot;&gt;&lt;a href=&quot;#C-C-中的sizeof与strlen&quot; class=&quot;headerlink&quot; title=&quot;C/C++中的sizeof与strlen&quot;&gt;&lt;/a&gt;C/C++中的sizeof与strlen&lt;/h1&gt;&lt;p&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="C-C-中的sizeof与strlen"><a href="#C-C-中的sizeof与strlen" class="headerlink" title="C/C++中的sizeof与strlen"></a>C/C++中的sizeof与strlen</h1><p>很久之前的C课程上面老师就提到过sizeof，当时也不知道是怎么一回事，后来在读代码的过程中经常遇到sizeof，索性就来好好了解一下吧。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p>首先要知道一点，sizeof是C/C++中的一个运算符，我们通常的用法是<code>sizeof(foo)</code>，<strong><font color="red">在编译时才会计算foo的大小并返回，它的值不受foo里面所存储的内容影响，只会和foo的数据类型(char还是int还是指针…)和计算机平台(32位还是64位)有关。</font></strong><br></p><p>举个例子：<br><br><strong>Test1.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">int</span> *c;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// int 类型占4个字节</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(b) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// char 类型占1个字节</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(c) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 64位系统指针占8个字节，32位一个指针占4个字节</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出：<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><br>**Test2.cpp**<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">int</span> *c;</span><br><span class="line"><span class="keyword">double</span> *e;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(d) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 4</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(e) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出：<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><br>sizeof(a)和sizeof(d)相等，这就说明了sizeof(foo)与foo里面存取的内容无关。<br>好接下来，如果<font color="green">遇到C++中的类怎么办？</font><br>**Test3.cpp**<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a;<span class="comment">// 4</span></span><br><span class="line"><span class="keyword">char</span> b;<span class="comment">// 1</span></span><br><span class="line"><span class="keyword">int</span> *c;<span class="comment">// 8</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo foo;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(foo) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><p>啥？输出是16，为什么是16呢？4+1+8不应该是13吗？<br><br>一开始我也是这么认为的，知道看了<strong><em>inside the C++ object module</em></strong>一书时才醒悟，我们的编译器一般都会对我们的代码做出优化，一个专业名词叫做<strong><font color="red">内存对齐</font></strong>，<strong><font color="hotpink">编译器在编译程序时，会检测一个类的数据成员，是否sizeof(foo)的值是4的整数倍，如果不是，就会自动扩张成4的整数倍(距离当期sizeof最小的)，具体为什么，要说到C++中的成员数据的内部布局，这个我们在这先不做讨论。大家记着就好，后面我会详细介绍。</font></strong><br><br>所以说，上面的答案就合乎逻辑了，16 = 4 + 1 + 8 + 3，这个3叫做<strong>padding size</strong>。<br></p><p>不妨再来一波？<br><br><strong>Test4.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> a;<span class="comment">// 4</span></span><br><span class="line"><span class="keyword">char</span> b;<span class="comment">// 1</span></span><br><span class="line"><span class="keyword">int</span> *c;<span class="comment">// 8</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span><span class="keyword">public</span> Foo &#123;<span class="comment">// 加上继承试试</span></span><br><span class="line"><span class="keyword">char</span> d;<span class="comment">// 1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo foo;</span><br><span class="line">Bar bar;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof foo is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(foo) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 16</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof bar is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(bar) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 24</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span> foo <span class="keyword">is</span>: <span class="number">16</span></span><br><span class="line"><span class="keyword">sizeof</span> bar <span class="keyword">is</span>: <span class="number">24</span><span class="comment">//why???</span></span><br></pre></td></tr></table></figure><p>是不是又蒙了？加上继承之后，sizeof(bar)为什么是24呢？先抛砖引玉，后面的文章再详细解释。</p><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h2><p>strlen()是C的一个库函数，注意它是函数，一般用于计算字符串的长度，遇到<code>&#39;\0&#39;</code>就停止计算。我们来测试一下：<br><br><strong>Test5.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>] = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof a is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strlen a is: "</span> &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof b is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strlen b is: "</span> &lt;&lt; <span class="built_in">strlen</span>(b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof c is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strlen c is: "</span> &lt;&lt; <span class="built_in">strlen</span>(c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sizeof</span> a <span class="keyword">is</span>: <span class="number">8</span><span class="comment">// 一个指针大小</span></span><br><span class="line">strlen a <span class="keyword">is</span>: <span class="number">11</span><span class="comment">// 字符串长度，不带'\0'</span></span><br><span class="line"><span class="built_in">sizeof</span> b <span class="keyword">is</span>: <span class="number">100</span><span class="comment">// 数组大小</span></span><br><span class="line">strlen b <span class="keyword">is</span>: <span class="number">11</span><span class="comment">// 字符串长度，不带'\0'</span></span><br><span class="line"><span class="built_in">sizeof</span> <span class="built_in">c</span> <span class="keyword">is</span>: <span class="number">12</span><span class="comment">// 字符串长度，加上一个'\0'</span></span><br><span class="line">strlen <span class="built_in">c</span> <span class="keyword">is</span>: <span class="number">11</span><span class="comment">// 字符串长度，不带'\0'</span></span><br></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p><strong><font color="red"><br>讲到这里，二者之间的区别想必大家也都明白了，strlen 的结果要在运行的时候才能计算出来，而sizeof的值是在编译时就确定的，所以不能用sizeof来计算动态分配的类型大小。<br></font></strong></p><p><strong>Test6.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof a is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"strlen a is: "</span> &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof *a is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(*a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">*a = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"now sizeof a is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"now strlen a is: "</span> &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"now sizeof *a is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(*a) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br><span class="line">a = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sizeof <span class="selector-tag">a</span> is: <span class="number">8</span></span><br><span class="line">strlen <span class="selector-tag">a</span> is: <span class="number">0</span></span><br><span class="line">sizeof *<span class="selector-tag">a</span> is: <span class="number">1</span></span><br><span class="line">now sizeof <span class="selector-tag">a</span> is: <span class="number">8</span></span><br><span class="line">now strlen <span class="selector-tag">a</span> is: <span class="number">1</span></span><br><span class="line">now sizeof *<span class="selector-tag">a</span> is: <span class="number">1</span><span class="comment">// sizeof(*a)没变化??</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/C++%E4%B9%8Bsizeof%E4%B8%8Estrlen.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python--记一次爬虫经历</title>
      <link>http://www.qianjipeng.top/Python--%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86.html</link>
      <guid>http://www.qianjipeng.top/Python--%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86.html</guid>
      <pubDate>Wed, 11 Sep 2019 13:33:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;记一次Python爬虫经历&quot;&gt;&lt;a href=&quot;#记一次Python爬虫经历&quot; class=&quot;headerlink&quot; title=&quot;记一次Python爬虫经历&quot;&gt;&lt;/a&gt;记一次Python爬虫经历&lt;/h1&gt;&lt;p&gt;　　这几天，老师让我写一个爬虫，抓取正方教务系统的数
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="记一次Python爬虫经历"><a href="#记一次Python爬虫经历" class="headerlink" title="记一次Python爬虫经历"></a>记一次Python爬虫经历</h1><p>　　这几天，老师让我写一个爬虫，抓取正方教务系统的数据，想想自己很久没有搞Python了，于是答应了，刚好自己之前有过这样的想法，爬一爬教务处的网站，以后查信息什么的就方便多了。<br><br>　　其实自己之前写过的爬虫都是静态网站的，直接get请求一下，解析相应的网页内容就能实现了，但是这次做的是动态网站，需要提交验证码，好在观察了一下，验证码只是简单的数字验证码，没有像铁总的12306那样反人类的验证码。话不多说，开干。<br></p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="登录实现"><a href="#登录实现" class="headerlink" title="登录实现"></a>登录实现</h2><p><img src="http://px1awapyv.bkt.clouddn.com/1.png" alt><br>上图中的表单正是我们登录系统的，获取它的id，然后我们人为把我们的登录信息传递给这些id，我们再来看看请求头，请求方式是post，也就是说，我们要把headers、cookies、data这些参数一起post到web服务器上。<br><img src="http://px1awapyv.bkt.clouddn.com/2.png" alt></p><p>下面的这是我们的用户信息，也就是浏览器中的输入框和选择按钮，其中<code>__VIEWSTATE</code>这个属性好像是sessionId？我尝试了一下不带这个参数进行post，结果没有登录成功。咱也不知道，赞只管用就行了。<br>来说明一下：<br><br><font color="red"><br>TextBox1是用户名<br><br>TextBox2是用户密码<br><br>TextBox3是验证码<br><br>RadioButtonList1是用户身份，我们默认的学生就好<br><br>Button1是登录按钮<br></font><br><img src="http://px1awapyv.bkt.clouddn.com/3.png" alt></p><p>等等，是不是忘了什么重要的事情？验证码呢？<br><br><img src="http://px1awapyv.bkt.clouddn.com/4.png" alt><br>这是验证码所在的url，我们等下可以get一下，抓取网页内容，然后将验证码保存下来。<br></p><h2 id="查询实现"><a href="#查询实现" class="headerlink" title="查询实现"></a>查询实现</h2><p>查询功能就比较容易实现了，只要我们获取到了cookies就可以了，然后每次进行不同的查询时，只要更新一下headers中的<code>__VIEWSTATE</code>属性的值就可以了，然后抓取相应的网页内容，进行信息的提取，可以发现，我们的信息主要都是表格布局，所以简单来说只要用正则匹配一下就可以简单获取信息了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>1. config_loader.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># Copyright: Qian Jipeng(C) 2019</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line">cf = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">cf.read(<span class="string">"config.conf"</span>)</span><br><span class="line">section = cf.sections() <span class="comment"># a list</span></span><br><span class="line"><span class="comment">#print(section)</span></span><br><span class="line"><span class="comment">#print(cf.options('user'))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUserId</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> str(cf.get(<span class="string">'user'</span>, <span class="string">'userid'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUserPassword</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> str(cf.get(<span class="string">'user'</span>, <span class="string">'password'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIndexUrl</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> str(cf.get(<span class="string">'web'</span>, <span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLoginUrl</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> str(cf.get(<span class="string">'web'</span>, <span class="string">'loginurl'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCheckcodeUrl</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> str(cf.get(<span class="string">'web'</span>, <span class="string">'checkcodeurl'</span>))</span><br></pre></td></tr></table></figure><p><strong>2. main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="comment"># Copyright: Qian Jipeng(C) 2019</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">TODO:</span></span><br><span class="line"><span class="string">数据清洗与进一步解析!</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> config_loader <span class="keyword">as</span> cfl</span><br><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagParser</span><span class="params">(HTMLParser)</span>:</span></span><br><span class="line"><span class="comment"># view_state = list()     # 有点像C++中的static变量，是类变量，不可行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">super().__init__()</span><br><span class="line">self.view_state = list()    <span class="comment"># 用来存放viewstate</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">del</span> self.view_state         <span class="comment"># 释放资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></span><br><span class="line"><span class="keyword">if</span> tag == <span class="string">'input'</span>:</span><br><span class="line">attrs = dict(attrs)</span><br><span class="line"><span class="keyword">if</span> attrs.__contains__(<span class="string">'name'</span>) <span class="keyword">and</span> attrs[<span class="string">'name'</span>] == <span class="string">'__VIEWSTATE'</span>:</span><br><span class="line">self.view_state.append(attrs[<span class="string">'value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doParse</span><span class="params">(self, webData)</span>:</span></span><br><span class="line">self.feed(data=webData)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.user_id = cfl.getUserId()</span><br><span class="line">self.user_pwd = cfl.getUserPassword()</span><br><span class="line">self.user_name = <span class="string">""</span></span><br><span class="line">self.login_url = cfl.getLoginUrl()</span><br><span class="line">self.checkcode_url = cfl.getCheckcodeUrl()</span><br><span class="line">self.cookies = requests.get(self.login_url).cookies</span><br><span class="line">self.headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">r'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># self.query_headers = &#123;</span></span><br><span class="line"><span class="comment"># 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',</span></span><br><span class="line"><span class="comment"># 'Accept-Encoding': 'gzip, deflate',</span></span><br><span class="line"><span class="comment"># 'Accept-Language': 'en-US,en;q=0.9',</span></span><br><span class="line"><span class="comment"># 'Connection': 'keep-alive',</span></span><br><span class="line"><span class="comment"># 'Content-Type': 'text/html; charset=gb2312',</span></span><br><span class="line"><span class="comment"># 'Referer': '',   # cfl.getIndexUrl() + 'xskbcx.aspx?xh=' + self.user_id + "&amp;xm=" + self.user_name + "&amp;gnmkdm=" + kdn_code,</span></span><br><span class="line"><span class="comment"># # 'Referer': website + 'xs_main.aspx?xh=' + userxh,</span></span><br><span class="line"><span class="comment"># 'Upgrade-Insecure-Requests': '1',</span></span><br><span class="line"><span class="comment"># 'User-Agent': r'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">self.config = &#123;</span><br><span class="line"><span class="string">'__VIEWSTATE'</span>: <span class="string">''</span>,  <span class="comment"># viewstate</span></span><br><span class="line"><span class="string">'TextBox1'</span>: self.user_id,     <span class="comment"># userid</span></span><br><span class="line"><span class="string">'TextBox2'</span>: self.user_pwd,     <span class="comment"># password</span></span><br><span class="line"><span class="string">'TextBox3'</span>: <span class="string">''</span>,  <span class="comment"># checkcode</span></span><br><span class="line"><span class="string">'RadioButtonList1'</span>: <span class="string">'%D1%A7%C9%FA'</span>,     <span class="comment"># session</span></span><br><span class="line"><span class="string">'Button1'</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">'lbLanguage'</span>: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line">self.tag_parser = TagParser()</span><br><span class="line">self.tag_parser.doParse(requests.get(self.login_url).text)    <span class="comment"># 解析</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取验证码并显示</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCheckCodePic</span><span class="params">(self, filename)</span>:</span></span><br><span class="line"></span><br><span class="line">pic = requests.post(url=self.checkcode_url, cookies=self.cookies, headers=self.headers)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(filename):</span><br><span class="line">os.remove(filename)</span><br><span class="line"><span class="comment"># write as byte</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> filewriter:</span><br><span class="line">filewriter.write(pic.content)</span><br><span class="line"></span><br><span class="line">image = Image.open(filename)        <span class="comment"># PIL</span></span><br><span class="line">image.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 更新headers字典，在查询之前，必须先调用该函数</span></span><br><span class="line"><span class="comment"># def updateQueryHeaders(self, referer):</span></span><br><span class="line"><span class="comment"># self.query_headers['Referer'] = referer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应该在获取验证码后调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateConfig</span><span class="params">(self, viewstate, checkcode)</span>:</span></span><br><span class="line">self.config[<span class="string">'__VIEWSTATE'</span>] = viewstate</span><br><span class="line">self.config[<span class="string">'TextBox3'</span>] = checkcode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否登陆成功</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkIfSuccess</span><span class="params">(self, webContent)</span>:</span></span><br><span class="line">pattern = <span class="string">r'&lt;title&gt;(.*?)&lt;/title&gt;'</span></span><br><span class="line">items = re.findall(pattern, webContent.text)</span><br><span class="line"><span class="keyword">if</span> items[<span class="number">0</span>] == <span class="string">"欢迎使用正方教务管理系统！请登录"</span>:      <span class="comment"># 特征匹配</span></span><br><span class="line"><span class="comment"># print("登陆失败")</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># print("登陆成功")</span></span><br><span class="line"><span class="comment"># 抓取名字</span></span><br><span class="line">catch = <span class="string">'&lt;span id="xhxm"&gt;(.*?)&lt;/span&gt;&lt;/em&gt;'</span></span><br><span class="line">name = re.findall(catch, webContent.text)</span><br><span class="line">name = name[<span class="number">0</span>][:<span class="number">-2</span>]</span><br><span class="line"><span class="comment"># name = name[:-2]</span></span><br><span class="line">print(name)</span><br><span class="line">self.user_name = urllib.parse.quote(name.encode(<span class="string">"gb2312"</span>))      <span class="comment"># 更新用户姓名</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # Not used</span></span><br><span class="line"><span class="comment"># class Query(Login):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def __init__(self):</span></span><br><span class="line"><span class="comment"># Login.__init__(self)</span></span><br><span class="line"><span class="comment"># self.course_url = cfl.getIndexUrl() + "xskbcx.aspx?xh=" + self.user_id + "&amp;xm=" + self.user_name + "&amp;gnmkdm=" + "N121603"</span></span><br><span class="line"><span class="comment"># self.exam_url = cfl.getIndexUrl() + "xskscx.aspx?xh=" + self.user_id + "&amp;xm=" + self.user_name + "&amp;gnmkdm=" + "N121604"</span></span><br><span class="line"><span class="comment"># self.query_state = ""</span></span><br><span class="line"><span class="comment"># self.query_config = &#123;</span></span><br><span class="line"><span class="comment"># '__EVENTTARGET': '',</span></span><br><span class="line"><span class="comment"># '__EVENTARGUMENT': '',</span></span><br><span class="line"><span class="comment"># '__VIEWSTATE': '',</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># self.query_headers = &#123;</span></span><br><span class="line"><span class="comment"># 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',</span></span><br><span class="line"><span class="comment"># 'Accept-Encoding': 'gzip, deflate',</span></span><br><span class="line"><span class="comment"># 'Accept-Language': 'en-US,en;q=0.9',</span></span><br><span class="line"><span class="comment"># 'Connection': 'keep-alive',</span></span><br><span class="line"><span class="comment"># 'Content-Type': 'text/html; charset=gb2312',</span></span><br><span class="line"><span class="comment"># #'Referer': '',</span></span><br><span class="line"><span class="comment"># # cfl.getIndexUrl() + 'xskbcx.aspx?xh=' + self.user_id + "&amp;xm=" + self.user_name + "&amp;gnmkdm=" + kdn_code,</span></span><br><span class="line"><span class="comment"># 'Upgrade-Insecure-Requests': '1',</span></span><br><span class="line"><span class="comment"># 'User-Agent': r'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def updateQueryConfig(self, queryviewstate):</span></span><br><span class="line"><span class="comment"># self.query_config['__VIEWSTATE'] = queryviewstate</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def updateQueryHeaders(self, referer):</span></span><br><span class="line"><span class="comment"># self.query_headers['Referfer'] = referer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def updateQueryState(self):</span></span><br><span class="line"><span class="comment"># content = requests.get(url=self.course_url, cookies=self.cookies, headers=self.headers)</span></span><br><span class="line"><span class="comment"># print(content.text)</span></span><br><span class="line"><span class="comment"># catch = '&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line"><span class="comment"># self.query_state = re.findall(catch, content.text)[0]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 课表查询</span></span><br><span class="line"><span class="comment"># def queryCourse(self):</span></span><br><span class="line"><span class="comment"># # 先配置headers</span></span><br><span class="line"><span class="comment"># self.updateQueryHeaders(self.course_url)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # print(self.query_headers)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># self.updateQueryState()</span></span><br><span class="line"><span class="comment"># self.updateQueryConfig(self.query_state)</span></span><br><span class="line"><span class="comment"># print("config")</span></span><br><span class="line"><span class="comment"># print(self.query_config)</span></span><br><span class="line"><span class="comment"># content = requests.session().get(url=self.course_url, data=self.query_config,</span></span><br><span class="line"><span class="comment">#                                  headers=self.query_headers, cookies=super().cookies)</span></span><br><span class="line"><span class="comment"># # 保存表格</span></span><br><span class="line"><span class="comment"># catch = '&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line"><span class="comment"># table = re.findall(catch, content.text)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># f = open("test.txt", "w")</span></span><br><span class="line"><span class="comment"># for each_line in table:</span></span><br><span class="line"><span class="comment"># if "&amp;nbsp" in each_line:</span></span><br><span class="line"><span class="comment"># # <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="comment"># pass</span></span><br><span class="line"><span class="comment"># f.write(each_line + "\n")</span></span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局函数，对外接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doLogin</span><span class="params">(loginobject:Login, filename:str)</span>:</span></span><br><span class="line">loginobject.getCheckCodePic(filename)</span><br><span class="line">checkcode = input(<span class="string">"输入验证码: "</span>)</span><br><span class="line">loginobject.updateConfig(loginobject.tag_parser.view_state[<span class="number">0</span>], checkcode)</span><br><span class="line"><span class="comment"># print(loginobject.config)</span></span><br><span class="line">content = requests.post(url=loginobject.login_url, data=loginobject.config,</span><br><span class="line">                        headers=loginobject.headers, cookies=loginobject.cookies)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> loginobject.checkIfSuccess(content):</span><br><span class="line">print(<span class="string">"登陆成功!!!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"登录失败~~~"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># query = Query()</span></span><br><span class="line"><span class="comment"># query.queryCourse()</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"-------------开始查询----------------"</span>)</span><br><span class="line"><span class="comment"># 配置区</span></span><br><span class="line">course_url = cfl.getIndexUrl() + <span class="string">'xskbcx.aspx?xh='</span> + loginobject.user_id + <span class="string">"&amp;xm="</span> + loginobject.user_name + <span class="string">"&amp;gnmkdm="</span> + <span class="string">"N121603"</span></span><br><span class="line">exam_url = cfl.getIndexUrl() + <span class="string">'xskscx.aspx?xh='</span> + loginobject.user_id + <span class="string">"&amp;xm="</span> + loginobject.user_name + <span class="string">"&amp;gnmkdm="</span> + <span class="string">"N121604"</span></span><br><span class="line">classexam_url = cfl.getIndexUrl() + <span class="string">'xsdjkscx.aspx?xh='</span> + loginobject.user_id + <span class="string">"&amp;xm="</span> + loginobject.user_name + <span class="string">"&amp;gnmkdm="</span> + <span class="string">"N121606"</span></span><br><span class="line">plan_url = cfl.getIndexUrl() + <span class="string">'pyjh.aspx?xh='</span> + loginobject.user_id + <span class="string">"&amp;xm="</span> + loginobject.user_name + <span class="string">"&amp;gnmkdm="</span> + <span class="string">"N121607"</span></span><br><span class="line">select_course_url = cfl.getIndexUrl() + <span class="string">'pyjh.aspx?xh='</span> + loginobject.user_id + <span class="string">"&amp;xm="</span> + loginobject.user_name + <span class="string">"&amp;gnmkdm="</span> + <span class="string">"N121615"</span></span><br><span class="line">add_exam_url = cfl.getIndexUrl() + <span class="string">'xsbkkscx.aspx?xh='</span> + loginobject.user_id + <span class="string">"&amp;xm="</span> + loginobject.user_name + <span class="string">"&amp;gnmkdm="</span> + <span class="string">"N121613"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">query_config = &#123;</span><br><span class="line"><span class="string">'__EVENTTARGET'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'__EVENTARGUMENT'</span>: <span class="string">''</span>,</span><br><span class="line"><span class="string">'__VIEWSTATE'</span>: <span class="string">''</span>,</span><br><span class="line">&#125;</span><br><span class="line">query_headers = &#123;</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line"><span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>, <span class="string">'Accept-Language'</span>: <span class="string">'en-US,en;q=0.9'</span>, <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=gb2312'</span>, <span class="string">'Referer'</span>: <span class="string">''</span>, <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">r'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>&#125;</span><br><span class="line"><span class="comment"># end 配置区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------- 查询课表 ----------------------</span></span><br><span class="line">query_headers[<span class="string">'Referer'</span>] = course_url</span><br><span class="line"><span class="comment"># 先get一下，获取view_state</span></span><br><span class="line">course_html = requests.get(course_url, cookies=loginobject.cookies,</span><br><span class="line">                    headers=query_headers)</span><br><span class="line">catch = <span class="string">'&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line">query_state = re.findall(catch, course_html.text)[<span class="number">0</span>]</span><br><span class="line">query_config[<span class="string">'__VIEWSTATE'</span>] = query_state</span><br><span class="line"><span class="keyword">del</span> query_state</span><br><span class="line">course = requests.session().get(url=course_url, data=query_config,</span><br><span class="line">                                headers=query_headers, cookies=loginobject.cookies)</span><br><span class="line"><span class="comment"># print(course.text)        # 测试ok</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">catch = <span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line">course_table = re.findall(catch, course.text)</span><br><span class="line"><span class="keyword">del</span> course</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"course_table.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> course_table:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"&amp;nbsp"</span> <span class="keyword">in</span> each_line:</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f.write(each_line + <span class="string">"\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> course_table</span><br><span class="line"><span class="comment"># ------------------------- 课表结束 ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------- 查询考试安排 -----------------------</span></span><br><span class="line">query_headers[<span class="string">'Referer'</span>] = exam_url</span><br><span class="line">exam_html = requests.get(exam_url, cookies=loginobject.cookies,</span><br><span class="line">                           headers=query_headers)</span><br><span class="line">catch = <span class="string">'&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line">query_state = re.findall(catch, exam_html.text)[<span class="number">0</span>]</span><br><span class="line">query_config[<span class="string">'__VIEWSTATE'</span>] = query_state</span><br><span class="line"><span class="keyword">del</span> query_state</span><br><span class="line">exam = requests.session().get(url=exam_url, data=query_config,</span><br><span class="line">                                headers=query_headers, cookies=loginobject.cookies)</span><br><span class="line"><span class="comment"># print(course.text)        # 测试ok</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">catch = <span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line">exam_table = re.findall(catch, exam.text)</span><br><span class="line"><span class="keyword">del</span> exam</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"exam_arrangement.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> exam_table:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"&amp;nbsp"</span> <span class="keyword">in</span> each_line:</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f.write(each_line + <span class="string">"\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> exam_table</span><br><span class="line"><span class="comment"># ----------------------------------- 结束 -----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------等级考试成绩查询 --------------------------------</span></span><br><span class="line">query_headers[<span class="string">'Referer'</span>] = classexam_url</span><br><span class="line">classexam_html = requests.get(classexam_url, cookies=loginobject.cookies,</span><br><span class="line">                         headers=query_headers)</span><br><span class="line">catch = <span class="string">'&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line">query_state = re.findall(catch, classexam_html.text)[<span class="number">0</span>]</span><br><span class="line">query_config[<span class="string">'__VIEWSTATE'</span>] = query_state</span><br><span class="line"><span class="keyword">del</span> query_state</span><br><span class="line">classexam = requests.session().get(url=classexam_url, data=query_config,</span><br><span class="line">                              headers=query_headers, cookies=loginobject.cookies)</span><br><span class="line"><span class="comment"># print(course.text)        # 测试ok</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">catch = <span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line">classexam_table = re.findall(catch, classexam.text)</span><br><span class="line"><span class="keyword">del</span> classexam</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"class_exam.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> classexam_table:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"&amp;nbsp"</span> <span class="keyword">in</span> each_line:</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f.write(each_line + <span class="string">"\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> classexam_table</span><br><span class="line"><span class="comment"># --------------------------- 结束 --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------- 培养计划查询 ------------------------</span></span><br><span class="line">query_headers[<span class="string">'Referer'</span>] = plan_url</span><br><span class="line">plan_html = requests.get(plan_url, cookies=loginobject.cookies,</span><br><span class="line">                         headers=query_headers)</span><br><span class="line">catch = <span class="string">'&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line">query_state = re.findall(catch, plan_html.text)[<span class="number">0</span>]</span><br><span class="line">query_config[<span class="string">'__VIEWSTATE'</span>] = query_state</span><br><span class="line"><span class="keyword">del</span> query_state</span><br><span class="line">plan = requests.session().get(url=plan_url, data=query_config,</span><br><span class="line">                              headers=query_headers, cookies=loginobject.cookies)</span><br><span class="line"><span class="comment"># print(course.text)        # 测试ok</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">catch = <span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line">plan_table = re.findall(catch, plan.text)</span><br><span class="line"><span class="keyword">del</span> plan</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"development_plan.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> plan_table:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"&amp;nbsp"</span> <span class="keyword">in</span> each_line:</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f.write(each_line + <span class="string">"\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> plan_table</span><br><span class="line"><span class="comment"># --------------------- 结束 ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------- 学生选课情况查询 ------------------------------</span></span><br><span class="line">query_headers[<span class="string">'Referer'</span>] = select_course_url</span><br><span class="line">select_course_html = requests.get(select_course_url, cookies=loginobject.cookies,</span><br><span class="line">                         headers=query_headers)</span><br><span class="line">catch = <span class="string">'&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line">query_state = re.findall(catch, select_course_html.text)[<span class="number">0</span>]</span><br><span class="line">query_config[<span class="string">'__VIEWSTATE'</span>] = query_state</span><br><span class="line"><span class="keyword">del</span> query_state</span><br><span class="line">select_course = requests.session().get(url=select_course_url, data=query_config,</span><br><span class="line">                              headers=query_headers, cookies=loginobject.cookies)</span><br><span class="line"><span class="comment"># print(course.text)        # 测试ok</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">catch = <span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line">select_course_table = re.findall(catch, select_course.text)</span><br><span class="line"><span class="keyword">del</span> select_course</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"select_course.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> select_course_table:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"&amp;nbsp"</span> <span class="keyword">in</span> each_line:</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f.write(each_line + <span class="string">"\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> select_course_table</span><br><span class="line"><span class="comment"># --------------------- 结束 ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------- 补考开始查询 ----------------------</span></span><br><span class="line">query_headers[<span class="string">'Referer'</span>] = add_exam_url</span><br><span class="line">add_exam_html = requests.get(add_exam_url, cookies=loginobject.cookies,</span><br><span class="line">                         headers=query_headers)</span><br><span class="line">catch = <span class="string">'&lt;input type="hidden" name="__VIEWSTATE" value="(.*?)" /&gt;'</span></span><br><span class="line">query_state = re.findall(catch, add_exam_html.text)[<span class="number">0</span>]</span><br><span class="line">query_config[<span class="string">'__VIEWSTATE'</span>] = query_state</span><br><span class="line"><span class="keyword">del</span> query_state</span><br><span class="line">add_exam = requests.session().get(url=add_exam_url, data=query_config,</span><br><span class="line">                              headers=query_headers, cookies=loginobject.cookies)</span><br><span class="line"><span class="comment"># print(course.text)        # 测试ok</span></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">catch = <span class="string">'&lt;td&gt;(.*?)&lt;/td&gt;'</span></span><br><span class="line">add_exam_table = re.findall(catch, add_exam.text)</span><br><span class="line"><span class="keyword">del</span> add_exam</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"add_exam.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> add_exam_table:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"&amp;nbsp"</span> <span class="keyword">in</span> each_line:</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 数据清洗</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f.write(each_line + <span class="string">"\n"</span>)</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> add_exam_table</span><br><span class="line"><span class="comment"># ------------------- 结束 ------------------------</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"------------查询成功-----------"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">login = Login()</span><br><span class="line">doLogin(login, <span class="string">"./checkcode.png"</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/Python--%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB%E7%BB%8F%E5%8E%86.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>C变量--声明、定义、赋值、初始化</title>
      <link>http://www.qianjipeng.top/C%E5%8F%98%E9%87%8F-%E5%A3%B0%E6%98%8E%E3%80%81%E5%AE%9A%E4%B9%89%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96.html</link>
      <guid>http://www.qianjipeng.top/C%E5%8F%98%E9%87%8F-%E5%A3%B0%E6%98%8E%E3%80%81%E5%AE%9A%E4%B9%89%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96.html</guid>
      <pubDate>Wed, 04 Sep 2019 09:31:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;　　出来混总是要还的，这不，来还大一C的陈年旧账了。打算深入细致的学习一下计算机，所以必须要从基础打起来。这篇文章算是扫盲篇吧。讲述C中的变量的声明、定义、赋值和初始化。为了让文章通俗易懂，我就只介绍一下它们的区别了吧。下一篇我们再讨论C/C++内存管理，会涉及const、
        
      
      </description>
      
      <content:encoded><![CDATA[<p>　　出来混总是要还的，这不，来还大一C的陈年旧账了。打算深入细致的学习一下计算机，所以必须要从基础打起来。这篇文章算是扫盲篇吧。讲述C中的变量的声明、定义、赋值和初始化。为了让文章通俗易懂，我就只介绍一下它们的区别了吧。下一篇我们再讨论C/C++内存管理，会涉及const、static、auto等等这些变量类型。<br><br>说明一下，这篇文章是关于C语言的变量的。</p><h1 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h1><p>　　变量的定义就是告诉编译器，我要创建一个变量了，你要找个地方将它存放起来，这个地方可以是堆栈(局部变量)，也可以是寄存器(寄存器变量)，还可以是…<br><br>变量的定义指定了一个数据类型，可以是int，也可以是char，也可以是struct…<br><br>　　总结一下，变量的定义可以概括为：<br><br><code>type variablelist</code><br>type表示的是变量的数据类型，variablelist表示的是一个变量列表，存放的是一个个变量，用逗号隔开。<br><br>举个例子：<br><br><code>int a,b,c;</code><br>这里就定义了三个int类型的变量a,b,c<br></p><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><p>　　那么什么是变量的声明呢？<br><br>变量声明可以理解为程序员给编译器一个“保证”，程序员：“我待会要使用一个变量，但是这个变量我现在用不上，我先这样写者，你编译我程序的时候，不要报错。”<br><br>所以，变量声明向编译器保证变量会以一定的类型和名称存在特定的地方，所以编译器就可以在不知道这个变量的细节的情况下，进行编译。值得一提的是，变量声明只在程序的编译时有效，链接时需要程序员给变量实际的变量定义，否则，报错。<br></p><h1 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h1><p>变量的初始化是给变量赋予一个值。<br><br>C中两种类型的表达式：<strong>左值表达式</strong>和<strong>右值表达式</strong><br></p><h2 id="左值"><a href="#左值" class="headerlink" title="左值"></a>左值</h2><p>早期的C给出的定义是：<br><br><strong><font color="hotpink">左值是一个表达式，可能出现在赋值操作的左边或右边，但右值只能出现在右边。</font></strong><br><br>我觉得这个定义实在是太模糊了，甚至它是错的。比如：<br><br><code>a*b = 100</code><br><br>显然这个写法是错误的，但是它符合上述说法。<br><br>我的理解是：<br><br><strong><font color="red">左值（lvalue）是一个表达式，它表示一个可被标识的（变量或对象的）内存位置，并且允许使用&amp;操作符来获取这块内存的地址。</font></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">i = <span class="number">43</span>; </span><br><span class="line"><span class="keyword">int</span>* p = &amp;i; <span class="comment">// ok, i 是左值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">foo() = <span class="number">42</span>; <span class="comment">// ok, foo() 是左值</span></span><br><span class="line"><span class="keyword">int</span>* p1 = &amp;foo(); <span class="comment">// ok, foo() 是左值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foobar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">j = foobar(); <span class="comment">// ok, foobar() 是右值</span></span><br><span class="line"><span class="keyword">int</span>* p2 = &amp;foobar(); <span class="comment">// 错误，不能获取右值的地址</span></span><br><span class="line">j = <span class="number">42</span>; <span class="comment">// ok, 42 是右值</span></span><br></pre></td></tr></table></figure><h2 id="右值"><a href="#右值" class="headerlink" title="右值"></a>右值</h2><p>那么不是左值，便是右值了。</p><h2 id="关于局部变量和全局变量"><a href="#关于局部变量和全局变量" class="headerlink" title="关于局部变量和全局变量"></a>关于局部变量和全局变量</h2><p>局部变量需要程序员自己初始化，全局变量会被编译器自动初始化，但是我们还是应该养成良好的变成变成习惯，正确定义和初始化变量。<br><br>int —&gt; 0<br><br>double —&gt; 0<br><br>float —&gt; 0<br><br>char —&gt; 0<br><br>ptr —&gt; NULL</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/C%E5%8F%98%E9%87%8F-%E5%A3%B0%E6%98%8E%E3%80%81%E5%AE%9A%E4%B9%89%E3%80%81%E8%B5%8B%E5%80%BC%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>C++对象模型--拷贝构造函数</title>
      <link>http://www.qianjipeng.top/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html</link>
      <guid>http://www.qianjipeng.top/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html</guid>
      <pubDate>Sat, 31 Aug 2019 14:58:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;接上一篇&lt;a href=&quot;http://mokeeqian.github.io/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%
        
      
      </description>
      
      <content:encoded><![CDATA[<p>接上一篇<a href="http://mokeeqian.github.io/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">C++默认构造函数</a>，这一篇我们来讲C++拷贝构造函数。  </p><h1 id="写在前面-关于深拷贝、浅拷贝"><a href="#写在前面-关于深拷贝、浅拷贝" class="headerlink" title="写在前面(关于深拷贝、浅拷贝)"></a>写在前面(关于深拷贝、浅拷贝)</h1><p>在此之前，先介绍一下：  </p><ul><li><strong>浅拷贝</strong><br>只是对指针进行了拷贝，指针指向的地址并没有进行拷贝，<strong><font color="red">拷贝后的指针和原指针指向同一块内存区域(这是很危险的、如果析构，会析构两次，导致内存泄漏！</font></strong>。我们的C++编译器合成的拷贝构造函数是执行<strong>浅拷贝</strong>，如果拷贝了指针(如Foo::*p)，必定会出错，这个指针会成为野指针<br><img src="http://px1awapyv.bkt.clouddn.com/less.png" alt></li><li><strong>深拷贝</strong><br>对指针和指针指向的地址都进行拷贝，<strong><font color="red">拷贝后的指针和原指针指向两块不同的内存区域，所以，执行深拷贝，需要开辟新的内存空间。</font></strong><br><img src="http://px1awapyv.bkt.clouddn.com/deep.png" alt></li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>来看一个例子：<br><strong>TestA.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">~Student();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;<span class="comment">// 花括号让s1和s2变成局部对象，方便测试</span></span><br><span class="line">Student s1;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;<span class="comment">// 调用默认拷贝构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：  </p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">~Student </span><br><span class="line">~Student </span><br><span class="line">*** <span class="literal">Error</span> <span class="keyword">in</span> `./a.<span class="keyword">out</span>': double free <span class="keyword">or</span> corruption (fasttop): <span class="number">0</span>x00000000010f9c20 ***</span><br></pre></td></tr></table></figure><p>很显然，报出了一个错误，double free，也就是进行两次析构，这是不允许的。为什么呢？<br><strong><font color="gree">因为我这里调用的是编译器合成的拷贝构造函数，它进行的是浅拷贝，拷贝后s1.name和s2.name都是指向同一块内存区域，对同一块内存区域进行两次释放，能不出错吗？</font></strong>  </p><p>我们来gdb一下看看：<br>这是对s2进行拷贝初始化之前，s2这时候还不存在，内存地址都还是起始地址</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br><span class="line">(gdb) p s2</span><br><span class="line">$<span class="number">2</span> = &#123;num = <span class="number">0</span>, name = <span class="number">0x0</span>&#125;</span><br></pre></td></tr></table></figure><p>这是对s2进行拷贝初始化之后，s2这时候和s1的数据成员完全一致，也就是说，我们的拷贝构造函数只是对s1.name和s1.num进行了简单的复制，赋值给s2</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p s2</span><br><span class="line">$<span class="number">3</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br><span class="line">(gdb) p s1</span><br><span class="line">$<span class="number">4</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br></pre></td></tr></table></figure><p>我们修改一下原来的代码、加上一个user-defined拷贝构造函数，进行深拷贝：<br><strong>TestB.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">Student(<span class="keyword">const</span> Student &amp; stu);</span><br><span class="line">~Student();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝构造函数</span></span><br><span class="line">Student::Student( <span class="keyword">const</span> Student &amp; stu ) &#123;</span><br><span class="line">num = stu.num;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">if</span> ( name!= <span class="literal">NULL</span> )</span><br><span class="line"><span class="built_in">strcpy</span>(name, stu.name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;<span class="comment">// 花括号让s1和s2变成局部对象，方便测试</span></span><br><span class="line">Student s1;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：  </p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">~Student </span><br><span class="line">~Student </span><br></pre></td></tr></table></figure><p>这次没有出现重复析构的错误了，输出的是我们希望的结果，我们再一次gdb看一下：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p s1</span><br><span class="line">$<span class="number">3</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br><span class="line">(gdb) p s2</span><br><span class="line">$<span class="number">4</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x615050</span> <span class="string">"\024"</span>&#125;</span><br></pre></td></tr></table></figure><p>刚刚为TestB.cpp加上了一个拷贝构造函数，所以<strong><font color="gree">执行Student s2(s1)的时候，会调用我定义的Student(const Student &amp;stu)这个拷贝构造函数，执行深拷贝，即为s2对象的name属性开辟新的内存空间(首地址0x615050)，使得name指针指向这个新开辟的内存地址，而不是原来的s1的name指针所指向的地址(首地址0x614c20)</font></strong>，这样在析构的时候，便没有内存泄漏的错误了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>知道区别之后，那么我们什么时候该用浅拷贝、什么时候该用深拷贝？<br>或许上面的例子是一个答案，当我们需要对动态的数据类型(指针、数组等)进行拷贝的时候，使用深拷贝，防止内存泄漏、指针悬挂问题的出现。<br>当然大多数情况下，浅拷贝就可以解决我们的问题了。</p><h1 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1><h2 id="什么是拷贝构造函数"><a href="#什么是拷贝构造函数" class="headerlink" title="什么是拷贝构造函数"></a>什么是拷贝构造函数</h2><ul><li>对于普通的内置数据类型，要对它们进行复制很简单，只需要简单的赋值操作符就可以了</li><li>类对象数据类型就不行了，它比较复杂，有各种各样的成员变量</li></ul><p>我们看一个例子：　　</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">int</span> a;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">//构造函数  </span></span><br><span class="line">    Foo(<span class="keyword">int</span> b)  </span><br><span class="line">    &#123; a = b;&#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//拷贝构造函数  </span></span><br><span class="line">    Foo(<span class="keyword">const</span> Foo &amp; C)  </span><br><span class="line">    &#123;  </span><br><span class="line">        a = C.a;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="function">Foo <span class="title">A</span><span class="params">(<span class="number">100</span>)</span></span>;  </span><br><span class="line">    <span class="function">Foo <span class="title">B</span><span class="params">(A)</span></span>;</span><br><span class="line">    <span class="comment">//Foo B = A; </span></span><br><span class="line">    B.Show ();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Foo(const Foo &amp; c)就是一个拷贝构造函数，它是一种特殊的构造函数，<strong>参数中必须要有一个是这个类的类型的引用变量</strong>，一个类中可以有多个拷贝构造函数。</p><h2 id="何时调用"><a href="#何时调用" class="headerlink" title="何时调用"></a>何时调用</h2><p><strong>1. 对象需要通过另外一个对象进行初始化</strong><br>这一点显而易见</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Foo <span class="keyword">a</span>(b);<span class="comment">// 拷贝构造函数</span></span><br><span class="line">Foo <span class="keyword">a</span> = b;<span class="comment">// 拷贝赋值操作符</span></span><br></pre></td></tr></table></figure><p><strong>2. 对象以值传递的方式传入函数参数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:   </span><br><span class="line"> Foo(<span class="keyword">int</span> b) </span><br><span class="line">    &#123;  </span><br><span class="line">  a = b;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"creat: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"> Foo(<span class="keyword">const</span> Foo&amp; C) </span><br><span class="line">    &#123;</span><br><span class="line">  a = C.a;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"copy"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> ~Foo()  </span><br><span class="line"> &#123;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt; <span class="string">"delete: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Show</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//全局函数，传入的是对象  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo_bar</span><span class="params">(Foo C)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"test"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="function">Foo <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>;  </span><br><span class="line"> <span class="comment">//传入对象  </span></span><br><span class="line"> Foo_bar(test);  </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Foo_bar()的过程中，会有如下操作：  </p><ul><li>test作为实参传入Foo_bar()函数的形参，生成临时Foo对象tmp</li><li>调用拷贝构造函数，把test的值传递给tmp,一、二操作在一起就是Foo tmp(test)</li><li>Foo_bar()函数执行完之后，调用析构函数，析构tmp对象 </li></ul><p><strong>3. 对象以值传递的方式从函数返回</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:   </span><br><span class="line"> Foo(<span class="keyword">int</span> b) </span><br><span class="line">    &#123;  </span><br><span class="line">  a = b;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"creat: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"> Foo(<span class="keyword">const</span> Foo&amp; C) </span><br><span class="line">    &#123;</span><br><span class="line">  a = C.a;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"copy"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> ~Foo()  </span><br><span class="line"> &#123;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt; <span class="string">"delete: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Show</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//全局函数，传入的是对象  </span></span><br><span class="line"><span class="function">Foo <span class="title">Foo_bar</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Foo <span class="title">test_local</span><span class="params">(<span class="number">100</span>)</span></span>;  </span><br><span class="line"><span class="keyword">return</span> test_local;</span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"> Foo_bar();  </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Foo_bar()执行到return 语句时候：</p><ul><li>产生一个临时对象tmp</li><li>调用拷贝构造函数，把test_local的值传递给tmp,一、二操作在一起就是Foo tmp(test_local)</li><li>Foo_bar()函数执行到最后，调用析构函数，先析构test_local对象，再析构tmp对象</li></ul><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul><li><strong><font color="red">拷贝构造函数不能对static member进行拷贝赋值，因为static member属于这个类，而不被某个特定的对象所拥有</font></strong></li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>暂时就想到这么多，后面再进行补充。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>C++对象模型--默认构造函数</title>
      <link>http://www.qianjipeng.top/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html</link>
      <guid>http://www.qianjipeng.top/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html</guid>
      <pubDate>Fri, 30 Aug 2019 05:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这篇文章主要讲解C++中默认构造函数的机制，同时解决了困扰了我很久的问题，&lt;font color=&quot;red&quot;&gt;长篇文章&lt;/font&gt;，话不多说，开干！  &lt;/p&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=
        
      
      </description>
      
      <content:encoded><![CDATA[<p>这篇文章主要讲解C++中默认构造函数的机制，同时解决了困扰了我很久的问题，<font color="red">长篇文章</font>，话不多说，开干！  </p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>C++编译器为程序员自动提供下面这些成员函数(在合适的时候)：  </p><ul><li>默认构造函数</li><li>默认析构函数</li><li>拷贝构造函数</li><li>赋值运算符</li><li>地址运算符</li><li>移动构造函数(C++11)</li><li>移动赋值运算符(C++11)</li></ul><h1 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h1><p><font color="red">错误的、不全面的认识： </font> </p><ul><li>如果程序员没有定义默认的构造函数，那么编译器就会提供一个默认构造函数，来完成对成员的初始化</li><li>编译器合成出来的默认构造函数会明确的设置类的每个数据成员的值  </li></ul><p><font color="green">正确认识： </font> </p><ul><li>默认构造函数只在“被需要”的时候，才会被编译器合成，可能是有用或无用</li><li>对构造函数的需求分为程序需求和编译器需求</li><li>一个有用的默认构造函数在必要的时候(4种情况下)也会被编译器合成<ul><li>带有默认构造函数的类对象成员</li><li>带有默认构造函数的基类</li><li>带有虚函数的类</li><li>带有虚基类的类</li></ul></li><li>编译器合成的默认构造函数，不会初始化用户定义的类成员，退一步说，只会初始化编译器“需要的”成员</li><li>编译器只做编译器自己的事，程序员的事需要程序员自己做</li></ul><h1 id="何谓默认构造函数"><a href="#何谓默认构造函数" class="headerlink" title="何谓默认构造函数"></a>何谓默认构造函数</h1><p>　　<strong><em>C++ Annotated Reference Manual(ARM)</em></strong>中提及到：<strong><font color="hotpink">“default constrcutor在需要的时候会被编译器产生出来。”</font></strong>　那这里问题来了，<font color="green">“在需要的时候”，到底是什么时候？又是被谁需要？用来做什么事情？</font><br>以下代码为例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">    Foo *pnext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo bar;</span><br><span class="line">    <span class="keyword">if</span> ( bar.val || bar.pnext ) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在这个程序中，要求val 和 pnext都必须被初始化为0，那么代码中并没有提供setter函数，只有通过和构造函数来初始化，但是代码也没有(显式)提供构造函数。那么这个情形是否符合上述的“在需要的时候”？答案当然是：NO。对“在需要的时候”，可以分为<strong>程序需要</strong>和<strong>编译器需要</strong>，至于前者，那是我们程序员自己的事，我们需要，那我们就自己写构造；后者，是编译器的工作。那么本例中的当然是程序需要，提供默认构造函数的责任就在于程序员。所以上述程序<strong>不会生成一个默认构造函数</strong>。<br>　　那么，什么时候才会合成一个默认构造函数？当编译器需要的时候！被合成出来的默认构造函数<strong>执行编译器所需要的行为</strong>(想想都很可怕，我们都不知编译器到底在背后做了什么)，因此，即便编译器为程序合成了一个默认构造函数，这个构造函数也不会执行我们希望的操作，就是说，这个Foo()构造函数<strong>不会把val和pnext都初始化为0</strong>，也就是我们所说的编译器合成的<strong>无用的默认构造函数(trivial)</strong>，<strong><em>C++ Standard[ISO-C++95]</em></strong>中的原话是，<strong><font color="hotpink">“对于class X，如果没有任何user-defined constructor，那么会有一个default constructor会被隐式声明出来，一个隐式声明出来的defalut constructor是一个trivial constructor”。</font></strong><br>　　我们验证一下：  <br><br><br><strong>代码A：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">Foo *pnext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo bar;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bar.val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bar.pnext &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo_bar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>g++编译运行结果：  </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4196624</span></span><br><span class="line"><span class="number">0x400770</span></span><br></pre></td></tr></table></figure></li><li><p>clang++编译运行结果：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><p>初步怀疑，与编译器有关？  </p><ol><li><p>g++编译gdb调试： </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;val = <span class="number">4196624</span>, pnext = <span class="number">0x400770</span> &lt;_start&gt;&#125;</span><br></pre></td></tr></table></figure></li><li><p>clang++编译gdb调试：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">2</span> = &#123;val = <span class="number">0</span>, pnext = <span class="number">0x0</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><p>另外，在线编译器爆出了一个warnning:  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Start</span><br><span class="line">prog.cc: <span class="keyword">In</span> <span class="function"><span class="keyword">function</span> '<span class="title">void</span> <span class="title">Foo_bar</span><span class="params">()</span>':</span></span><br><span class="line">prog.cc:<span class="number">11</span>:<span class="number">14</span>: warning: <span class="string">'bar.Foo::val'</span> <span class="keyword">is</span> used uninitialized <span class="keyword">in</span> this <span class="function"><span class="keyword">function</span> [-<span class="title">Wuninitialized</span>]</span></span><br><span class="line"><span class="function">   11 |  <span class="title">cout</span> &lt;&lt; <span class="title">bar</span>.<span class="title">val</span> &lt;&lt; <span class="title">endl</span>;</span></span><br><span class="line">      |              ^~~</span><br><span class="line">prog.cc:<span class="number">12</span>:<span class="number">17</span>: warning: <span class="string">'bar.Foo::pnext'</span> may be used uninitialized <span class="keyword">in</span> this <span class="function"><span class="keyword">function</span> [-<span class="title">Wmaybe</span>-<span class="title">uninitialized</span>]</span></span><br><span class="line"><span class="function">   12 |     <span class="title">cout</span> &lt;&lt; <span class="title">bar</span>.<span class="title">pnext</span> &lt;&lt; <span class="title">endl</span>;</span></span><br><span class="line">      |             ~~~~^~~~~</span><br><span class="line"><span class="number">4197792</span></span><br><span class="line"><span class="number">0</span>x400c20</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Finish</span><br></pre></td></tr></table></figure><p>意思是val和pnext没有被初始化，这就说明了我们的无用的默认构造函数没有对类成员进行初始化，在这里，貌似要解释一下<font color="red">初始化</font>和<font color="red">赋值  </font>  <br><br><br><strong>代码B：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">Foo *pnext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo_bar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>g++编译，gdb调试结果：  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;val = <span class="number">4196128</span>, pnext = <span class="number">0x4005c0</span> &lt;_start&gt;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可见，这里的val = 4196128, 貌似是一个<del>随机生成的数值</del>。 </p><ol start="2"><li>clang++编译，gdb调试结果：<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;val = <span class="number">0</span>, pnext = <span class="number">0x0</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此上，基本可以推断出，默认构造函数的行为貌似与编译器有关？<br>但是可以肯定的是，</p><h1 id="non-trivial-有用的-默认构造函数"><a href="#non-trivial-有用的-默认构造函数" class="headerlink" title="non-trivial(有用的)默认构造函数"></a>non-trivial(有用的)默认构造函数</h1><h2 id="带有defalut-constructor的member-class-object"><a href="#带有defalut-constructor的member-class-object" class="headerlink" title="带有defalut constructor的member class object"></a><strong><em>带有defalut constructor的member class object</em></strong></h2><p>举个例子： </p>  <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo();</span><br><span class="line">    Foo(<span class="keyword">int</span> val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo foo;<span class="comment">// 不是继承，是内含!</span></span><br><span class="line">    <span class="keyword">char</span> *<span class="keyword">str</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> foo_bar() &#123;</span><br><span class="line">Bar bar;<span class="comment">//Bar::foo必须在这里初始化</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">str</span> ) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的Foo是一个拥有默认构造函数的一个类，当Foo的一个对象foo作为我们的Bar类的一个成员，同时Bar类没有任何构造函数的时候，那么这个类的implicit default constructor就是nontrivial的，编译器为就会在Bar类的constructor<strong><font color="red">真正需要</font></strong>的时候，为其合成一个默认构造函数。<br>被合成的Bar类的构造函数，里面有必要的代码，能够调用Foo::Foo()对Bar::foo进行处理，但是Bar::str需要程序员来初始化，我们大胆猜测一下，编译器合成的Bar::Bar()可能是这样子的：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> Bar::Bar() &#123;</span><br><span class="line">foo.Foo::Foo();<span class="comment">//伪代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，我们程序员还会写一个Bar::Bar()，对Bar::str初始化：  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Bar::Bar() </span>&#123;</span><br><span class="line"><span class="keyword">str </span>= <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在好了，程序的需求已经得到满足了，但是我们的Bar::foo还没有初始化，但是这里程序员已经显式定义了默认构造函数，所以编译器无法再次合成了，怎么办呢？<br>编译器的做法是：<br><font color="hotpink"><strong>“如果Class A内含有一个或者一个以上的member class object，那么Class A的每一个构造函数都必须调用每一个member class的默认构造函数”*</strong></font>，即编译器会<strong>扩张</strong>已经存在的构造函数，在其中安插一些代码，在user code被执行之前，调用相应的defalut constructor。  </p><pre><code>所以，扩张后的构造函数可能是这样的：　　</code></pre><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bar::Bar() &#123;</span><br><span class="line">foo.Foo::Foo();<span class="comment">// 编译器插入的</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="number">0</span>;<span class="comment">// 程序员写的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后说一点，如果Bar类有多个member class object怎么办？当然是按上面的道理来，只不过对这些object，<strong><font color="red">按照它们声明的顺序来初始化</font></strong>。</p><h2 id="带有defalut-constructor的base-class"><a href="#带有defalut-constructor的base-class" class="headerlink" title="带有defalut constructor的base class"></a><strong><em>带有defalut constructor的base class</em></strong></h2><p>顾名思义，如果一个没有任何构造函数的继承于一个带有默认构造函数的基类，那么编译器就会<strong><font color="red">为这个类合成一个默认构造函数，这个构造函数会调用上一层继承类的默认构造函数。</font></strong><br>那么如果程序员为这个类写了很多个构造函数，但是就是没有默认构造函数，怎么办？<strong><font color="red">编译器会把默认构造函数中需要的代码插入到所有的现有的构造函数中，那么如果上述第一种情况也存在呢？答案是，这些构造函数会在基类构造函数被调用之后，再被调用。</font></strong></p><h2 id="带有一个virtual-function的class"><a href="#带有一个virtual-function的class" class="headerlink" title="带有一个virtual function的class"></a><strong><em>带有一个virtual function的class</em></strong></h2><p>这个与C++中的虚函数的机制有关，参见<a href="http://mokeeqian.github.io/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/" target="_blank" rel="noopener">C++虚函数机制</a>，以下代码为例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">const</span> Widget &amp; widget)</span> </span>&#123;</span><br><span class="line">widget.flip();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设Bell和Whistle都是继承于Widget</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Bell b;</span><br><span class="line">    Whistle w;</span><br><span class="line">    flip(b);</span><br><span class="line">    flip(w);-</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个虚函数表vtbl会在编译的时候被合成出来，用来存放虚函数的地址</li><li>在每一个Widget对象中，都会有一个额外的指针成员vptr，用来存放虚函数表的地址</li></ul><p>此外，widget.flip()的虚拟调用操作会被重新改写，因为flip()在vtbl中是需要通过索引来获得的。可能的代码如下：  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*widget.vptr[1])</span> <span class="comment">(&amp;widget)</span><span class="comment">// &amp;widget是this指针</span></span><br></pre></td></tr></table></figure><p>至于索引为什么是1？因为vtbl中的第一个元素存放的是<strong>type_info</strong>    </p><p>为了让这个机制有效，编译器必须需要为每一个Widget或其派生类的对象的vptr赋值，放上适当的vtbl的地址。<strong><font color="red">对于class所定义的每一个构造函数，编译器都会插入一些代码来完成这样的事情；对于那些没有定义任何构造函数的class，编译器ｈｉ合成一个这样的默认构造函数，完成对vptr的初始化。</font></strong></p><h2 id="带有一个virtual-base-class的class"><a href="#带有一个virtual-base-class的class" class="headerlink" title="带有一个virtual base class的class"></a><strong><em>带有一个virtual base class的class</em></strong></h2><p>这一条没有弄懂…..</p><h1 id="trivial-无用的-默认构造函数-实际上不存在"><a href="#trivial-无用的-默认构造函数-实际上不存在" class="headerlink" title="trivial(无用的)默认构造函数(实际上不存在)"></a>trivial(无用的)默认构造函数(实际上不存在)</h1><p>不满足上述4种情况、没有显式提供user-defined constructor的时候，这个默认构造函数叫implicit trivial default constructor，实际上<strong>编译器根本不会合成这样的一个构造函数</strong>。</p><h1 id="编译器如何合成默认构造函数"><a href="#编译器如何合成默认构造函数" class="headerlink" title="编译器如何合成默认构造函数"></a>编译器如何合成默认构造函数</h1><p>当程序员没有定义构造函数时，编译器会合成一个默认构造函数，来完成编译器需要的工作；当程序员定义了自己的构造函数时，有时候，编译器也会对它“需要的”一些成员进行操作，这时候，编译器的做法是：<br><strong><font color="red">修改构造函数，在程序员写的构造函数里添加代码，添加的代码位于程序员的代码之前。</font></strong></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>默认构造函数只有在上述4种情况下，才会由编译器强制合成，C++ Standard称之为implicit nontrivial default constructor，它只会满足<strong><font color="red">编译器的需要</font></strong>，其他事一概不会做。</li><li>对那些不满足上述4种情况、没有任何user-defined constructor的类，我们说它拥有的是implicit trivial default constructor，实际上，这个默认构造函数<strong><font color="red">根本不会被合成</font></strong>。</li><li>在合成的默认构造函数中，只有<strong><font color="red">基类的子对象、类的成员对象</font>会</strong>被初始化，所有其他的<strong><font color="red">nonstatic data membe</font>r</strong>(如整数、整数指针、整数数组等)都<strong>不会</strong>被初始化，这些初始化对于程序而言或许很重要，但是编译器它管你干啥子。</li><li>自己的事情自己做，编译器合成出来的构造函数只会做编译器需要做的工作，其他的工作需要程序员自己想办法。</li></ul><h1 id="成员初始化列表-补充说明"><a href="#成员初始化列表-补充说明" class="headerlink" title="成员初始化列表(补充说明)"></a>成员初始化列表(补充说明)</h1><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>C++还提供了一种初始化成员的方法：<strong>成员初始化列表</strong><br>何为初始化列表？看个例子：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">float</span> b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化列表初始化</span></span><br><span class="line">    Foo(<span class="keyword">int</span> _a, <span class="keyword">float</span> _b):a(_a),b(_b)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一般赋值运算符初始化</span></span><br><span class="line">    Foo(<span class="keyword">int</span> _a, <span class="keyword">float</span> _b)</span><br><span class="line">    &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">        b = _b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Foo()</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上的<code>Foo(int _a, float _b):a(_a),b(_b) { }</code>就是一个含有列表初始化式的构造函数，观察上述两种初始化的方法，貌似没有区别，真的是这样的吗？<br>首先区别肯定是有的，而且<strong>C++ Primer</strong>中明确提出，有的时候，必须要使用成员初始化列表，否则编译器就会爆出错误！</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>初始化列表的本质是什么？<br><br>举个例子：<br></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Word &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">String <span class="keyword">name</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">count</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Word():<span class="keyword">name</span>(<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们猜测一下，这个name是如何被初始化的。<br></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++伪代码</span></span><br><span class="line">Word::Word(*this)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// String(int) 构造</span></span><br><span class="line">    name.<span class="built_in">String</span>::<span class="built_in">String</span>(<span class="number">0</span>);</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，0 要被String类的String(int)构造函数来构造成一个String对象，然后才能对name初始化。<br>也就是说，<strong><font color="red">对于成员初始化列表，编译器会将其按照变量声明顺序来处理(也不是绝对的，后面会给出例子)，插入一些代码到构造函数中的任何user-defined code之前。</font></strong></p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p><strong>1. 编译器要求的时候</strong><br><strong>深度探索C++对象模型</strong>中提到，在以下四种情况，对成员的初始化必须要使用成员初始化列表：  </p><ul><li>初始化一个reference member</li><li>初始化一个const member</li><li>调用base class的constructor，而它拥有一组参数  </li><li>调用member class的constructor，而它拥有一组参数  </li></ul><p>下面对以上四种情况给出说明：  </p><h3 id="初始化reference-member"><a href="#初始化reference-member" class="headerlink" title="初始化reference member"></a>初始化reference member</h3><p>我们知道引用一经指定，便不可以再改变，一个引用的成员在声明之后，不可以进行赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> &amp;b;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一般赋值运算符初始化</span></span><br><span class="line">    Foo(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b)</span><br><span class="line">    &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">        b = _b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Foo()</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Foo <span class="title">foo</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错：<br></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span><span class="string">cpp:</span> In constructor ‘<span class="string">Foo:</span>:Foo(<span class="keyword">int</span>, <span class="keyword">int</span>)’:</span><br><span class="line"><span class="number">5.</span><span class="string">cpp:</span><span class="number">9</span>:<span class="number">5</span>: <span class="string">error:</span> uninitialized reference member <span class="keyword">in</span> ‘<span class="keyword">int</span>&amp;’ [-fpermissive]</span><br><span class="line">     Foo(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b)</span><br><span class="line">     ^</span><br><span class="line"><span class="number">5.</span><span class="string">cpp:</span><span class="number">4</span>:<span class="number">10</span>: <span class="string">note:</span> ‘<span class="keyword">int</span>&amp; <span class="string">Foo:</span>:b’ should be initialized</span><br><span class="line">     <span class="keyword">int</span> &amp;b;</span><br><span class="line">          ^</span><br></pre></td></tr></table></figure><p>说我Foo::b没有初始化，也就是把b放在构造函数中，不能够正确初始化，那么我们来改一下：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> &amp;b;</span><br><span class="line">    </span><br><span class="line">    Foo(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b):b(_b)</span><br><span class="line">    &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Foo()</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Foo <span class="title">foo</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样是没有问题的了。</p><h3 id="初始化const-member"><a href="#初始化const-member" class="headerlink" title="初始化const member"></a>初始化const member</h3><p>为什么const member需要使用成员初始化列表呢？貌似不可理解。<br><br>实际上，const成员在声明后就马上需要初始化，如果放在构造函数中，执行的是赋值操作，这是不允许的。<br><br>我们来试试用构造函数初始化const member：<br><br><strong>TestA.cpp：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化列表初始化</span></span><br><span class="line">    <span class="comment">//o(int _a, float _b):a(_a),b(_b)</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一般赋值运算符初始化</span></span><br><span class="line">    Foo(<span class="keyword">int</span> _a, <span class="keyword">float</span> _b)</span><br><span class="line">    &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">        b = _b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Foo()</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Foo <span class="title">foo</span><span class="params">(<span class="number">1</span>, <span class="number">0.1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译报错：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.cpp: <span class="keyword">In</span> <span class="function"><span class="keyword">constructor</span> ‘<span class="title">Foo</span>:</span>:Foo(int, float)’:</span><br><span class="line"><span class="number">5</span>.cpp:<span class="number">9</span>:<span class="number">5</span>: error: uninitialized <span class="keyword">const</span> member <span class="keyword">in</span> ‘<span class="keyword">const</span> float’ [-fpermissive]</span><br><span class="line">     Foo(int _a, float _b)</span><br><span class="line">     ^</span><br><span class="line"><span class="number">5</span>.cpp:<span class="number">4</span>:<span class="number">17</span>: note: ‘<span class="keyword">const</span> float Foo::b’ should be initialized</span><br><span class="line">     <span class="keyword">const</span> float b;</span><br><span class="line">                 ^</span><br><span class="line"><span class="number">5</span>.cpp:<span class="number">12</span>:<span class="number">11</span>: error: assignment <span class="keyword">of</span> <span class="keyword">read</span>-only member ‘Foo::b’</span><br><span class="line">         b = _b;</span><br><span class="line">           ^</span><br></pre></td></tr></table></figure><p>他说，我对只读的成员Foo::b赋值了，如你所见，因为<strong><font color="red">const成员变量一经声明或定义，就不可以在修改，而我们放在构造函数中，进行的是赋值操作，所以编译器会报错。</font></strong>所以const member必须要用成员列表初始化。</p><h3 id="调用base-class的constructor，而它拥有一组参数"><a href="#调用base-class的constructor，而它拥有一组参数" class="headerlink" title="调用base class的constructor，而它拥有一组参数"></a>调用base class的constructor，而它拥有一组参数</h3><p>即: 初始化基类的成员，而且这个基类只有带参数的构造函数，没有无参构造函数<br><br><strong>TestB.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">float</span> b;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 一般赋值运算符初始化</span></span><br><span class="line">    Foo(<span class="keyword">int</span> _a, <span class="keyword">float</span> _b)</span><br><span class="line">    &#123;</span><br><span class="line">    a = _a;</span><br><span class="line">        b = _b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Foo()</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span><span class="keyword">public</span> Foo &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Bar(<span class="keyword">int</span> _a, <span class="keyword">int</span> _b, <span class="keyword">int</span> _c):c(_c),Foo(_a,_b)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    </span><br><span class="line">    ~Bar()</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Bar <span class="title">bar</span><span class="params">(<span class="number">1</span>,<span class="number">2.2</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bar.a &lt;&lt;<span class="built_in">endl</span> &lt;&lt; bar.b &lt;&lt; <span class="built_in">endl</span> &lt;&lt; bar.c &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="调用member-class的constructor，而它拥有一组参数"><a href="#调用member-class的constructor，而它拥有一组参数" class="headerlink" title="调用member class的constructor，而它拥有一组参数"></a>调用member class的constructor，而它拥有一组参数</h3><p>即初始化的是一个类对象成员，而且这个类成员所对应的类只有带参数的构造函数，没有无参的构造函数。<br><br>这一点貌似与上一条类似？</p><p><strong>2. 程序效率要求的时候</strong><br><br>这点先放着，等我搞懂初始化、赋值、定义、声明后在写。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Word &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">String <span class="keyword">name</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">count</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Word() </span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">name</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>C++初始化列表的初始化顺序是什么样的呢？<br><br><strong><font color="red">与初始化列表的变量出现顺序无关，而是和变量的声明顺序有关！</font></strong><br><br>但是答案就是绝对的了吗？看个例子：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">X(<span class="keyword">int</span> val)</span><br><span class="line">    :j(val), i(j)</span><br><span class="line">    &#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里你发现了什么？<br><br><strong>没错！如果按照变量声明的顺序来初始化的话，那么就是先初始化i，在初始化j，那么这个构造函数必定会出错，因为用j来初始化i，此时j还没有被初始化！！！<br><br>所以说，<font color="red">初始化列表的初始化顺序也不是确定的，要视具体情况而定。</font></strong></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSAPP(一)--计算机系统漫游</title>
      <link>http://www.qianjipeng.top/CSAPP-%E4%B8%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html</link>
      <guid>http://www.qianjipeng.top/CSAPP-%E4%B8%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html</guid>
      <pubDate>Thu, 29 Aug 2019 03:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;计算机系统学习&quot;&gt;&lt;a href=&quot;#计算机系统学习&quot; class=&quot;headerlink&quot; title=&quot;计算机系统学习&quot;&gt;&lt;/a&gt;计算机系统学习&lt;/h1&gt;&lt;p&gt;狂补知识ing…  &lt;/p&gt;
&lt;h2 id=&quot;计算机系统&quot;&gt;&lt;a href=&quot;#计算机系统&quot; cla
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="计算机系统学习"><a href="#计算机系统学习" class="headerlink" title="计算机系统学习"></a>计算机系统学习</h1><p>狂补知识ing…  </p><h2 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h2><p>计算机系统是由计算机硬件和系统软件组成的，它们共同工作来与进行应用程序。接下来，我会以<strong>hello.c</strong>为例，进行一些零散的总结。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>信息就是位+上下文，我们的hello.c文件叫源文件、源程序，实际上就是一个由值0和1组成的位序列，叫<strong>比特</strong>(bit)，8个位被组织成一组，成为一个<strong>字节</strong>(byte)，每个字节表示程序中的某些文本字符，现在大部分的计算机都使用ANSII标准来存储字符，每个字符都对应唯一的单字节大小的整数值，叫<strong>ANSII值</strong>。</p><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>目前的C、C++、Pascal等都是高级语言，汇编语言也是一些汇编指令，只有最低级的<strong>机器指令</strong>(0、１序列)才能够被计算机直接“识别”，所以说，要想运行一串高级语言代码，必须要有一样东西，把这些高级语言代码转换为计算机能够直接识别的机器指令，这就是编译器的作用。<br>一个计算机编译系统，由四部分组成：</p><ul><li>预处理器(ccp)</li><li>编译器(ccl)</li><li>汇编器(as)</li><li>链接器(ld)<br><img src="http://px1awapyv.bkt.clouddn.com/55.png" alt><br>相应的，一个程序的编译过程，也分为四个阶段：</li><li>预处理阶段<br>预处理器会扫描源文件，定位到以”#”开头的内容，根据这个内容，修改源文件的内容，比如说前面<code>#include &lt;stdio.h&gt;</code>，这时候，我就要找到stdio.h这个头文件，把这个头文件的内容直接插入到hello.c源文件中(至于具体在哪个位置，我们不知道)<br>，生成新的源文件<strong>hello.i</strong>，通常以<strong>.i</strong>作为文件扩展名。</li><li>编译阶段<br>编译器会将文本文件hello.i翻译成文本文件hello.s，它包含了一个汇编语言程序，。即将高级语言翻译成汇编语言。的汇编程序可以为不同的高级语言和不同的编译器提供通用的输出语言。<br><code>gcc -S hello.s hello.c</code></li><li>汇编阶段<br>汇编器将汇编语言翻译成机器语言指令，把这些指令打包成一种叫做<strong>可重定位目标程序</strong>的格式，将结果放在<strong>hello.o</strong>这个二进制文件中。<br><code>gcc -c hello.o hello.c</code></li><li>链接阶段<br>我们的hell.o调用了stdio的printf()函数，它是C语言的一个标准库函数，位于printf.o这个独立的预编译好了的目标文件中，必须要加入我们的hello.o文件中，程序才能够正常运行。链接器就是做这个工作的，将printf.o文件与hello.o文件链接，得到hello<strong>可执行目标文件</strong>，当然，也是二进制文件。这个可执行目标文件可以加载到内存中，被计算机所执行。<br><code>gcc -o hello hello.c</code>　这样的命令会生成可执行文件hello，一般没有后缀。</li></ul><h2 id="了解编译系统的工作流程"><a href="#了解编译系统的工作流程" class="headerlink" title="了解编译系统的工作流程"></a>了解编译系统的工作流程</h2><p>带来的好处：  </p><ul><li>优化程序性能<br>比如说，switch就会比if效率高吗？while和for的效率问题，函数调用的开销到底有多大，传指针和传值到底有什么区别？<br>这些目前我还不清楚、或者说不太清楚，所知道的也就是从书上、网上学来的。或许学了程序的编译过程，就会明白了把。</li><li>理解链接时的错误<br>写代码时，经常会遇到链接错误，顺带提一下，<strong>动态链接</strong>和<strong>静态链接</strong>，待学习。</li></ul><h2 id="动态链接和静态链接"><a href="#动态链接和静态链接" class="headerlink" title="动态链接和静态链接"></a>动态链接和静态链接</h2><p><strong>1. 动态链接</strong><br>　　Windows: <strong>.lib文件</strong><br>　　Linux: <strong>.a</strong>文件<br>　　函数库的<strong>一份拷贝</strong>是可执行文件的<strong>物理组成部分</strong>，称之为静态链接。静态链接当链接程序时，需要使用的每个库函数的一份拷贝被加入到可执行文件中。静态链接使用静态库进行链接，生成的程序包含程序运行所需要的<strong>全部库</strong>，可以直接运行，不过静态链接生成的程序<strong>体积较大</strong>（即使是在静态链接中，整个库文件也<strong>并没有全部装入</strong>到可执行文件中，所装入的只是需要的函数）。<br><strong>2. 静态链接</strong><br>　　Windows: <strong>.dll文件</strong><br>　　Linux: <strong>.so文件</strong><br>　　如果可执行文件<strong>只是包含了文件名</strong>，让载入器在<strong>运行时</strong>能够寻找程序所需要的函数库，称之为动态链接。动态链接允许系统提供一个庞大的函数库集合，可以提供许多有用的服务，程序在运行时寻找它们。动态链接使用动态链接库进行链接，生成的程序在执行的时候需要加载所需的动态库才能运行。动态链接生成的程序<strong>体积较小</strong>，但是必须依赖所需的动态库，否则无法执行。<br><strong>3. 细节</strong><br>　　gcc编译器默认使用动态编译，如果要指定静态编译，需要加上<code>-static</code>参数</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/CSAPP-%E4%B8%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机系统基础--学习开篇</title>
      <link>http://www.qianjipeng.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87.html</link>
      <guid>http://www.qianjipeng.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87.html</guid>
      <pubDate>Sat, 24 Aug 2019 01:33:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;　　作为一个非科班出身的半吊子程序员(程序员?)，在和计算机专业的同学交流的过程中，切实感受到知识面的匮乏，总体体现在对计算
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　作为一个非科班出身的半吊子程序员(程序员?)，在和计算机专业的同学交流的过程中，切实感受到知识面的匮乏，总体体现在对计算机系统的理解。确实，作为一名双非院校信管专业的学生，本身起步就比别人慢了不少，若没有扎实的基本功，将来怎么与别人竞争。<br>　　在自学了将近一年的代码之后，随着代码量的增加，越发觉得基础知识的匮乏，对指针理解的不够透彻，对程序代码的执行情况也是一知半解。不过也不失为一件好事，最怕的就是发现不了问题，故开设这篇博客，记录下以后学习的过程。<br>先给自己定个学习路线吧:</p><ul><li>计算机系统基础NJU袁春凤 + MOOC，为期一个学期，势必拿下</li><li>CSAPP</li></ul><h2 id="我的计算机学习之路"><a href="#我的计算机学习之路" class="headerlink" title="我的计算机学习之路"></a>我的计算机学习之路</h2><p>　　要说我真正的计算机学习之路，是我的导师领我进门的。是从学Python代码开始的，虽然大一下开的C，当时也只是记住了一些计算机常识，并没有过多的去重视，后来时间到了大二，一天我的导师找到我，问了我有没有兴趣搞代码。在这里顺便啰嗦一下，给我的学弟学妹们吧。<br>　　信管专业，是个交叉学科，学的东西多且复杂，简单的来说是计算机学科知识也管理科学相交叉的产物。在这个大环境下，如果没有明确的目标，那么四年后你将一事无成。所以，在大一下，对自己的专业有了一定的认识之后，就应该明确自己以后的学习方向，是搞代码还是搞管理，还是搞测试，还是搞其他的，最晚最晚大二上也要定好方向了。这里我假设你选择的是技术路线，无论你是搞运维还是搞开发还是搞测试，总之都得与代码打交道。所有你就要在平时学习中多动手，多动脑。但是问题来了，我的专业是分在管院，顾名思义，侧重的是管理科学，所以如果想做技术的话，要下狠功夫，狠补计算机相关知识。其实我觉得可以先学着一两门编程语言，在学习的过程中，你会发现自己专业知识的缺乏，有的时候一些问题会感觉无从下手，这个时候，你已经有了一定的编程基础(注意<strong>编程能力</strong>和<strong>项目能力</strong>的区别)，带着问题和目的的取学习一样东西往往是最高效的。<br>　　我还是很菜，虽然有一些Linux开发经验，但是对于Linux系统底层的机制还是不懂，是完全不懂啊。先前试着看了Linux内核源码，无奈看不懂。。也是，没有计算机系统基础知识，怎么能读它。所以说，要学好计算机，就必须先要把入门课补回来。出来混总是要还的～～  </p><p>ps:  </p><ul><li><strong><em>编程能力</em></strong><br>侧重动脑能力，指的是完成小程序、算法相关的能力，pta,leetcode…</li><li><strong><em>项目能力</em></strong><br>侧重动手能力，要求能够合理使用现有资源(API、框架…)开发出一个完整的项目，例如：管理系统，坦克大战…</li></ul><h2 id="学习之路"><a href="#学习之路" class="headerlink" title="学习之路"></a>学习之路</h2><p>先看着南大的MOOC学习，它是根据CSAPP改编而来，我看了一下感觉挺好，容易理解。<br>未完待续…</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>web--浅谈jsp与servlet</title>
      <link>http://www.qianjipeng.top/web-%E6%B5%85%E8%B0%88jsp%E4%B8%8Eservlet.html</link>
      <guid>http://www.qianjipeng.top/web-%E6%B5%85%E8%B0%88jsp%E4%B8%8Eservlet.html</guid>
      <pubDate>Fri, 23 Aug 2019 01:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;JSP和servlet&quot;&gt;&lt;a href=&quot;#JSP和servlet&quot; class=&quot;headerlink&quot; title=&quot;JSP和servlet&quot;&gt;&lt;/a&gt;JSP和servlet&lt;/h1&gt;&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;head
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="JSP和servlet"><a href="#JSP和servlet" class="headerlink" title="JSP和servlet"></a>JSP和servlet</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>jsp的本质就是servlet，jsp经过编译后会转化成servlet<br>因为jvm只能识别java类，不能识别其他的类文件，所以就有了一系列的web容器(服务器)，如tomcat，这些容器将jsp编译成jvm能够识别的java类</li><li>一般来说，jsp用于<strong>页面展示</strong>，servlet用于<strong>逻辑控制</strong><br>比如说要实现一个用户登录模块，我们会把页面显示交给jsp，内部逻辑控制交给servlet</li><li>servlet没有内置对象，jsp有一些内置对象</li></ul><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><ul><li>servlet是严格意义上的java类，它在<em>MVC</em>模型中是<strong>控制层</strong>，它与<strong>表现层</strong>完全分离</li><li>jsp可以是html标签，可以嵌入java代码，它是<strong>表现层</strong>，侧重于视图</li></ul><h2 id="做好理解"><a href="#做好理解" class="headerlink" title="做好理解"></a>做好理解</h2><ul><li>不同之处<br>servlet通过java代码httpServletResponse对象向客户端动态输出html内容，就是说，如果我要在servlet中向客户端输出或者展示一些东西，必须要以html标签的形式</li><li>各自特点<br>servlet可以很好的组织<strong>业务逻辑</strong>，但是通过以字符串的形式向客户端传送html标签使得代码维护起来比较困难。<br>但是一概的在jsp里面混入大量的业务逻辑也是不可取的。</li><li>如何均衡<br>那么如何做到二者的优势互补？答案当然是<a href="https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230" target="_blank" rel="noopener">MVC</a>，MVC是一种软件架构，分为:  <ul><li>模型层(Model)—业务逻辑</li><li>视图层(View)—负责页面显示</li><li>控制层(Controler)—负责相关交互操作</li></ul></li></ul><h2 id="示例demo"><a href="#示例demo" class="headerlink" title="示例demo"></a>示例demo</h2><p>这个小demo主要实现了html表单的用户登录操作，然后记录用户的提交信息，返回给客户端。</p><p><strong>1. loginServlet.java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/login"</span>, name = <span class="string">"login"</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里是 servlet负责页面显示， 也可以是SERVLET负责数据处理, jsp 负责页面显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post 提交浏览器不会显示，比较安全</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置页面编码格式</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这样写是没有效果的，servlet向浏览器输出内容，浏览器只能解析html,所以要用html标签向页面传送信息</span></span><br><span class="line">        <span class="comment">//response.getWriter().println(user);</span></span><br><span class="line">        <span class="comment">//response.getWriter().print("这是登录界面");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// response.getWriter() 获得一个输出流</span></span><br><span class="line">        String string = <span class="string">"&lt;html&gt; &lt;head&gt; &lt;title&gt;这是servlet返回的结果&lt;/title&gt;&lt;/head&gt; &lt;body&gt; 欢迎 "</span> + user + <span class="string">"&lt;/body&gt; &lt;/html&gt;"</span>;</span><br><span class="line">        response.getWriter().print(string);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. login.jsp</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>servlet测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tb</span>&gt;</span></span><br><span class="line">            uesr:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tb</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tb</span>&gt;</span></span><br><span class="line">            passwd:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>可以知道，我输入的<code>user</code>是“servler测试”，点击登录按钮后，返回给客户端的就是用户提交的<code>user</code>值，”servlet测试“。</p><ul><li>页面提交<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566523985/hexo/33_k8dao7.png" alt="页面提交"></li><li>信息返回<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566523985/hexo/44_rw8cgj.png" alt></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/web-%E6%B5%85%E8%B0%88jsp%E4%B8%8Eservlet.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
