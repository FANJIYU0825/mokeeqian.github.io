<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之进制转换</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sat, 17 Aug 2019 13:08:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:&lt;br&gt; 栈是一种数据结构，一种特殊的线性表&lt;/li&gt;
&lt;li&gt;特点:&lt;ul&gt;
&lt;li&gt;只允许在一端进行插
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ul><li>定义:<br> 栈是一种数据结构，一种特殊的线性表</li><li>特点:<ul><li>只允许在一端进行插入操作，另一端进行删除操作</li><li>元素满足先进后出原则，即先入栈的元素最后出栈</li></ul></li></ul><h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><p>算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可<br>上代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack, *pseqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">pseqstack <span class="title">init_stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pseqstack s = (pseqstack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(seqstack));</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        s -&gt; top = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top &gt; maxsize <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"入栈失败!\n"</span>);</span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s -&gt; top ++;        <span class="comment">/*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!)　*/</span></span><br><span class="line">        s -&gt; data[s -&gt; top] = e;</span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *x = s -&gt; data[s -&gt; top];</span><br><span class="line">        s -&gt; top --;</span><br><span class="line">        <span class="keyword">return</span> *x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*　输出栈的每一个元素　*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_each</span><span class="params">(pseqstack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top0 = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(top0 != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s-&gt;data[top0]);</span><br><span class="line">        top0 --;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进制转换，x是十进制de 数，y 是待转换进制*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(pseqstack s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">/* 　整除后不等于０，　执行循环 */</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        push_stack(s, (x%y));</span><br><span class="line">        x = x / y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", s-&gt;top);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*　加上输出功能　*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(s-&gt; top != <span class="number">-1</span>)&#123;</span><br><span class="line">        pop_stack(s, &amp;res);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">// 十进制数</span></span><br><span class="line">    <span class="keyword">int</span> scale;      <span class="comment">// 要转换的进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数字，进制数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;scale);</span><br><span class="line"></span><br><span class="line">    pseqstack S = init_stack();</span><br><span class="line">    transfer(S, num, scale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//print_each(S);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之约瑟夫问题的求解</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</guid>
      <pubDate>Sat, 17 Aug 2019 13:00:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a></p><h1 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h1><ul><li>顺序表</li><li>循环链表(不带头节点)<br>值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘</li></ul><ol><li>顺序表</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">约瑟夫问题的顺序表实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">date: 2019-3-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList, *PSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">PSeqList <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PSeqList L;</span><br><span class="line">    L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (L)&#123;</span><br><span class="line">        L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;       <span class="comment">/*　返回顺序表指针　*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span> || L-&gt;length &gt;= maxsize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">for</span> (j=L-&gt;length; j&gt;=i; j--)&#123;</span><br><span class="line">            L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];          <span class="comment">/*　依次往后移动　*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除位置不合法\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">// 保存将被删除的元素</span></span><br><span class="line">tmp = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i ; j &lt;= L-&gt;length; j++ )&#123;<span class="comment">// 从第I 个开始往前移动一位</span></span><br><span class="line">L-&gt;data[j<span class="number">-1</span>] = L-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length --;</span><br><span class="line"><span class="comment">//printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数 s 开始， 数到  m </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yusefu_SeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s1;</span><br><span class="line">    <span class="keyword">int</span> w;      <span class="comment">// 保存删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>( L-&gt; length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s1 = s <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次出去</span></span><br><span class="line">    <span class="keyword">for</span> (i = L-&gt;length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 关键步骤　*/</span></span><br><span class="line">        s1 = (s1+m<span class="number">-1</span>) % i;</span><br><span class="line">        w = L -&gt; data[s1];      <span class="comment">// 下标 s1, 是第s1+1 个元素！！！</span></span><br><span class="line">        DelSeqList(L, s1+<span class="number">1</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出列: %d\n"</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">// 序列长度</span></span><br><span class="line">    <span class="keyword">int</span> num[maxsize];       <span class="comment">// 用来存输入的数</span></span><br><span class="line">    PSeqList L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入序列元素个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入约瑟夫序列(空格分开): "</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[l]);</span><br><span class="line">        InSeqList(L, l+<span class="number">1</span>, num[l]);</span><br><span class="line">        <span class="comment">//printf(" %d ", num[l]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yusefu_SeqList(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.循环链表</p><p>这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:<br>1.　先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空<br>2.　接着用个循环，创建剩下的单个节点，同样只有数据域<br>3.　再把这些节点连接起来</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  约瑟夫问题的循环链表实现</span></span><br><span class="line"><span class="comment">* author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">* date: 2019-3-24</span></span><br><span class="line"><span class="comment">* version: 2.0(1.0 aborted for too complexed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* node definition　*/</span></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;linklist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　</span></span><br><span class="line"><span class="comment">\brief: crate the linklist and do insert, return the first node's ptr　</span></span><br><span class="line"><span class="comment">\param: n -&gt;&gt; the size of the serises</span></span><br><span class="line"><span class="comment">\return: the first node's ptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creat the node in range(1, n)*/</span></span><br><span class="line">linklist * initLink(int n)&#123;</span><br><span class="line">    linklist * head = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the first node initionalized (not head node)*/</span></span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span><span class="keyword">data</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span>next = NULL;        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a ptr to move through the list */</span></span><br><span class="line">    linklist * tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we satrt with the second node for a loop */</span></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        linklist * body = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* creat and init single node */</span></span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> <span class="keyword">data</span> = i;</span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> next = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* connect the single nodes together */</span></span><br><span class="line">        <span class="function"><span class="title">tmp</span> -&gt;</span> next = body;</span><br><span class="line">        <span class="function"><span class="title">tmp</span> = tmp -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", tmp-&gt;data);</span></span><br><span class="line">    <span class="comment">/* now tmp is just the last node */</span></span><br><span class="line">    <span class="function"><span class="title">tmp</span> -&gt;</span> next = head;     <span class="comment">/*connect the head and the rear */</span></span><br><span class="line">    return head;</span><br><span class="line">    <span class="comment">/* by this method, we created a loop linklist */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void yusefu(linklist * head,int k,int m)&#123;</span><br><span class="line">    linklist * tail = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (tail -&gt;</span> next != head) &#123;</span><br><span class="line">        <span class="function"><span class="title">tail</span> = tail -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linklist * p = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到编号为k的人(或者是第几个开始，可以改)</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> <span class="keyword">data</span> != k) &#123;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> next != p) &#123;</span><br><span class="line">        <span class="comment">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            tail = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p -&gt;</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">tail</span>-&gt;</span><span class="function"><span class="title">next</span>=p-&gt;</span>next;<span class="comment">//从链表上将p结点去除</span></span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d \t",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        free(p);</span><br><span class="line">        <span class="function"><span class="title">p</span> = tail -&gt;</span> next;<span class="comment">//继续使用p指针指向出列编号的下一个编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the last one */</span></span><br><span class="line">    <span class="function"><span class="title">printf</span>("%d \n",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    linklist * head=initLink(<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">    yusefu(head, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之逆波兰式</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</guid>
      <pubDate>Sat, 17 Aug 2019 12:40:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;学的数据结构，感觉掌握的不牢固，于是实现了一个demo&lt;/p&gt;
&lt;h1 id=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;a href=&quot;#中缀表达式转换为后缀表达式并求值&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;/a&gt;中缀表
        
      
      </description>
      
      <content:encoded><![CDATA[<p>学的数据结构，感觉掌握的不牢固，于是实现了一个demo</p><h1 id="中缀表达式转换为后缀表达式并求值"><a href="#中缀表达式转换为后缀表达式并求值" class="headerlink" title="中缀表达式转换为后缀表达式并求值"></a>中缀表达式转换为后缀表达式并求值</h1><ol><li>算法思想:<br>创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，<br>遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，<br>直到表达式末尾, 最后一个入栈的就是最终结果</li><li>先实现求值这一步吧，已知后缀表达式 </li><li>转换这一环节待更新…</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[maxsize];</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">// top 指明当前栈顶元素的位置</span></span><br><span class="line">&#125; SeqStack, *PSeqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序栈</span></span><br><span class="line"><span class="function">PSeqStack <span class="title">Init_SeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">PSeqStack S;</span><br><span class="line">S = (PSeqStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line"><span class="comment">//printf("%p\n", S);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S)</span><br><span class="line">S -&gt; top = <span class="number">-1</span>;<span class="comment">// top 设为-1 (认为设定),表示空</span></span><br><span class="line"><span class="keyword">return</span> S;<span class="comment">// 返回指向顺序栈的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(PSeqStack S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 没有元素，空栈</span></span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 1 表示为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_SeqStack</span><span class="params">(PSeqStack S, datatype x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈满不能再入栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 返回 0 表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">S -&gt; top ++;</span><br><span class="line">S -&gt; data[S -&gt; top] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈,保存栈顶元素于*x中，并删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能出栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 0 表示出栈失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line">S -&gt; top --;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能取top元素\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，参数为待销毁顺序栈的指针地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory_SeqStack</span><span class="params">(PSeqStack *S)</span></span>&#123;</span><br><span class="line"><span class="comment">// *S 二级指针</span></span><br><span class="line"><span class="keyword">if</span> (*S)</span><br><span class="line"><span class="built_in">free</span> (*S);</span><br><span class="line"></span><br><span class="line">*S = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　判断是否是操作数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsNum</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> *A)</span></span>&#123;</span><br><span class="line">PSeqStack s = Init_SeqStack();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> a, b, c;    <span class="comment">// a,b 上一次，上上一次入栈的元素，Ｃ是临时变量</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">ch = *A ++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们人为设置，在字符数组末尾加一个'#', 作为结束符　*/</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (IsNum(ch))&#123;</span><br><span class="line">Push_SeqStack(s, ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这里注意，　先进后出　*/</span></span><br><span class="line">Pop_SeqStack(s, &amp;b);</span><br><span class="line">Pop_SeqStack(s, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        c = a+b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        c = a-b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        c = a*b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        c = a/b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时结果入栈　*/</span></span><br><span class="line">Push_SeqStack(s, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch = *A ++;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetTop_SeqStack(s, &amp;result);</span><br><span class="line">Destory_SeqStack(&amp;s);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"计算结果: %d\n"</span>,calculate(num));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有<em>std::sort()</em>函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…<br>我学数据结构最大的收获就是：</p><ul><li>学会用计算机的思维去思考问题</li><li>学会如何调试程序</li><li>学会耐心做一件事<a href>课程设计</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux系统下文件乱码问题解决</title>
      <link>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</guid>
      <pubDate>Sat, 17 Aug 2019 12:28:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是用到了Linux的 &lt;a href=&quot;https://baike.baidu.com/ite
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。</p><ul><li>主要是用到了Linux的 <a href="https://baike.baidu.com/item/iconv/524310" target="_blank" rel="noopener">iconv</a> 命令</li></ul><h2 id="Step-one-获取当前文件编码"><a href="#Step-one-获取当前文件编码" class="headerlink" title="Step one　获取当前文件编码"></a>Step one　获取当前文件编码</h2><p>我当前文件是 <em>Student.cpp</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file Student.cpp</span><br></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.cpp: C <span class="built_in">source</span>, UTF-8 Unicode text</span><br></pre></td></tr></table></figure><p>是个万国码</p><h2 id="Step-Two-获取本机编码"><a href="#Step-Two-获取本机编码" class="headerlink" title="Step Two 获取本机编码"></a>Step Two 获取本机编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure><p>不知道为什么我这里报错，没有这个文件???<br>不过Linux一般都是UTF-8</p><h2 id="Step-Three-修改文件编码"><a href="#Step-Three-修改文件编码" class="headerlink" title="Step Three 修改文件编码"></a>Step Three 修改文件编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f GBK -t UTF-8  Student.cpp -o  Student0.cpp</span><br></pre></td></tr></table></figure><p>这里<em>Student.cpp</em>是原来的文件，<em>Student0.cpp</em>是我修改后的文件。</p><p>改后打开文件就没有乱码问题了</p><h3 id="这里有个问题，如果有多个文件不能在一起转化"><a href="#这里有个问题，如果有多个文件不能在一起转化" class="headerlink" title="这里有个问题，如果有多个文件不能在一起转化"></a>这里有个问题，如果有多个文件不能在一起转化</h3><p>比如我有两个文件，<em>Student.cpp</em> 和 <em>Student.h</em> 必须要执行两次命令，尴尬。<br>后来想起来可以用通配符，文件名不改变，即可</p><ul><li>注意： 通配符要慎用!</li><li>最后的最后: 写了个小项目，放在了仓库中<a href="https://github.com/mokeeqian/demo-projects/tree/master/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">编码转换</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>和小薇薇的700天</title>
      <link>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</link>
      <guid>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</guid>
      <pubDate>Fri, 16 Aug 2019 13:47:53 GMT</pubDate>
      <description>
      
        Encrypted passage, enter password to read.
      
      </description>
      
      <content:encoded><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Encrypted passage, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
