<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Fri, 23 Aug 2019 00:57:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>java web servlet学习</title>
      <link>http://www.qianjipeng.top/2019/08/22/servlet%E5%AD%A6%E4%B9%A0/</link>
      <guid>http://www.qianjipeng.top/2019/08/22/servlet%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Thu, 22 Aug 2019 14:44:37 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;接上篇，学习servlet基础。&lt;/p&gt;
&lt;h2 id=&quot;servlet是什么&quot;&gt;&lt;a href=&quot;#servlet是什么&quot; class=&quot;headerlink&quot; title=&quot;servlet是什么&quot;&gt;&lt;/a&gt;servlet是什么&lt;/h2&gt;&lt;p&gt;java servlet是运
        
      
      </description>
      
      <content:encoded><![CDATA[<p>接上篇，学习servlet基础。</p><h2 id="servlet是什么"><a href="#servlet是什么" class="headerlink" title="servlet是什么"></a>servlet是什么</h2><p>java servlet是运行在web服务器上的应用程序，实现动态页面的创建，作为来自web浏览器和其他http客户端请求和http服务器上的数据库或者应用程序之间的<strong>中间层</strong>。<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566486478/hexo/874710-20170214192940050-671180063_dpxpnk.png" alt="http请求和响应"><br>　　　　　　　　　　　　　　　　　　　　http请求和响应过程</p><h2 id="servlet架构"><a href="#servlet架构" class="headerlink" title="servlet架构"></a>servlet架构</h2><ul><li>架构<br><img src="https://www.runoob.com/wp-content/uploads/2014/07/servlet-arch.jpg" alt="架构"></li><li>tomcat与servlet<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566486469/hexo/874710-20170214204632894-1786729693_hjhji5.png" alt="tomcat">  <ul><li>这里可以知道，tomcat将浏览器发过来的http请求(http request)文本接收并解析，封装成httpServlet类型的request对象</li><li>tomcat服务器同时将要响应的信息封装成httpResponse类型的response对象，通过设置response的相关属性就可以控制输出到浏览器的内容，再将response交给tomcat，tomcat就会将其转换成要响应的文本格式返回给浏览器</li></ul></li></ul><h2 id="servlet任务"><a href="#servlet任务" class="headerlink" title="servlet任务"></a>servlet任务</h2><ul><li>读取客户端发送的显式数据，包括html表单，或者是applet或者用户定义程序的表单</li><li>读取客户端发送的隐式http请求，包括cookies等</li><li>处理数据并获得结果，可能会访问数据库调用web服务</li><li>发送显式的数据到客户端，可能是文档、图片等</li><li>发送隐式的http响应到客户端  </li></ul><h2 id="java-servlet包"><a href="#java-servlet包" class="headerlink" title="java servlet包"></a>java servlet包</h2><p>java servlet是运行在带有servlet解释器的web服务器(我用的是tomcat)上的java类。<br>通常需要<code>import javax.servlet.*</code>来导入包。<br>java servlet API 是servlet容器(tomcat为例)和servlet之间的接口，定义了各种servlet方法，和一些对象，其中主要是servletRequest和servletResponse对象比较重要。  </p><h2 id="编写servlet"><a href="#编写servlet" class="headerlink" title="编写servlet"></a>编写servlet</h2><p>编写servlet有两种方法：</p><ul><li>直接编写servlet类，实现相应的方法<br>这个方法需要编写完整的java类，比较复杂，而且容易出错。故我们采用第二种方法。</li><li>用IDE(我的是idea)新建myServlet<br>新建myServlet，默认会实现doGet()和doPost()方法，也可以根据自己的需要，实现其他方法，诸如：init()、service()、destory()  </li></ul><p>另外，要实现与jsp的交互，必须要配置<strong>web.xml</strong>文件，写入servlet、servlet-mapping等标签，除此之外，<strong>也可以在servlet类的添加注释(annoation)</strong>，例如：　<code>@WebServlet(urlPatterns = &quot;/signin&quot;, name = &quot;signin&quot;)</code>，这样就可以不用配置<strong>web.xml</strong>文件</p><h2 id="详解servlet原理"><a href="#详解servlet原理" class="headerlink" title="详解servlet原理"></a>详解servlet原理</h2><p><strong>1. servlet生命周期</strong>  </p><ul><li>servlet的生命周期始于servlet服务器启动时或者第一次请求该servlet，此时调用init()方法，初始化出一个servlet对象</li><li>servlet处理所有的客户端请求，执行service()方法</li><li>服务器关闭，执行destory()方法，servlet被销毁</li></ul><p><strong>2. servlet的service()方法</strong><br>这里有个问题，我们在编写servlet时，只写了doPost()和doGet()方法，并没有写service()方法，那么servlet是如何执行service()方法的呢？<br>public的service()方法，这是对外的公有方法，这里做了一个ServletRequest到httpServletRequest的转型<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566520802/hexo/11_bb7cxt.png" alt></p><p>内部的protected的方法，根据请求的方法<strong>method</strong>不同，调用不同的响应方式：<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566521046/hexo/22_jborni.png" alt></p><p>也就是说，service()方法一般情况下我们是不需要重写的，它已经包括的所有的推理机，我们只要重写相应需要的方法就行了，比如说doPost()、doGet()，这也是idea默认给我们重写的两个方法。<br><strong>3. servlet重要的对象</strong><br>servlet为我们创建了几个内置对象：</p><ul><li>servletCopnfig</li><li>servletContext</li><li>httpServletRequest</li><li>httpServletResponse</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/22/servlet%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C++对象模型--关于对象</title>
      <link>http://www.qianjipeng.top/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</link>
      <guid>http://www.qianjipeng.top/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</guid>
      <pubDate>Thu, 22 Aug 2019 01:39:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;为什么要写C++一栏的博客呢?其实是为了加深理解和敦促学习，我发现只要离开写博客，人就变得懒散起来，每天写的代码零零散散，C
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>为什么要写C++一栏的博客呢?其实是为了加深理解和敦促学习，我发现只要离开写博客，人就变得懒散起来，每天写的代码零零散散，C++这门课程是在大二上开的，上课也就水水过去了，老师上课其实也还挺好，无奈听不懂啊，听不懂就不想听啊。现在想想挺后悔的。<br><br>后来由于实验室需要，而且自己也意识到C++的重要性，于是便自学。(貌似我所有的编程语言都是自学的、除了大一的C)至于自学，我的做法是，找博客，一个一个知识点地去学，后来也勉强算是入门了把。<br>好记性不如烂笔头，于是还是记录下来比较好。</p><h3 id="关于入门"><a href="#关于入门" class="headerlink" title="关于入门"></a>关于入门</h3><p>入门书籍的选取太重要了。谁要是和你推荐诸如<em>21天学通C++</em>、<em>Visual C++ xxx</em>的，可以绝交了(滑稽)，我推荐<em>C++ primer</em>而不是<em>C++ primer plus</em>，不是带了个<em>plus</em>就是更牛x一点，相反，<em>plus</em>对于新入门的来说，讲的太过细致，有点晦涩，以至于你想放弃。搞清楚C++的大致框架后，可以读一读<em>C++沉思录</em>，这本书介绍的是一些C++思想，有助于你更好的理解。后期实战可以读一读<br><em>Effecitve C++</em>、<em>More Effective C++</em>，如果想深入了解C++底层机制的话，那么<em>深度探索C++对象模型</em>一定值得细细评味。   </p><h1 id="关于C-对象"><a href="#关于C-对象" class="headerlink" title="关于C++对象"></a>关于C++对象</h1><ol><li><p><strong>C++对象模式</strong><br>在C++中，有两种类数据成员：静态数据成员(static关键词修饰)和非静态数据成员(没有static关键词修饰)，三种类成员函数：static、non-static、virtual。<br>以下程序为例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    Point(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y);</span><br><span class="line">    <span class="keyword">virtual</span> ~Point();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">X</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point point;</span><br></pre></td></tr></table></figure></li></ol><p>我创建了一个Point的对象，那么这个对象point的data member和funtion member是怎么布局呢?</p><ul><li><strong>简单对象模型</strong><br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482922/hexo/IMG_20190822_215545_xqr4z3.jpg" alt="简单对象模型"><br>这个模型是简单的一个模型，每个对象抽象成一些列的slots，每个slot对应一个成员，这样一来实现了member的对号入座。这样简化了编译器的设计复杂度，但是牺牲了效率和空间。<br>在这个模型下，<strong>members本身不在object中，而是指向members的指针存放在object中</strong>，避免了*”members有不同的数据类型，因而需要不同的储存空间”<em>。<br>如此，object中的member便是通过slots的索引值来索引的。<br>但是这个模型并**</em>没有***被C++所采用，不过这个观念被应用到了指向成员的指针(pointer-to-member)这一概念之中。</li><li><strong>表格驱动摸模型</strong><br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482837/hexo/0822_3_muhhsi.jpg" alt="表格驱动模型"><br>这个模型是把members划分为两类，datas放在data member table中，functions放在member function table中，object本身含有指向这两个表格的指针。data member table直接指向data本身，function member table是一系列的slots，每个slots指出一个member function。<br>很遗憾，这个模型也<strong><em>没有</em></strong>被采用。但是member funciton table这一观念却支持了virtual function的机制。</li><li><strong>C++对象模型</strong><br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482844/hexo/0822_2_jibhqp.jpg" alt="C++对象模型"><br>这是Stroustrup设计C++时采用的模型。在这个模型之下，所有的non-static members都被置于每一个class object之中，static data members则被存放在这个class中(原书说法是<del>存放在个别的class object之外</del>)，static和non-static function members也被存放在个别的class object之外。而virtual functions分两步处理:<ul><li>每一个class都会产生一系列指向virtual functions的指针，这些指针存放在一个叫<strong><em>virtual table</em></strong>(vtbl)的表格之中</li><li>每一个class object都会被”安排”一个指向这个class的<strong><em>vtbl</em></strong>的指针(<strong><em>vptr</em></strong>)，vptr的设置和重置由类的构造函数、拷贝构造函数、析构函数完成。(这里先不讨论)<br>每个class还会关联一个<strong><em>type info object</em></strong>,由vtbl指出来，通常放在vtbl的第一个slots的位置(<img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482845/hexo/0822_1_fniz8u.jpg" alt="虚函数的实现机制">)。</li></ul></li></ul><ol start="2"><li><p><strong>关键词的差异</strong>(class和struct)<br>struct即结构，class即我们所说的类。C++为了兼容C，仍然保留了C的struct关键字，作为一种数据类型。</p><ul><li><p><strong>区别(简单理解)</strong></p><ul><li><p>struct默认访问限制和继承方式是<strong>public</strong>，并且C++中struct类型中也可以拥有构造函数<br>这点我在代码中有遇到过，一般用到struct的是一些比较操作，用于<strong>STL</strong>容器的<em>sort()</em>函数。如下示例程序:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> lhs, <span class="keyword">int</span> rhs)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lhs &gt; rhs;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>class默认访问限制是<strong>private</strong></p></li></ul></li><li><p><strong>何时该用struct</strong><br>我觉得都可以，在C++中可以将两者等同，如果你愿意使用struct的话。</p></li></ul></li><li><p><strong>对象的差异</strong><br>C++程序设计模型直接支持以下三种程序设计范式： </p><ul><li><strong>程序模型(procedural model)</strong></li><li><strong>抽象数据类型模式(abstract data type model)</strong>  </li><li><strong>面向对象模型(object-oriented model)</strong>　</li></ul></li><li><p><strong>杂谈</strong></p><ul><li>关于指针<br>　　<strong><em>一个指针或引用，无论其指向哪种数据类型，其本身所占内存大小是固定的。</em></strong><br>指针的类型，“指向不同的类型的指针”之间的差异，不在于指针的表示方法不同，也不在于指针的内容(地址)的不同，<strong><em>而是在于由这个指针所寻址出来的object类型的不同</em></strong>。也就是说，指针类型会让编译器以相应的方式去解释特定地址中的内容及大小。<br>　　一个指向地址100０的int类型的指针，在32位机器上，其所占的地址空间为1000~1003，因为32位机器上int类型所占４个字节(byte)。<br>　　那么一个指向地址1000的<strong>void*</strong>类型的指针呢？我们不知道，这也是为什么一个void*的类型的指针只能持有一个地址，不能操作其所指的对象的原因。<br>　　这里可以学习一下C++的四种<strong>cast</strong>。其本质是，<strong>只影响被指出的内存的大小和内容，不改变指针所指向的真正地址。</strong><br>　　日后再补充。</li></ul></li></ol><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>C++真是一门<strong>magic</strong>的语言，究其本质，晦涩而又有点魅力，加油吧。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo配置gitalk评论插件</title>
      <link>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
      <pubDate>Tue, 20 Aug 2019 13:13:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;之前用的一直是来比力，不知为何加载很慢，而且社区版没有邮件登录的选项，比较不方便，于是乎，改成了gitalk，基于github issue的评论插件。&lt;br&gt;原理是，创建一个用来存放comment的repo，将所有的comment都放在特定的issue下。&lt;/p&gt;
&lt;h1 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>之前用的一直是来比力，不知为何加载很慢，而且社区版没有邮件登录的选项，比较不方便，于是乎，改成了gitalk，基于github issue的评论插件。<br>原理是，创建一个用来存放comment的repo，将所有的comment都放在特定的issue下。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">官方repo</a></p><h1 id="创建OAuth-application"><a href="#创建OAuth-application" class="headerlink" title="创建OAuth application"></a>创建OAuth application</h1><p>创建一个github OAuth application，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里</a>，点进去如下：<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566481819/hexo/1_px6klt.png" alt="图片1"></p><ul><li>Application name: 随便写</li><li>Homepage url: 写你的博客主页url</li><li>Application description: 应用的描述</li><li>Authorization callback url: 回调url，写你的博客url <del>如果你有自己的custom domain，写自己的域名</del></li></ul><h1 id="创建一个github-repo"><a href="#创建一个github-repo" class="headerlink" title="创建一个github repo"></a>创建一个github repo</h1><p>这个很简单，一个空的public的repo就行，先创在这。<br><del>私有仓库不知道行不行，貌似更加隐私</del></p><h1 id="配置hexo配置文件"><a href="#配置hexo配置文件" class="headerlink" title="配置hexo配置文件"></a>配置hexo配置文件</h1><p><em>以next主题为例，其他主题可能有所差别</em></p><ol><li><p>新建<em>gittalk.swig</em>文件</p><ul><li>路径: <strong>themes/next/layout/_third-party/comments/</strong></li><li>文件内容:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">   <span class="comment">&lt;!-- gitalk 评论系统 2019.8.19 --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">const gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="xml">  clientID: '</span><span class="template-variable">&#123;&#123;theme.gitalk.clientID&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  clientSecret: '</span><span class="template-variable">&#123;&#123;theme.gitalk.clientSecret&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  repo: '</span><span class="template-variable">&#123;&#123;theme.gitalk.repo&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  owner: '</span><span class="template-variable">&#123;&#123;theme.gitalk.githubID&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  admin: ['</span><span class="template-variable">&#123;&#123;theme.gitalk.adminUser&#125;&#125;</span><span class="xml">'],// 注意使用列表</span></span><br><span class="line"><span class="xml">  id: location.pathname, // 依据官方readme,这里可能会有bug, post lable长度超过50会有报错</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改<em>index.swig</em>文件</p><ul><li>路径: <strong>themes/next/layout/_third-party/comments/</strong></li><li>修改内容:<br>在文件最后一行追加下列语句:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'gitalk.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>修改<em>comment.swig</em>文件</p><ul><li>路径: <strong>/themes/next/layout/_partials/</strong></li><li>修改内容:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.valine.appid and theme.valine.appkey %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>// 在这一行的下一行开始加</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.gitalk.enable %&#125;</span><span class="xml">// 加入以下三行</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>修改主题配置文件<em>_config.yml</em></p><ol><li>文件路径: <strong>/themes/</strong></li><li>修改内容:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  githubID:</span> <span class="string">github用户名</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">用来存放comment的repo</span></span><br><span class="line"><span class="attr">  clientID:</span> <span class="string">你的clientID</span></span><br><span class="line"><span class="attr">  clientSecret:</span> <span class="string">你的clientSecret</span></span><br><span class="line"><span class="attr">  adminUser:</span> <span class="string">admin用户，只有admin才可以init</span> <span class="string">issue</span></span><br><span class="line"><span class="attr">  perPage:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">  pagerDirection:</span> <span class="string">last</span></span><br><span class="line"><span class="attr">  createIssueManually:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  distractionFreeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566481823/hexo/2_oppyfh.png" alt="图片2"></p><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><ul><li><em>comment.swig</em>文件配置错误，注意所加代码的位置</li><li><em>OAuth application</em>创建有错误，按以上做法即可</li><li>粗心、大小写、配置文件写错</li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>不知道为什么在hexo中markdown会解析奇怪的东西，比如说我写了`&lt;!–￼4–&gt;`这个东西，在<code>hexo g</code>的过程中，会报错，很奇怪的错误。<br>后来把这个post删除了，再生成就没有问题了，所以说，可以确定这个问题是出在我刚刚写的<code>.md</code>文件内容导致的。</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ul><li>删除所有代码块，错误消失，还原所有内容</li><li>删除`&lt;!–￼5–&gt;`这个内容，错误消失<br>至此，可以知道，问题就出在`&lt;!–￼6–&gt;`这段内容里，后来改成```包含的代码块就没有问题。<br>所以说，遇到<code>\{\%</code>这样的字符需要转义，否则会被md解析。<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>这里还要深入了解一下md的解析原理</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java web 学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Mon, 19 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &amp;gt; C &amp;gt; JAVA &amp;gt; PHP &amp;gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说：　我是做C++的。<br>可是，我们真的懂C++了吗？<br>这要看我们对<em>懂</em>的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: <em>你永远不知道C++编译器背着你干了哪些事</em>。这句话其实我很认同。<br>例如:</p><ul><li>默认构造函数在什么情况下编译器会为我们提供？<ul><li>答案是：　在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。</li></ul></li><li>C++的虚函数机制是什么样的？<ul><li>就我所了解的，虚函数机制是靠虚函数表<em>VTable</em>和虚函数指针<em>VPtr</em>来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">深度探索C++对象模型</a>)</li></ul></li></ul><p>C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。<br>至于为什么要学习前端知识呢？</p><ul><li>B/S模式向C/S模式转变的趋向<br>  当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现</li><li>增加技术栈<br>  俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。</li><li>放弃C++，转向java?<br>  真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。</li></ul><h1 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h1><p>目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之进制转换</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sat, 17 Aug 2019 13:08:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:&lt;br&gt; 栈是一种数据结构，一种特殊的线性表&lt;/li&gt;
&lt;li&gt;特点:&lt;ul&gt;
&lt;li&gt;只允许在一端进行插
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ul><li>定义:<br> 栈是一种数据结构，一种特殊的线性表</li><li>特点:<ul><li>只允许在一端进行插入操作，另一端进行删除操作</li><li>元素满足先进后出原则，即先入栈的元素最后出栈</li></ul></li></ul><h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><p>算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可<br>上代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack, *pseqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">pseqstack <span class="title">init_stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pseqstack s = (pseqstack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(seqstack));</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        s -&gt; top = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top &gt; maxsize <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"入栈失败!\n"</span>);</span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s -&gt; top ++;        <span class="comment">/*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!)　*/</span></span><br><span class="line">        s -&gt; data[s -&gt; top] = e;</span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *x = s -&gt; data[s -&gt; top];</span><br><span class="line">        s -&gt; top --;</span><br><span class="line">        <span class="keyword">return</span> *x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*　输出栈的每一个元素　*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_each</span><span class="params">(pseqstack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top0 = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(top0 != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s-&gt;data[top0]);</span><br><span class="line">        top0 --;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进制转换，x是十进制de 数，y 是待转换进制*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(pseqstack s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">/* 　整除后不等于０，　执行循环 */</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        push_stack(s, (x%y));</span><br><span class="line">        x = x / y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", s-&gt;top);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*　加上输出功能　*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(s-&gt; top != <span class="number">-1</span>)&#123;</span><br><span class="line">        pop_stack(s, &amp;res);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">// 十进制数</span></span><br><span class="line">    <span class="keyword">int</span> scale;      <span class="comment">// 要转换的进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数字，进制数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;scale);</span><br><span class="line"></span><br><span class="line">    pseqstack S = init_stack();</span><br><span class="line">    transfer(S, num, scale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//print_each(S);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之约瑟夫问题的求解</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</guid>
      <pubDate>Sat, 17 Aug 2019 13:00:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a></p><h1 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h1><ul><li>顺序表</li><li>循环链表(不带头节点)<br>值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘</li></ul><ol><li>顺序表</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">约瑟夫问题的顺序表实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">date: 2019-3-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList, *PSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">PSeqList <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PSeqList L;</span><br><span class="line">    L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (L)&#123;</span><br><span class="line">        L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;       <span class="comment">/*　返回顺序表指针　*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span> || L-&gt;length &gt;= maxsize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">for</span> (j=L-&gt;length; j&gt;=i; j--)&#123;</span><br><span class="line">            L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];          <span class="comment">/*　依次往后移动　*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除位置不合法\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">// 保存将被删除的元素</span></span><br><span class="line">tmp = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i ; j &lt;= L-&gt;length; j++ )&#123;<span class="comment">// 从第I 个开始往前移动一位</span></span><br><span class="line">L-&gt;data[j<span class="number">-1</span>] = L-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length --;</span><br><span class="line"><span class="comment">//printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数 s 开始， 数到  m </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yusefu_SeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s1;</span><br><span class="line">    <span class="keyword">int</span> w;      <span class="comment">// 保存删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>( L-&gt; length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s1 = s <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次出去</span></span><br><span class="line">    <span class="keyword">for</span> (i = L-&gt;length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 关键步骤　*/</span></span><br><span class="line">        s1 = (s1+m<span class="number">-1</span>) % i;</span><br><span class="line">        w = L -&gt; data[s1];      <span class="comment">// 下标 s1, 是第s1+1 个元素！！！</span></span><br><span class="line">        DelSeqList(L, s1+<span class="number">1</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出列: %d\n"</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">// 序列长度</span></span><br><span class="line">    <span class="keyword">int</span> num[maxsize];       <span class="comment">// 用来存输入的数</span></span><br><span class="line">    PSeqList L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入序列元素个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入约瑟夫序列(空格分开): "</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[l]);</span><br><span class="line">        InSeqList(L, l+<span class="number">1</span>, num[l]);</span><br><span class="line">        <span class="comment">//printf(" %d ", num[l]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yusefu_SeqList(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.循环链表</p><p>这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:<br>1.　先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空<br>2.　接着用个循环，创建剩下的单个节点，同样只有数据域<br>3.　再把这些节点连接起来</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  约瑟夫问题的循环链表实现</span></span><br><span class="line"><span class="comment">* author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">* date: 2019-3-24</span></span><br><span class="line"><span class="comment">* version: 2.0(1.0 aborted for too complexed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* node definition　*/</span></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;linklist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　</span></span><br><span class="line"><span class="comment">\brief: crate the linklist and do insert, return the first node's ptr　</span></span><br><span class="line"><span class="comment">\param: n -&gt;&gt; the size of the serises</span></span><br><span class="line"><span class="comment">\return: the first node's ptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creat the node in range(1, n)*/</span></span><br><span class="line">linklist * initLink(int n)&#123;</span><br><span class="line">    linklist * head = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the first node initionalized (not head node)*/</span></span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span><span class="keyword">data</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span>next = NULL;        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a ptr to move through the list */</span></span><br><span class="line">    linklist * tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we satrt with the second node for a loop */</span></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        linklist * body = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* creat and init single node */</span></span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> <span class="keyword">data</span> = i;</span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> next = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* connect the single nodes together */</span></span><br><span class="line">        <span class="function"><span class="title">tmp</span> -&gt;</span> next = body;</span><br><span class="line">        <span class="function"><span class="title">tmp</span> = tmp -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", tmp-&gt;data);</span></span><br><span class="line">    <span class="comment">/* now tmp is just the last node */</span></span><br><span class="line">    <span class="function"><span class="title">tmp</span> -&gt;</span> next = head;     <span class="comment">/*connect the head and the rear */</span></span><br><span class="line">    return head;</span><br><span class="line">    <span class="comment">/* by this method, we created a loop linklist */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void yusefu(linklist * head,int k,int m)&#123;</span><br><span class="line">    linklist * tail = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (tail -&gt;</span> next != head) &#123;</span><br><span class="line">        <span class="function"><span class="title">tail</span> = tail -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linklist * p = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到编号为k的人(或者是第几个开始，可以改)</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> <span class="keyword">data</span> != k) &#123;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> next != p) &#123;</span><br><span class="line">        <span class="comment">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            tail = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p -&gt;</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">tail</span>-&gt;</span><span class="function"><span class="title">next</span>=p-&gt;</span>next;<span class="comment">//从链表上将p结点去除</span></span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d \t",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        free(p);</span><br><span class="line">        <span class="function"><span class="title">p</span> = tail -&gt;</span> next;<span class="comment">//继续使用p指针指向出列编号的下一个编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the last one */</span></span><br><span class="line">    <span class="function"><span class="title">printf</span>("%d \n",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    linklist * head=initLink(<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">    yusefu(head, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之逆波兰式</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</guid>
      <pubDate>Sat, 17 Aug 2019 12:40:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;学的数据结构，感觉掌握的不牢固，于是实现了一个demo&lt;/p&gt;
&lt;h1 id=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;a href=&quot;#中缀表达式转换为后缀表达式并求值&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;/a&gt;中缀表
        
      
      </description>
      
      <content:encoded><![CDATA[<p>学的数据结构，感觉掌握的不牢固，于是实现了一个demo</p><h1 id="中缀表达式转换为后缀表达式并求值"><a href="#中缀表达式转换为后缀表达式并求值" class="headerlink" title="中缀表达式转换为后缀表达式并求值"></a>中缀表达式转换为后缀表达式并求值</h1><ol><li>算法思想:<br>创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，<br>遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，<br>直到表达式末尾, 最后一个入栈的就是最终结果</li><li>先实现求值这一步吧，已知后缀表达式 </li><li>转换这一环节待更新…</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[maxsize];</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">// top 指明当前栈顶元素的位置</span></span><br><span class="line">&#125; SeqStack, *PSeqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序栈</span></span><br><span class="line"><span class="function">PSeqStack <span class="title">Init_SeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">PSeqStack S;</span><br><span class="line">S = (PSeqStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line"><span class="comment">//printf("%p\n", S);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S)</span><br><span class="line">S -&gt; top = <span class="number">-1</span>;<span class="comment">// top 设为-1 (认为设定),表示空</span></span><br><span class="line"><span class="keyword">return</span> S;<span class="comment">// 返回指向顺序栈的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(PSeqStack S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 没有元素，空栈</span></span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 1 表示为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_SeqStack</span><span class="params">(PSeqStack S, datatype x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈满不能再入栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 返回 0 表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">S -&gt; top ++;</span><br><span class="line">S -&gt; data[S -&gt; top] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈,保存栈顶元素于*x中，并删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能出栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 0 表示出栈失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line">S -&gt; top --;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能取top元素\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，参数为待销毁顺序栈的指针地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory_SeqStack</span><span class="params">(PSeqStack *S)</span></span>&#123;</span><br><span class="line"><span class="comment">// *S 二级指针</span></span><br><span class="line"><span class="keyword">if</span> (*S)</span><br><span class="line"><span class="built_in">free</span> (*S);</span><br><span class="line"></span><br><span class="line">*S = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　判断是否是操作数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsNum</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> *A)</span></span>&#123;</span><br><span class="line">PSeqStack s = Init_SeqStack();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> a, b, c;    <span class="comment">// a,b 上一次，上上一次入栈的元素，Ｃ是临时变量</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">ch = *A ++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们人为设置，在字符数组末尾加一个'#', 作为结束符　*/</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (IsNum(ch))&#123;</span><br><span class="line">Push_SeqStack(s, ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这里注意，　先进后出　*/</span></span><br><span class="line">Pop_SeqStack(s, &amp;b);</span><br><span class="line">Pop_SeqStack(s, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        c = a+b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        c = a-b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        c = a*b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        c = a/b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时结果入栈　*/</span></span><br><span class="line">Push_SeqStack(s, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch = *A ++;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetTop_SeqStack(s, &amp;result);</span><br><span class="line">Destory_SeqStack(&amp;s);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"计算结果: %d\n"</span>,calculate(num));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有<em>std::sort()</em>函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…<br>我学数据结构最大的收获就是：</p><ul><li>学会用计算机的思维去思考问题</li><li>学会如何调试程序</li><li>学会耐心做一件事<a href>课程设计</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux系统下文件乱码问题解决</title>
      <link>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</guid>
      <pubDate>Sat, 17 Aug 2019 12:28:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是用到了Linux的 &lt;a href=&quot;https://baike.baidu.com/ite
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。</p><ul><li>主要是用到了Linux的 <a href="https://baike.baidu.com/item/iconv/524310" target="_blank" rel="noopener">iconv</a> 命令</li></ul><h2 id="Step-one-获取当前文件编码"><a href="#Step-one-获取当前文件编码" class="headerlink" title="Step one　获取当前文件编码"></a>Step one　获取当前文件编码</h2><p>我当前文件是 <em>Student.cpp</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file Student.cpp</span><br></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.cpp: C <span class="built_in">source</span>, UTF-8 Unicode text</span><br></pre></td></tr></table></figure><p>是个万国码</p><h2 id="Step-Two-获取本机编码"><a href="#Step-Two-获取本机编码" class="headerlink" title="Step Two 获取本机编码"></a>Step Two 获取本机编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure><p>不知道为什么我这里报错，没有这个文件???<br>不过Linux一般都是UTF-8</p><h2 id="Step-Three-修改文件编码"><a href="#Step-Three-修改文件编码" class="headerlink" title="Step Three 修改文件编码"></a>Step Three 修改文件编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f GBK -t UTF-8  Student.cpp -o  Student0.cpp</span><br></pre></td></tr></table></figure><p>这里<em>Student.cpp</em>是原来的文件，<em>Student0.cpp</em>是我修改后的文件。</p><p>改后打开文件就没有乱码问题了</p><h3 id="这里有个问题，如果有多个文件不能在一起转化"><a href="#这里有个问题，如果有多个文件不能在一起转化" class="headerlink" title="这里有个问题，如果有多个文件不能在一起转化"></a>这里有个问题，如果有多个文件不能在一起转化</h3><p>比如我有两个文件，<em>Student.cpp</em> 和 <em>Student.h</em> 必须要执行两次命令，尴尬。<br>后来想起来可以用通配符，文件名不改变，即可</p><ul><li>注意： 通配符要慎用!</li><li>最后的最后: 写了个小项目，放在了仓库中<a href="https://github.com/mokeeqian/demo-projects/tree/master/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">编码转换</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>和小薇薇的700天</title>
      <link>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</link>
      <guid>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</guid>
      <pubDate>Fri, 16 Aug 2019 13:47:53 GMT</pubDate>
      <description>
      
        Encrypted passage, enter password to read.
      
      </description>
      
      <content:encoded><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Encrypted passage, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
