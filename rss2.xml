<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Wed, 21 Aug 2019 10:42:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>hexo配置gitalk评论插件</title>
      <link>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
      <pubDate>Tue, 20 Aug 2019 13:13:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;之前用的一直是来比力，不知为何加载很慢，而且社区版没有邮件登录的选项，比较不方便，于是乎，改成了gitalk，基于github issue的评论插件。&lt;br&gt;原理是，创建一个用来存放comment的repo，将所有的comment都放在特定的issue下。&lt;/p&gt;
&lt;h1 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>之前用的一直是来比力，不知为何加载很慢，而且社区版没有邮件登录的选项，比较不方便，于是乎，改成了gitalk，基于github issue的评论插件。<br>原理是，创建一个用来存放comment的repo，将所有的comment都放在特定的issue下。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">官方repo</a></p><h1 id="创建OAuth-application"><a href="#创建OAuth-application" class="headerlink" title="创建OAuth application"></a>创建OAuth application</h1><p>创建一个github OAuth application，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里</a>，点进去如下：<br><img src="/2019/08/20/hexo配置gitalk评论插件/hexo配置gitalk评论插件/1.png" alt="图片1"></p><ul><li>Application name: 随便写</li><li>Homepage url: 写你的博客主页url</li><li>Application description: 应用的描述</li><li>Authorization callback url: 回调url，写你的博客url <del>如果你有自己的custom domain，写自己的域名</del></li></ul><h1 id="创建一个github-repo"><a href="#创建一个github-repo" class="headerlink" title="创建一个github repo"></a>创建一个github repo</h1><p>这个很简单，一个空的public的repo就行，先创在这。<br><del>私有仓库不知道行不行，貌似更加隐私</del></p><h1 id="配置hexo配置文件"><a href="#配置hexo配置文件" class="headerlink" title="配置hexo配置文件"></a>配置hexo配置文件</h1><p><em>以next主题为例，其他主题可能有所差别</em></p><ol><li><p>新建<em>gittalk.swig</em>文件</p><ul><li>路径: <strong>themes/next/layout/_third-party/comments/</strong></li><li>文件内容:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">   <span class="comment">&lt;!-- gitalk 评论系统 2019.8.19 --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">const gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="xml">  clientID: '</span><span class="template-variable">&#123;&#123;theme.gitalk.clientID&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  clientSecret: '</span><span class="template-variable">&#123;&#123;theme.gitalk.clientSecret&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  repo: '</span><span class="template-variable">&#123;&#123;theme.gitalk.repo&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  owner: '</span><span class="template-variable">&#123;&#123;theme.gitalk.githubID&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  admin: ['</span><span class="template-variable">&#123;&#123;theme.gitalk.adminUser&#125;&#125;</span><span class="xml">'],// 注意使用列表</span></span><br><span class="line"><span class="xml">  id: location.pathname, // 依据官方readme,这里可能会有bug, post lable长度超过50会有报错</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改<em>index.swig</em>文件</p><ul><li>路径: <strong>themes/next/layout/_third-party/comments/</strong></li><li>修改内容:<br>在文件最后一行追加下列语句:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'gitalk.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>修改<em>comment.swig</em>文件</p><ul><li>路径: <strong>/themes/next/layout/_partials/</strong></li><li>修改内容:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.valine.appid and theme.valine.appkey %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>// 在这一行的下一行开始加</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.gitalk.enable %&#125;</span><span class="xml">// 加入以下三行</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>修改主题配置文件<em>_config.yml</em></p><ol><li>文件路径: <strong>/themes/</strong></li><li>修改内容:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  githubID:</span> <span class="string">github用户名</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">用来存放comment的repo</span></span><br><span class="line"><span class="attr">  clientID:</span> <span class="string">你的clientID</span></span><br><span class="line"><span class="attr">  clientSecret:</span> <span class="string">你的clientSecret</span></span><br><span class="line"><span class="attr">  adminUser:</span> <span class="string">admin用户，只有admin才可以init</span> <span class="string">issue</span></span><br><span class="line"><span class="attr">  perPage:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">  pagerDirection:</span> <span class="string">last</span></span><br><span class="line"><span class="attr">  createIssueManually:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  distractionFreeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p><img src="/2019/08/20/hexo配置gitalk评论插件/hexo配置gitalk评论插件/2.png" alt="图片2"></p><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><ul><li><em>comment.swig</em>文件配置错误，注意所加代码的位置</li><li><em>OAuth application</em>创建有错误，按以上做法即可</li><li>粗心、大小写、配置文件写错</li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>不知道为什么在hexo中markdown会解析奇怪的东西，比如说我写了`&lt;!–￼4–&gt;`这个东西，在<code>hexo g</code>的过程中，会报错，很奇怪的错误。<br>后来把这个post删除了，再生成就没有问题了，所以说，可以确定这个问题是出在我刚刚写的<code>.md</code>文件内容导致的。</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ul><li>删除所有代码块，错误消失，还原所有内容</li><li>删除`&lt;!–￼5–&gt;`这个内容，错误消失<br>至此，可以知道，问题就出在`&lt;!–￼6–&gt;`这段内容里，后来改成```包含的代码块就没有问题。<br>所以说，遇到<code>\{\%</code>这样的字符需要转义，否则会被md解析。<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>这里还要深入了解一下md的解析原理</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java web 学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Mon, 19 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &amp;gt; C &amp;gt; JAVA &amp;gt; PHP &amp;gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说：　我是做C++的。<br>可是，我们真的懂C++了吗？<br>这要看我们对<em>懂</em>的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: <em>你永远不知道C++编译器背着你干了哪些事</em>。这句话其实我很认同。<br>例如:</p><ul><li>默认构造函数在什么情况下编译器会为我们提供？<ul><li>答案是：　在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。</li></ul></li><li>C++的虚函数机制是什么样的？<ul><li>就我所了解的，虚函数机制是靠虚函数表<em>VTable</em>和虚函数指针<em>VPtr</em>来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">深度探索C++对象模型</a>)</li></ul></li></ul><p>C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。<br>至于为什么要学习前端知识呢？</p><ul><li>B/S模式向C/S模式转变的趋向<br>  当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现</li><li>增加技术栈<br>  俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。</li><li>放弃C++，转向java?<br>  真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。</li></ul><h1 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h1><p>目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之进制转换</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sat, 17 Aug 2019 13:08:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:&lt;br&gt; 栈是一种数据结构，一种特殊的线性表&lt;/li&gt;
&lt;li&gt;特点:&lt;ul&gt;
&lt;li&gt;只允许在一端进行插
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ul><li>定义:<br> 栈是一种数据结构，一种特殊的线性表</li><li>特点:<ul><li>只允许在一端进行插入操作，另一端进行删除操作</li><li>元素满足先进后出原则，即先入栈的元素最后出栈</li></ul></li></ul><h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><p>算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可<br>上代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack, *pseqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">pseqstack <span class="title">init_stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pseqstack s = (pseqstack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(seqstack));</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        s -&gt; top = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top &gt; maxsize <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"入栈失败!\n"</span>);</span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s -&gt; top ++;        <span class="comment">/*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!)　*/</span></span><br><span class="line">        s -&gt; data[s -&gt; top] = e;</span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *x = s -&gt; data[s -&gt; top];</span><br><span class="line">        s -&gt; top --;</span><br><span class="line">        <span class="keyword">return</span> *x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*　输出栈的每一个元素　*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_each</span><span class="params">(pseqstack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top0 = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(top0 != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s-&gt;data[top0]);</span><br><span class="line">        top0 --;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进制转换，x是十进制de 数，y 是待转换进制*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(pseqstack s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">/* 　整除后不等于０，　执行循环 */</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        push_stack(s, (x%y));</span><br><span class="line">        x = x / y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", s-&gt;top);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*　加上输出功能　*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(s-&gt; top != <span class="number">-1</span>)&#123;</span><br><span class="line">        pop_stack(s, &amp;res);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">// 十进制数</span></span><br><span class="line">    <span class="keyword">int</span> scale;      <span class="comment">// 要转换的进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数字，进制数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;scale);</span><br><span class="line"></span><br><span class="line">    pseqstack S = init_stack();</span><br><span class="line">    transfer(S, num, scale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//print_each(S);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之约瑟夫问题的求解</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</guid>
      <pubDate>Sat, 17 Aug 2019 13:00:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a></p><h1 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h1><ul><li>顺序表</li><li>循环链表(不带头节点)<br>值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘</li></ul><ol><li>顺序表</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">约瑟夫问题的顺序表实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">date: 2019-3-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList, *PSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">PSeqList <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PSeqList L;</span><br><span class="line">    L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (L)&#123;</span><br><span class="line">        L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;       <span class="comment">/*　返回顺序表指针　*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span> || L-&gt;length &gt;= maxsize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">for</span> (j=L-&gt;length; j&gt;=i; j--)&#123;</span><br><span class="line">            L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];          <span class="comment">/*　依次往后移动　*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除位置不合法\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">// 保存将被删除的元素</span></span><br><span class="line">tmp = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i ; j &lt;= L-&gt;length; j++ )&#123;<span class="comment">// 从第I 个开始往前移动一位</span></span><br><span class="line">L-&gt;data[j<span class="number">-1</span>] = L-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length --;</span><br><span class="line"><span class="comment">//printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数 s 开始， 数到  m </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yusefu_SeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s1;</span><br><span class="line">    <span class="keyword">int</span> w;      <span class="comment">// 保存删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>( L-&gt; length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s1 = s <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次出去</span></span><br><span class="line">    <span class="keyword">for</span> (i = L-&gt;length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 关键步骤　*/</span></span><br><span class="line">        s1 = (s1+m<span class="number">-1</span>) % i;</span><br><span class="line">        w = L -&gt; data[s1];      <span class="comment">// 下标 s1, 是第s1+1 个元素！！！</span></span><br><span class="line">        DelSeqList(L, s1+<span class="number">1</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出列: %d\n"</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">// 序列长度</span></span><br><span class="line">    <span class="keyword">int</span> num[maxsize];       <span class="comment">// 用来存输入的数</span></span><br><span class="line">    PSeqList L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入序列元素个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入约瑟夫序列(空格分开): "</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[l]);</span><br><span class="line">        InSeqList(L, l+<span class="number">1</span>, num[l]);</span><br><span class="line">        <span class="comment">//printf(" %d ", num[l]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yusefu_SeqList(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.循环链表</p><p>这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:<br>1.　先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空<br>2.　接着用个循环，创建剩下的单个节点，同样只有数据域<br>3.　再把这些节点连接起来</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  约瑟夫问题的循环链表实现</span></span><br><span class="line"><span class="comment">* author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">* date: 2019-3-24</span></span><br><span class="line"><span class="comment">* version: 2.0(1.0 aborted for too complexed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* node definition　*/</span></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;linklist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　</span></span><br><span class="line"><span class="comment">\brief: crate the linklist and do insert, return the first node's ptr　</span></span><br><span class="line"><span class="comment">\param: n -&gt;&gt; the size of the serises</span></span><br><span class="line"><span class="comment">\return: the first node's ptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creat the node in range(1, n)*/</span></span><br><span class="line">linklist * initLink(int n)&#123;</span><br><span class="line">    linklist * head = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the first node initionalized (not head node)*/</span></span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span><span class="keyword">data</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span>next = NULL;        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a ptr to move through the list */</span></span><br><span class="line">    linklist * tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we satrt with the second node for a loop */</span></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        linklist * body = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* creat and init single node */</span></span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> <span class="keyword">data</span> = i;</span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> next = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* connect the single nodes together */</span></span><br><span class="line">        <span class="function"><span class="title">tmp</span> -&gt;</span> next = body;</span><br><span class="line">        <span class="function"><span class="title">tmp</span> = tmp -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", tmp-&gt;data);</span></span><br><span class="line">    <span class="comment">/* now tmp is just the last node */</span></span><br><span class="line">    <span class="function"><span class="title">tmp</span> -&gt;</span> next = head;     <span class="comment">/*connect the head and the rear */</span></span><br><span class="line">    return head;</span><br><span class="line">    <span class="comment">/* by this method, we created a loop linklist */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void yusefu(linklist * head,int k,int m)&#123;</span><br><span class="line">    linklist * tail = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (tail -&gt;</span> next != head) &#123;</span><br><span class="line">        <span class="function"><span class="title">tail</span> = tail -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linklist * p = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到编号为k的人(或者是第几个开始，可以改)</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> <span class="keyword">data</span> != k) &#123;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> next != p) &#123;</span><br><span class="line">        <span class="comment">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            tail = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p -&gt;</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">tail</span>-&gt;</span><span class="function"><span class="title">next</span>=p-&gt;</span>next;<span class="comment">//从链表上将p结点去除</span></span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d \t",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        free(p);</span><br><span class="line">        <span class="function"><span class="title">p</span> = tail -&gt;</span> next;<span class="comment">//继续使用p指针指向出列编号的下一个编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the last one */</span></span><br><span class="line">    <span class="function"><span class="title">printf</span>("%d \n",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    linklist * head=initLink(<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">    yusefu(head, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之逆波兰式</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</guid>
      <pubDate>Sat, 17 Aug 2019 12:40:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;学的数据结构，感觉掌握的不牢固，于是实现了一个demo&lt;/p&gt;
&lt;h1 id=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;a href=&quot;#中缀表达式转换为后缀表达式并求值&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;/a&gt;中缀表
        
      
      </description>
      
      <content:encoded><![CDATA[<p>学的数据结构，感觉掌握的不牢固，于是实现了一个demo</p><h1 id="中缀表达式转换为后缀表达式并求值"><a href="#中缀表达式转换为后缀表达式并求值" class="headerlink" title="中缀表达式转换为后缀表达式并求值"></a>中缀表达式转换为后缀表达式并求值</h1><ol><li>算法思想:<br>创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，<br>遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，<br>直到表达式末尾, 最后一个入栈的就是最终结果</li><li>先实现求值这一步吧，已知后缀表达式 </li><li>转换这一环节待更新…</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[maxsize];</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">// top 指明当前栈顶元素的位置</span></span><br><span class="line">&#125; SeqStack, *PSeqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序栈</span></span><br><span class="line"><span class="function">PSeqStack <span class="title">Init_SeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">PSeqStack S;</span><br><span class="line">S = (PSeqStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line"><span class="comment">//printf("%p\n", S);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S)</span><br><span class="line">S -&gt; top = <span class="number">-1</span>;<span class="comment">// top 设为-1 (认为设定),表示空</span></span><br><span class="line"><span class="keyword">return</span> S;<span class="comment">// 返回指向顺序栈的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(PSeqStack S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 没有元素，空栈</span></span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 1 表示为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_SeqStack</span><span class="params">(PSeqStack S, datatype x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈满不能再入栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 返回 0 表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">S -&gt; top ++;</span><br><span class="line">S -&gt; data[S -&gt; top] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈,保存栈顶元素于*x中，并删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能出栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 0 表示出栈失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line">S -&gt; top --;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能取top元素\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，参数为待销毁顺序栈的指针地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory_SeqStack</span><span class="params">(PSeqStack *S)</span></span>&#123;</span><br><span class="line"><span class="comment">// *S 二级指针</span></span><br><span class="line"><span class="keyword">if</span> (*S)</span><br><span class="line"><span class="built_in">free</span> (*S);</span><br><span class="line"></span><br><span class="line">*S = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　判断是否是操作数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsNum</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> *A)</span></span>&#123;</span><br><span class="line">PSeqStack s = Init_SeqStack();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> a, b, c;    <span class="comment">// a,b 上一次，上上一次入栈的元素，Ｃ是临时变量</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">ch = *A ++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们人为设置，在字符数组末尾加一个'#', 作为结束符　*/</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (IsNum(ch))&#123;</span><br><span class="line">Push_SeqStack(s, ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这里注意，　先进后出　*/</span></span><br><span class="line">Pop_SeqStack(s, &amp;b);</span><br><span class="line">Pop_SeqStack(s, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        c = a+b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        c = a-b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        c = a*b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        c = a/b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时结果入栈　*/</span></span><br><span class="line">Push_SeqStack(s, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch = *A ++;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetTop_SeqStack(s, &amp;result);</span><br><span class="line">Destory_SeqStack(&amp;s);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"计算结果: %d\n"</span>,calculate(num));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有<em>std::sort()</em>函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…<br>我学数据结构最大的收获就是：</p><ul><li>学会用计算机的思维去思考问题</li><li>学会如何调试程序</li><li>学会耐心做一件事<a href>课程设计</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux系统下文件乱码问题解决</title>
      <link>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</guid>
      <pubDate>Sat, 17 Aug 2019 12:28:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是用到了Linux的 &lt;a href=&quot;https://baike.baidu.com/ite
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。</p><ul><li>主要是用到了Linux的 <a href="https://baike.baidu.com/item/iconv/524310" target="_blank" rel="noopener">iconv</a> 命令</li></ul><h2 id="Step-one-获取当前文件编码"><a href="#Step-one-获取当前文件编码" class="headerlink" title="Step one　获取当前文件编码"></a>Step one　获取当前文件编码</h2><p>我当前文件是 <em>Student.cpp</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file Student.cpp</span><br></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.cpp: C <span class="built_in">source</span>, UTF-8 Unicode text</span><br></pre></td></tr></table></figure><p>是个万国码</p><h2 id="Step-Two-获取本机编码"><a href="#Step-Two-获取本机编码" class="headerlink" title="Step Two 获取本机编码"></a>Step Two 获取本机编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure><p>不知道为什么我这里报错，没有这个文件???<br>不过Linux一般都是UTF-8</p><h2 id="Step-Three-修改文件编码"><a href="#Step-Three-修改文件编码" class="headerlink" title="Step Three 修改文件编码"></a>Step Three 修改文件编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f GBK -t UTF-8  Student.cpp -o  Student0.cpp</span><br></pre></td></tr></table></figure><p>这里<em>Student.cpp</em>是原来的文件，<em>Student0.cpp</em>是我修改后的文件。</p><p>改后打开文件就没有乱码问题了</p><h3 id="这里有个问题，如果有多个文件不能在一起转化"><a href="#这里有个问题，如果有多个文件不能在一起转化" class="headerlink" title="这里有个问题，如果有多个文件不能在一起转化"></a>这里有个问题，如果有多个文件不能在一起转化</h3><p>比如我有两个文件，<em>Student.cpp</em> 和 <em>Student.h</em> 必须要执行两次命令，尴尬。<br>后来想起来可以用通配符，文件名不改变，即可</p><ul><li>注意： 通配符要慎用!</li><li>最后的最后: 写了个小项目，放在了仓库中<a href="https://github.com/mokeeqian/demo-projects/tree/master/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">编码转换</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>和小薇薇的700天</title>
      <link>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</link>
      <guid>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</guid>
      <pubDate>Fri, 16 Aug 2019 13:47:53 GMT</pubDate>
      <description>
      
        Encrypted passage, enter password to read.
      
      </description>
      
      <content:encoded><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Encrypted passage, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
