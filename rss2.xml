<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Sun, 01 Sep 2019 08:46:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>C++对象模型--拷贝构造函数</title>
      <link>http://www.qianjipeng.top/2019/08/31/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
      <guid>http://www.qianjipeng.top/2019/08/31/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Sat, 31 Aug 2019 14:58:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;接上一篇&lt;a href=&quot;http://mokeeqian.github.io/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%
        
      
      </description>
      
      <content:encoded><![CDATA[<p>接上一篇<a href="http://mokeeqian.github.io/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">C++默认构造函数</a>，这一篇我们来讲C++拷贝构造函数。  </p><h1 id="写在前面-关于深拷贝、浅拷贝"><a href="#写在前面-关于深拷贝、浅拷贝" class="headerlink" title="写在前面(关于深拷贝、浅拷贝)"></a>写在前面(关于深拷贝、浅拷贝)</h1><p>在此之前，先介绍一下：  </p><ul><li><strong>浅拷贝(值拷贝)</strong><br>只是对指针进行了拷贝，指针指向的地址并没有进行拷贝，<strong><font color="red">拷贝后的指针和原指针指向同一块内存区域(这是很危险的、如果析构，会析构两次，导致内存泄漏！</font></strong>。我们的C++编译器合成的拷贝构造函数是执行<strong>浅拷贝</strong>，如果拷贝了指针(如Foo::*p)，必定会出错，这个指针会成为野指针<br><img src="http://px1awapyv.bkt.clouddn.com/less.png" alt></li><li><strong>深拷贝(位拷贝)</strong><br>对指针和指针指向的地址都进行拷贝，<strong><font color="red">拷贝后的指针和原指针指向两块不同的内存区域，所以，执行深拷贝，需要开辟新的内存空间。</font></strong><br><img src="http://px1awapyv.bkt.clouddn.com/deep.png" alt></li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>来看一个例子：<br><strong>TestA.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">~Student();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;<span class="comment">// 花括号让s1和s2变成局部对象，方便测试</span></span><br><span class="line">Student s1;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;<span class="comment">// 调用默认拷贝构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：  </p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">~Student </span><br><span class="line">~Student </span><br><span class="line">*** <span class="literal">Error</span> <span class="keyword">in</span> `./a.<span class="keyword">out</span>': double free <span class="keyword">or</span> corruption (fasttop): <span class="number">0</span>x00000000010f9c20 ***</span><br></pre></td></tr></table></figure><p>很显然，报出了一个错误，double free，也就是进行两次析构，这是不允许的。为什么呢？<br><strong><font color="gree">因为我这里调用的是编译器合成的拷贝构造函数，它进行的是浅拷贝，拷贝后s1.name和s2.name都是指向同一块内存区域，对同一块内存区域进行两次释放，能不出错吗？</font></strong>  </p><p>我们来gdb一下看看：<br>这是对s2进行拷贝初始化之前，s2这时候还不存在，内存地址都还是起始地址</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br><span class="line">(gdb) p s2</span><br><span class="line">$<span class="number">2</span> = &#123;num = <span class="number">0</span>, name = <span class="number">0x0</span>&#125;</span><br></pre></td></tr></table></figure><p>这是对s2进行拷贝初始化之后，s2这时候和s1的数据成员完全一致，也就是说，我们的拷贝构造函数只是对s1.name和s1.num进行了简单的复制，赋值给s2</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p s2</span><br><span class="line">$<span class="number">3</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br><span class="line">(gdb) p s1</span><br><span class="line">$<span class="number">4</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br></pre></td></tr></table></figure><p>我们修改一下原来的代码、加上一个user-defined拷贝构造函数，进行深拷贝：<br><strong>TestB.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">Student(<span class="keyword">const</span> Student &amp; stu);</span><br><span class="line">~Student();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span> name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝构造函数</span></span><br><span class="line">Student::Student( <span class="keyword">const</span> Student &amp; stu ) &#123;</span><br><span class="line">num = stu.num;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">if</span> ( name!= <span class="literal">NULL</span> )</span><br><span class="line"><span class="built_in">strcpy</span>(name, stu.name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;<span class="comment">// 花括号让s1和s2变成局部对象，方便测试</span></span><br><span class="line">Student s1;</span><br><span class="line"><span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：  </p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">~Student </span><br><span class="line">~Student </span><br></pre></td></tr></table></figure><p>这次没有出现重复析构的错误了，输出的是我们希望的结果，我们再一次gdb看一下：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p s1</span><br><span class="line">$<span class="number">3</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x614c20</span> <span class="string">"\024"</span>&#125;</span><br><span class="line">(gdb) p s2</span><br><span class="line">$<span class="number">4</span> = &#123;num = <span class="number">2</span>, name = <span class="number">0x615050</span> <span class="string">"\024"</span>&#125;</span><br></pre></td></tr></table></figure><p>刚刚为TestB.cpp加上了一个拷贝构造函数，所以<strong><font color="gree">执行Student s2(s1)的时候，会调用我定义的Student(const Student &amp;stu)这个拷贝构造函数，执行深拷贝，即为s2对象的name属性开辟新的内存空间(首地址0x615050)，使得name指针指向这个新开辟的内存地址，而不是原来的s1的name指针所指向的地址(首地址0x614c20)</font></strong>，这样在析构的时候，便没有内存泄漏的错误了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>知道区别之后，那么我们什么时候该用浅拷贝、什么时候该用深拷贝？<br>或许上面的例子是一个答案，当我们需要对动态的数据类型(指针、数组等)进行拷贝的时候，使用深拷贝，防止内存泄漏、指针悬挂问题的出现。<br>当然大多数情况下，浅拷贝就可以解决我们的问题了。</p><h1 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h1><h2 id="什么是拷贝构造函数"><a href="#什么是拷贝构造函数" class="headerlink" title="什么是拷贝构造函数"></a>什么是拷贝构造函数</h2><ul><li>对于普通的内置数据类型，要对它们进行复制很简单，只需要简单的赋值操作符就可以了</li><li>类对象数据类型就不行了，它比较复杂，有各种各样的成员变量</li></ul><p>我们看一个例子：　　</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">int</span> a;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">//构造函数  </span></span><br><span class="line">    Foo(<span class="keyword">int</span> b)  </span><br><span class="line">    &#123; a = b;&#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//拷贝构造函数  </span></span><br><span class="line">    Foo(<span class="keyword">const</span> Foo &amp; C)  </span><br><span class="line">    &#123;  </span><br><span class="line">        a = C.a;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="function">Foo <span class="title">A</span><span class="params">(<span class="number">100</span>)</span></span>;  </span><br><span class="line">    <span class="function">Foo <span class="title">B</span><span class="params">(A)</span></span>;</span><br><span class="line">    <span class="comment">//Foo B = A; </span></span><br><span class="line">    B.Show ();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Foo(const Foo &amp; c)就是一个拷贝构造函数，它是一种特殊的构造函数，<strong>参数中必须要有一个是这个类的类型的引用变量</strong>，一个类中可以有多个拷贝构造函数。</p><h2 id="何时调用"><a href="#何时调用" class="headerlink" title="何时调用"></a>何时调用</h2><p><strong>1. 对象需要通过另外一个对象进行初始化</strong><br>这一点显而易见</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Foo <span class="keyword">a</span>(b);<span class="comment">// 拷贝构造函数</span></span><br><span class="line">Foo <span class="keyword">a</span> = b;<span class="comment">// 拷贝赋值操作符</span></span><br></pre></td></tr></table></figure><p><strong>2. 对象以值传递的方式传入函数参数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:   </span><br><span class="line"> Foo(<span class="keyword">int</span> b) </span><br><span class="line">    &#123;  </span><br><span class="line">  a = b;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"creat: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"> Foo(<span class="keyword">const</span> Foo&amp; C) </span><br><span class="line">    &#123;</span><br><span class="line">  a = C.a;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"copy"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> ~Foo()  </span><br><span class="line"> &#123;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt; <span class="string">"delete: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Show</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//全局函数，传入的是对象  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo_bar</span><span class="params">(Foo C)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"test"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="function">Foo <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>;  </span><br><span class="line"> <span class="comment">//传入对象  </span></span><br><span class="line"> Foo_bar(test);  </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Foo_bar()的过程中，会有如下操作：  </p><ul><li>test作为实参传入Foo_bar()函数的形参，生成临时Foo对象tmp</li><li>调用拷贝构造函数，把test的值传递给tmp,一、二操作在一起就是Foo tmp(test)</li><li>Foo_bar()函数执行完之后，调用析构函数，析构tmp对象 </li></ul><p><strong>3. 对象以值传递的方式从函数返回</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:   </span><br><span class="line"> Foo(<span class="keyword">int</span> b) </span><br><span class="line">    &#123;  </span><br><span class="line">  a = b;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"creat: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"> Foo(<span class="keyword">const</span> Foo&amp; C) </span><br><span class="line">    &#123;</span><br><span class="line">  a = C.a;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"copy"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> ~Foo()  </span><br><span class="line"> &#123;  </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt; <span class="string">"delete: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">Show</span> <span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//全局函数，传入的是对象  </span></span><br><span class="line"><span class="function">Foo <span class="title">Foo_bar</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Foo <span class="title">test_local</span><span class="params">(<span class="number">100</span>)</span></span>;  </span><br><span class="line"><span class="keyword">return</span> test_local;</span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"> Foo_bar();  </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Foo_bar()执行到return 语句时候：</p><ul><li>产生一个临时对象tmp</li><li>调用拷贝构造函数，把test_local的值传递给tmp,一、二操作在一起就是Foo tmp(test_local)</li><li>Foo_bar()函数执行到最后，调用析构函数，先析构test_local对象，再析构tmp对象</li></ul><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul><li><strong><font color="red">拷贝构造函数不能对static member进行拷贝赋值，因为static member属于这个类，而不被某个特定的对象所拥有</font></strong></li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>暂时就想到这么多，后面再进行补充。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/31/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C++对象模型--默认构造函数</title>
      <link>http://www.qianjipeng.top/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
      <guid>http://www.qianjipeng.top/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Fri, 30 Aug 2019 05:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;这篇文章主要讲解C++中默认构造函数的机制，同时解决了困扰了我很久的问题，&lt;font color=&quot;red&quot;&gt;长篇文章&lt;/font&gt;，话不多说，开干！  &lt;/p&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=
        
      
      </description>
      
      <content:encoded><![CDATA[<p>这篇文章主要讲解C++中默认构造函数的机制，同时解决了困扰了我很久的问题，<font color="red">长篇文章</font>，话不多说，开干！  </p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>C++编译器为程序员自动提供下面这些成员函数(在合适的时候)：  </p><ul><li>默认构造函数</li><li>默认析构函数</li><li>拷贝构造函数</li><li>赋值运算符</li><li>地址运算符</li><li>移动构造函数(C++11)</li><li>移动赋值运算符(C++11)</li></ul><h1 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h1><p><font color="red">错误的、不全面的认识： </font> </p><ul><li>如果程序员没有定义默认的构造函数，那么编译器就会提供一个默认构造函数，来完成对成员的初始化</li><li>编译器合成出来的默认构造函数会明确的设置类的每个数据成员的值  </li></ul><p><font color="green">正确认识： </font> </p><ul><li>默认构造函数只在“被需要”的时候，才会被编译器合成，可能是有用或无用</li><li>对构造函数的需求分为程序需求和编译器需求</li><li>一个有用的默认构造函数在必要的时候(4种情况下)也会被编译器合成<ul><li>带有默认构造函数的类对象成员</li><li>带有默认构造函数的基类</li><li>带有虚函数的类</li><li>带有虚基类的类</li></ul></li><li>编译器合成的默认构造函数，不会初始化用户定义的类成员，退一步说，只会初始化编译器“需要的”成员</li><li>编译器只做编译器自己的事，程序员的事需要程序员自己做</li></ul><h1 id="何谓默认构造函数"><a href="#何谓默认构造函数" class="headerlink" title="何谓默认构造函数"></a>何谓默认构造函数</h1><p>　　<strong><em>C++ Annotated Reference Manual(ARM)</em></strong>中提及到：<strong><font color="hotpink">“default constrcutor在需要的时候会被编译器产生出来。”</font></strong>　那这里问题来了，<font color="green">“在需要的时候”，到底是什么时候？又是被谁需要？用来做什么事情？</font><br>以下代码为例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">    Foo *pnext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo bar;</span><br><span class="line">    <span class="keyword">if</span> ( bar.val || bar.pnext ) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在这个程序中，要求val 和 pnext都必须被初始化为0，那么代码中并没有提供setter函数，只有通过和构造函数来初始化，但是代码也没有(显式)提供构造函数。那么这个情形是否符合上述的“在需要的时候”？答案当然是：NO。对“在需要的时候”，可以分为<strong>程序需要</strong>和<strong>编译器需要</strong>，至于前者，那是我们程序员自己的事，我们需要，那我们就自己写构造；后者，是编译器的工作。那么本例中的当然是程序需要，提供默认构造函数的责任就在于程序员。所以上述程序<strong>不会生成一个默认构造函数</strong>。<br>　　那么，什么时候才会合成一个默认构造函数？当编译器需要的时候！被合成出来的默认构造函数<strong>执行编译器所需要的行为</strong>(想想都很可怕，我们都不知编译器到底在背后做了什么)，因此，即便编译器为程序合成了一个默认构造函数，这个构造函数也不会执行我们希望的操作，就是说，这个Foo()构造函数<strong>不会把val和pnext都初始化为0</strong>，也就是我们所说的编译器合成的<strong>无用的默认构造函数(trivial)</strong>，<strong><em>C++ Standard[ISO-C++95]</em></strong>中的原话是，<strong><font color="hotpink">“对于class X，如果没有任何user-defined constructor，那么会有一个default constructor会被隐式声明出来，一个隐式声明出来的defalut constructor是一个trivial constructor”。</font></strong><br>　　我们验证一下：  <br><br><br><strong>代码A：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">Foo *pnext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo bar;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bar.val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; bar.pnext &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo_bar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>g++编译运行结果：  </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4196624</span></span><br><span class="line"><span class="number">0x400770</span></span><br></pre></td></tr></table></figure></li><li><p>clang++编译运行结果：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><p>初步怀疑，与编译器有关？  </p><ol><li><p>g++编译gdb调试： </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;val = <span class="number">4196624</span>, pnext = <span class="number">0x400770</span> &lt;_start&gt;&#125;</span><br></pre></td></tr></table></figure></li><li><p>clang++编译gdb调试：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">2</span> = &#123;val = <span class="number">0</span>, pnext = <span class="number">0x0</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><p>另外，在线编译器爆出了一个warnning:  </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Start</span><br><span class="line">prog.cc: <span class="keyword">In</span> <span class="function"><span class="keyword">function</span> '<span class="title">void</span> <span class="title">Foo_bar</span><span class="params">()</span>':</span></span><br><span class="line">prog.cc:<span class="number">11</span>:<span class="number">14</span>: warning: <span class="string">'bar.Foo::val'</span> <span class="keyword">is</span> used uninitialized <span class="keyword">in</span> this <span class="function"><span class="keyword">function</span> [-<span class="title">Wuninitialized</span>]</span></span><br><span class="line"><span class="function">   11 |  <span class="title">cout</span> &lt;&lt; <span class="title">bar</span>.<span class="title">val</span> &lt;&lt; <span class="title">endl</span>;</span></span><br><span class="line">      |              ^~~</span><br><span class="line">prog.cc:<span class="number">12</span>:<span class="number">17</span>: warning: <span class="string">'bar.Foo::pnext'</span> may be used uninitialized <span class="keyword">in</span> this <span class="function"><span class="keyword">function</span> [-<span class="title">Wmaybe</span>-<span class="title">uninitialized</span>]</span></span><br><span class="line"><span class="function">   12 |     <span class="title">cout</span> &lt;&lt; <span class="title">bar</span>.<span class="title">pnext</span> &lt;&lt; <span class="title">endl</span>;</span></span><br><span class="line">      |             ~~~~^~~~~</span><br><span class="line"><span class="number">4197792</span></span><br><span class="line"><span class="number">0</span>x400c20</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Finish</span><br></pre></td></tr></table></figure><p>意思是val和pnext没有被初始化，这就说明了我们的无用的默认构造函数没有对类成员进行初始化，在这里，貌似要解释一下<font color="red">初始化</font>和<font color="red">赋值  </font>  <br><br><br><strong>代码B：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">Foo *pnext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo_bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Foo_bar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>g++编译，gdb调试结果：  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;val = <span class="number">4196128</span>, pnext = <span class="number">0x4005c0</span> &lt;_start&gt;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可见，这里的val = 4196128, 貌似是一个<del>随机生成的数值</del>。 </p><ol start="2"><li>clang++编译，gdb调试结果：<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">1</span> = &#123;val = <span class="number">0</span>, pnext = <span class="number">0x0</span>&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此上，基本可以推断出，默认构造函数的行为貌似与编译器有关？<br>但是可以肯定的是，</p><h1 id="non-trivial默认构造函数"><a href="#non-trivial默认构造函数" class="headerlink" title="non-trivial默认构造函数"></a>non-trivial默认构造函数</h1><h2 id="带有defalut-constructor的member-class-object"><a href="#带有defalut-constructor的member-class-object" class="headerlink" title="带有defalut constructor的member class object"></a><strong><em>带有defalut constructor的member class object</em></strong></h2><p>举个例子： </p>  <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo();</span><br><span class="line">    Foo(<span class="keyword">int</span> val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo foo;<span class="comment">// 不是继承，是内含!</span></span><br><span class="line">    <span class="keyword">char</span> *<span class="keyword">str</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> foo_bar() &#123;</span><br><span class="line">Bar bar;<span class="comment">//Bar::foo必须在这里初始化</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">str</span> ) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的Foo是一个拥有默认构造函数的一个类，当Foo的一个对象foo作为我们的Bar类的一个成员，同时Bar类没有任何构造函数的时候，那么这个类的implicit default constructor就是nontrivial的，编译器为就会在Bar类的constructor<strong><font color="red">真正需要</font></strong>的时候，为其合成一个默认构造函数。<br>被合成的Bar类的构造函数，里面有必要的代码，能够调用Foo::Foo()对Bar::foo进行处理，但是Bar::str需要程序员来初始化，我们大胆猜测一下，编译器合成的Bar::Bar()可能是这样子的：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> Bar::Bar() &#123;</span><br><span class="line">foo.Foo::Foo();<span class="comment">//伪代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，我们程序员还会写一个Bar::Bar()，对Bar::str初始化：  </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Bar::Bar() </span>&#123;</span><br><span class="line"><span class="keyword">str </span>= <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在好了，程序的需求已经得到满足了，但是我们的Bar::foo还没有初始化，但是这里程序员已经显式定义了默认构造函数，所以编译器无法再次合成了，怎么办呢？<br>编译器的做法是：<br><font color="hotpink"><strong>“如果Class A内含有一个或者一个以上的member class object，那么Class A的每一个构造函数都必须调用每一个member class的默认构造函数”*</strong></font>，即编译器会<strong>扩张</strong>已经存在的构造函数，在其中安插一些代码，在user code被执行之前，调用相应的defalut constructor。  </p><pre><code>所以，扩张后的构造函数可能是这样的：　　</code></pre><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bar::Bar() &#123;</span><br><span class="line">foo.Foo::Foo();<span class="comment">// 编译器插入的</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="number">0</span>;<span class="comment">// 程序员写的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后说一点，如果Bar类有多个member class object怎么办？当然是按上面的道理来，只不过对这些object，<strong><font color="red">按照它们声明的顺序来初始化</font></strong>。</p><h2 id="带有defalut-constructor的base-class"><a href="#带有defalut-constructor的base-class" class="headerlink" title="带有defalut constructor的base class"></a><strong><em>带有defalut constructor的base class</em></strong></h2><p>顾名思义，如果一个没有任何构造函数的继承于一个带有默认构造函数的基类，那么编译器就会<strong><font color="red">为这个类合成一个默认构造函数，这个构造函数会调用上一层继承类的默认构造函数。</font></strong><br>那么如果程序员为这个类写了很多个构造函数，但是就是没有默认构造函数，怎么办？<strong><font color="red">编译器会把默认构造函数中需要的代码插入到所有的现有的构造函数中，那么如果上述第一种情况也存在呢？答案是，这些构造函数会在基类构造函数被调用之后，再被调用。</font></strong></p><h2 id="带有一个virtual-function的class"><a href="#带有一个virtual-function的class" class="headerlink" title="带有一个virtual function的class"></a><strong><em>带有一个virtual function的class</em></strong></h2><p>这个与C++中的虚函数的机制有关，参见<a href="http://mokeeqian.github.io/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/" target="_blank" rel="noopener">C++虚函数机制</a>，以下代码为例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">const</span> Widget &amp; widget)</span> </span>&#123;</span><br><span class="line">widget.flip();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设Bell和Whistle都是继承于Widget</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Bell b;</span><br><span class="line">    Whistle w;</span><br><span class="line">    flip(b);</span><br><span class="line">    flip(w);-</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个虚函数表vtbl会在编译的时候被合成出来，用来存放虚函数的地址</li><li>在每一个Widget对象中，都会有一个额外的指针成员vptr，用来存放虚函数表的地址</li></ul><p>此外，widget.flip()的虚拟调用操作会被重新改写，因为flip()在vtbl中是需要通过索引来获得的。可能的代码如下：  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(*widget.vptr[1])</span> <span class="comment">(&amp;widget)</span><span class="comment">// &amp;widget是this指针</span></span><br></pre></td></tr></table></figure><p>至于索引为什么是1？因为vtbl中的第一个元素存放的是<strong>type_info</strong>    </p><p>为了让这个机制有效，编译器必须需要为每一个Widget或其派生类的对象的vptr赋值，放上适当的vtbl的地址。<strong><font color="red">对于class所定义的每一个构造函数，编译器都会插入一些代码来完成这样的事情；对于那些没有定义任何构造函数的class，编译器ｈｉ合成一个这样的默认构造函数，完成对vptr的初始化。</font></strong></p><h2 id="带有一个virtual-base-class的class"><a href="#带有一个virtual-base-class的class" class="headerlink" title="带有一个virtual base class的class"></a><strong><em>带有一个virtual base class的class</em></strong></h2><p>这一条没有弄懂…..</p><h1 id="trivial默认构造函数-实际上不存在"><a href="#trivial默认构造函数-实际上不存在" class="headerlink" title="trivial默认构造函数(实际上不存在)"></a>trivial默认构造函数(实际上不存在)</h1><p>不满足上述4种情况、没有显式提供user-defined constructor的时候，这个默认构造函数叫implicit trivial default constructor，实际上<strong>编译器根本不会合成这样的一个构造函数</strong>。</p><h1 id="编译器如何合成默认构造函数"><a href="#编译器如何合成默认构造函数" class="headerlink" title="编译器如何合成默认构造函数"></a>编译器如何合成默认构造函数</h1><p>当程序员没有定义构造函数时，编译器会合成一个默认构造函数，来完成编译器需要的工作；当程序员定义了自己的构造函数时，有时候，编译器也会对它“需要的”一些成员进行操作，这时候，编译器的做法是：<br><strong><font color="red">修改构造函数，在程序员写的构造函数里添加代码，添加的代码位于程序员的代码之前。</font></strong></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>默认构造函数只有在上述4种情况下，才会由编译器强制合成，C++ Standard称之为implicit nontrivial default constructor，它只会满足<strong><font color="red">编译器的需要</font></strong>，其他事一概不会做。</li><li>对那些不满足上述4种情况、没有任何user-defined constructor的类，我们说它拥有的是implicit trivial default constructor，实际上，这个默认构造函数<strong><font color="red">根本不会被合成</font></strong>。</li><li>在合成的默认构造函数中，只有<strong><font color="red">基类的子对象、类的成员对象</font>会</strong>被初始化，所有其他的<strong><font color="red">nonstatic data membe</font>r</strong>(如整数、整数指针、整数数组等)都<strong>不会</strong>被初始化，这些初始化对于程序而言或许很重要，但是编译器它管你干啥子。</li><li>自己的事情自己做，编译器合成出来的构造函数只会做编译器需要做的工作，其他的工作需要程序员自己想办法。</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/30/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B-%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CSAPP(一)--计算机系统漫游</title>
      <link>http://www.qianjipeng.top/2019/08/29/CSAPP-%E4%B8%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/</link>
      <guid>http://www.qianjipeng.top/2019/08/29/CSAPP-%E4%B8%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/</guid>
      <pubDate>Thu, 29 Aug 2019 03:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;计算机系统学习&quot;&gt;&lt;a href=&quot;#计算机系统学习&quot; class=&quot;headerlink&quot; title=&quot;计算机系统学习&quot;&gt;&lt;/a&gt;计算机系统学习&lt;/h1&gt;&lt;p&gt;狂补知识ing…  &lt;/p&gt;
&lt;h2 id=&quot;计算机系统&quot;&gt;&lt;a href=&quot;#计算机系统&quot; cla
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="计算机系统学习"><a href="#计算机系统学习" class="headerlink" title="计算机系统学习"></a>计算机系统学习</h1><p>狂补知识ing…  </p><h2 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h2><p>计算机系统是由计算机硬件和系统软件组成的，它们共同工作来与进行应用程序。接下来，我会以<strong>hello.c</strong>为例，进行一些零散的总结。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>信息就是位+上下文，我们的hello.c文件叫源文件、源程序，实际上就是一个由值0和1组成的位序列，叫<strong>比特</strong>(bit)，8个位被组织成一组，成为一个<strong>字节</strong>(byte)，每个字节表示程序中的某些文本字符，现在大部分的计算机都使用ANSII标准来存储字符，每个字符都对应唯一的单字节大小的整数值，叫<strong>ANSII值</strong>。</p><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>目前的C、C++、Pascal等都是高级语言，汇编语言也是一些汇编指令，只有最低级的<strong>机器指令</strong>(0、１序列)才能够被计算机直接“识别”，所以说，要想运行一串高级语言代码，必须要有一样东西，把这些高级语言代码转换为计算机能够直接识别的机器指令，这就是编译器的作用。<br>一个计算机编译系统，由四部分组成：</p><ul><li>预处理器(ccp)</li><li>编译器(ccl)</li><li>汇编器(as)</li><li>链接器(ld)<br><img src="http://px1awapyv.bkt.clouddn.com/55.png" alt><br>相应的，一个程序的编译过程，也分为四个阶段：</li><li>预处理阶段<br>预处理器会扫描源文件，定位到以”#”开头的内容，根据这个内容，修改源文件的内容，比如说前面<code>#include &lt;stdio.h&gt;</code>，这时候，我就要找到stdio.h这个头文件，把这个头文件的内容直接插入到hello.c源文件中(至于具体在哪个位置，我们不知道)<br>，生成新的源文件<strong>hello.i</strong>，通常以<strong>.i</strong>作为文件扩展名。</li><li>编译阶段<br>编译器会将文本文件hello.i翻译成文本文件hello.s，它包含了一个汇编语言程序，。即将高级语言翻译成汇编语言。的汇编程序可以为不同的高级语言和不同的编译器提供通用的输出语言。<br><code>gcc -S hello.s hello.c</code></li><li>汇编阶段<br>汇编器将汇编语言翻译成机器语言指令，把这些指令打包成一种叫做<strong>可重定位目标程序</strong>的格式，将结果放在<strong>hello.o</strong>这个二进制文件中。<br><code>gcc -c hello.o hello.c</code></li><li>链接阶段<br>我们的hell.o调用了stdio的printf()函数，它是C语言的一个标准库函数，位于printf.o这个独立的预编译好了的目标文件中，必须要加入我们的hello.o文件中，程序才能够正常运行。链接器就是做这个工作的，将printf.o文件与hello.o文件链接，得到hello<strong>可执行目标文件</strong>，当然，也是二进制文件。这个可执行目标文件可以加载到内存中，被计算机所执行。<br><code>gcc -o hello hello.c</code>　这样的命令会生成可执行文件hello，一般没有后缀。</li></ul><h2 id="了解编译系统的工作流程"><a href="#了解编译系统的工作流程" class="headerlink" title="了解编译系统的工作流程"></a>了解编译系统的工作流程</h2><p>带来的好处：  </p><ul><li>优化程序性能<br>比如说，switch就会比if效率高吗？while和for的效率问题，函数调用的开销到底有多大，传指针和传值到底有什么区别？<br>这些目前我还不清楚、或者说不太清楚，所知道的也就是从书上、网上学来的。或许学了程序的编译过程，就会明白了把。</li><li>理解链接时的错误<br>写代码时，经常会遇到链接错误，顺带提一下，<strong>动态链接</strong>和<strong>静态链接</strong>，待学习。</li></ul><h2 id="动态链接和静态链接"><a href="#动态链接和静态链接" class="headerlink" title="动态链接和静态链接"></a>动态链接和静态链接</h2><p><strong>1. 动态链接</strong><br>　　Windows: <strong>.lib文件</strong><br>　　Linux: <strong>.a</strong>文件<br>　　函数库的<strong>一份拷贝</strong>是可执行文件的<strong>物理组成部分</strong>，称之为静态链接。静态链接当链接程序时，需要使用的每个库函数的一份拷贝被加入到可执行文件中。静态链接使用静态库进行链接，生成的程序包含程序运行所需要的<strong>全部库</strong>，可以直接运行，不过静态链接生成的程序<strong>体积较大</strong>（即使是在静态链接中，整个库文件也<strong>并没有全部装入</strong>到可执行文件中，所装入的只是需要的函数）。<br><strong>2. 静态链接</strong><br>　　Windows: <strong>.dll文件</strong><br>　　Linux: <strong>.so文件</strong><br>　　如果可执行文件<strong>只是包含了文件名</strong>，让载入器在<strong>运行时</strong>能够寻找程序所需要的函数库，称之为动态链接。动态链接允许系统提供一个庞大的函数库集合，可以提供许多有用的服务，程序在运行时寻找它们。动态链接使用动态链接库进行链接，生成的程序在执行的时候需要加载所需的动态库才能运行。动态链接生成的程序<strong>体积较小</strong>，但是必须依赖所需的动态库，否则无法执行。<br><strong>3. 细节</strong><br>　　gcc编译器默认使用动态编译，如果要指定静态编译，需要加上<code>-static</code>参数</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/29/CSAPP-%E4%B8%80-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>计算机系统基础--学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Sat, 24 Aug 2019 01:33:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;　　作为一个非科班出身的半吊子程序员(程序员?)，在和计算机专业的同学交流的过程中，切实感受到知识面的匮乏，总体体现在对计算
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　作为一个非科班出身的半吊子程序员(程序员?)，在和计算机专业的同学交流的过程中，切实感受到知识面的匮乏，总体体现在对计算机系统的理解。确实，作为一名双非院校信管专业的学生，本身起步就比别人慢了不少，若没有扎实的基本功，将来怎么与别人竞争。<br>　　在自学了将近一年的代码之后，随着代码量的增加，越发觉得基础知识的匮乏，对指针理解的不够透彻，对程序代码的执行情况也是一知半解。不过也不失为一件好事，最怕的就是发现不了问题，故开设这篇博客，记录下以后学习的过程。<br>先给自己定个学习路线吧:</p><ul><li>计算机系统基础NJU袁春凤 + MOOC，为期一个学期，势必拿下</li><li>CSAPP</li></ul><h2 id="我的计算机学习之路"><a href="#我的计算机学习之路" class="headerlink" title="我的计算机学习之路"></a>我的计算机学习之路</h2><p>　　要说我真正的计算机学习之路，是我的导师领我进门的。是从学Python代码开始的，虽然大一下开的C，当时也只是记住了一些计算机常识，并没有过多的去重视，后来时间到了大二，一天我的导师找到我，问了我有没有兴趣搞代码。在这里顺便啰嗦一下，给我的学弟学妹们吧。<br>　　信管专业，是个交叉学科，学的东西多且复杂，简单的来说是计算机学科知识也管理科学相交叉的产物。在这个大环境下，如果没有明确的目标，那么四年后你将一事无成。所以，在大一下，对自己的专业有了一定的认识之后，就应该明确自己以后的学习方向，是搞代码还是搞管理，还是搞测试，还是搞其他的，最晚最晚大二上也要定好方向了。这里我假设你选择的是技术路线，无论你是搞运维还是搞开发还是搞测试，总之都得与代码打交道。所有你就要在平时学习中多动手，多动脑。但是问题来了，我的专业是分在管院，顾名思义，侧重的是管理科学，所以如果想做技术的话，要下狠功夫，狠补计算机相关知识。其实我觉得可以先学着一两门编程语言，在学习的过程中，你会发现自己专业知识的缺乏，有的时候一些问题会感觉无从下手，这个时候，你已经有了一定的编程基础(注意<strong>编程能力</strong>和<strong>项目能力</strong>的区别)，带着问题和目的的取学习一样东西往往是最高效的。<br>　　我还是很菜，虽然有一些Linux开发经验，但是对于Linux系统底层的机制还是不懂，是完全不懂啊。先前试着看了Linux内核源码，无奈看不懂。。也是，没有计算机系统基础知识，怎么能读它。所以说，要学好计算机，就必须先要把入门课补回来。出来混总是要还的～～  </p><p>ps:  </p><ul><li><strong><em>编程能力</em></strong><br>侧重动脑能力，指的是完成小程序、算法相关的能力，pta,leetcode…</li><li><strong><em>项目能力</em></strong><br>侧重动手能力，要求能够合理使用现有资源(API、框架…)开发出一个完整的项目，例如：管理系统，坦克大战…</li></ul><h2 id="学习之路"><a href="#学习之路" class="headerlink" title="学习之路"></a>学习之路</h2><p>先看着南大的MOOC学习，它是根据CSAPP改编而来，我看了一下感觉挺好，容易理解。<br>未完待续…</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80-%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>web--浅谈jsp与servlet</title>
      <link>http://www.qianjipeng.top/2019/08/23/web-%E6%B5%85%E8%B0%88jsp%E4%B8%8Eservlet/</link>
      <guid>http://www.qianjipeng.top/2019/08/23/web-%E6%B5%85%E8%B0%88jsp%E4%B8%8Eservlet/</guid>
      <pubDate>Fri, 23 Aug 2019 01:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;JSP和servlet&quot;&gt;&lt;a href=&quot;#JSP和servlet&quot; class=&quot;headerlink&quot; title=&quot;JSP和servlet&quot;&gt;&lt;/a&gt;JSP和servlet&lt;/h1&gt;&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;head
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="JSP和servlet"><a href="#JSP和servlet" class="headerlink" title="JSP和servlet"></a>JSP和servlet</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>jsp的本质就是servlet，jsp经过编译后会转化成servlet<br>因为jvm只能识别java类，不能识别其他的类文件，所以就有了一系列的web容器(服务器)，如tomcat，这些容器将jsp编译成jvm能够识别的java类</li><li>一般来说，jsp用于<strong>页面展示</strong>，servlet用于<strong>逻辑控制</strong><br>比如说要实现一个用户登录模块，我们会把页面显示交给jsp，内部逻辑控制交给servlet</li><li>servlet没有内置对象，jsp有一些内置对象</li></ul><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><ul><li>servlet是严格意义上的java类，它在<em>MVC</em>模型中是<strong>控制层</strong>，它与<strong>表现层</strong>完全分离</li><li>jsp可以是html标签，可以嵌入java代码，它是<strong>表现层</strong>，侧重于视图</li></ul><h2 id="做好理解"><a href="#做好理解" class="headerlink" title="做好理解"></a>做好理解</h2><ul><li>不同之处<br>servlet通过java代码httpServletResponse对象向客户端动态输出html内容，就是说，如果我要在servlet中向客户端输出或者展示一些东西，必须要以html标签的形式</li><li>各自特点<br>servlet可以很好的组织<strong>业务逻辑</strong>，但是通过以字符串的形式向客户端传送html标签使得代码维护起来比较困难。<br>但是一概的在jsp里面混入大量的业务逻辑也是不可取的。</li><li>如何均衡<br>那么如何做到二者的优势互补？答案当然是<a href="https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230" target="_blank" rel="noopener">MVC</a>，MVC是一种软件架构，分为:  <ul><li>模型层(Model)—业务逻辑</li><li>视图层(View)—负责页面显示</li><li>控制层(Controler)—负责相关交互操作</li></ul></li></ul><h2 id="示例demo"><a href="#示例demo" class="headerlink" title="示例demo"></a>示例demo</h2><p>这个小demo主要实现了html表单的用户登录操作，然后记录用户的提交信息，返回给客户端。</p><p><strong>1. loginServlet.java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/login"</span>, name = <span class="string">"login"</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里是 servlet负责页面显示， 也可以是SERVLET负责数据处理, jsp 负责页面显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post 提交浏览器不会显示，比较安全</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置页面编码格式</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        String user = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这样写是没有效果的，servlet向浏览器输出内容，浏览器只能解析html,所以要用html标签向页面传送信息</span></span><br><span class="line">        <span class="comment">//response.getWriter().println(user);</span></span><br><span class="line">        <span class="comment">//response.getWriter().print("这是登录界面");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// response.getWriter() 获得一个输出流</span></span><br><span class="line">        String string = <span class="string">"&lt;html&gt; &lt;head&gt; &lt;title&gt;这是servlet返回的结果&lt;/title&gt;&lt;/head&gt; &lt;body&gt; 欢迎 "</span> + user + <span class="string">"&lt;/body&gt; &lt;/html&gt;"</span>;</span><br><span class="line">        response.getWriter().print(string);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. login.jsp</strong>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>servlet测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tb</span>&gt;</span></span><br><span class="line">            uesr:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tb</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tb</span>&gt;</span></span><br><span class="line">            passwd:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"passwd"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>可以知道，我输入的<code>user</code>是“servler测试”，点击登录按钮后，返回给客户端的就是用户提交的<code>user</code>值，”servlet测试“。</p><ul><li>页面提交<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566523985/hexo/33_k8dao7.png" alt="页面提交"></li><li>信息返回<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566523985/hexo/44_rw8cgj.png" alt></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/23/web-%E6%B5%85%E8%B0%88jsp%E4%B8%8Eservlet/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java web--servlet学习</title>
      <link>http://www.qianjipeng.top/2019/08/22/servlet%E5%AD%A6%E4%B9%A0/</link>
      <guid>http://www.qianjipeng.top/2019/08/22/servlet%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Thu, 22 Aug 2019 14:44:37 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;接上篇，学习servlet基础。&lt;/p&gt;
&lt;h2 id=&quot;servlet是什么&quot;&gt;&lt;a href=&quot;#servlet是什么&quot; class=&quot;headerlink&quot; title=&quot;servlet是什么&quot;&gt;&lt;/a&gt;servlet是什么&lt;/h2&gt;&lt;p&gt;java servlet是运
        
      
      </description>
      
      <content:encoded><![CDATA[<p>接上篇，学习servlet基础。</p><h2 id="servlet是什么"><a href="#servlet是什么" class="headerlink" title="servlet是什么"></a>servlet是什么</h2><p>java servlet是运行在web服务器上的应用程序，实现动态页面的创建，作为来自web浏览器和其他http客户端请求和http服务器上的数据库或者应用程序之间的<strong>中间层</strong>。<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566486478/hexo/874710-20170214192940050-671180063_dpxpnk.png" alt="http请求和响应"><br>　　　　　　　　　　　　　　　　　　　　http请求和响应过程</p><h2 id="servlet架构"><a href="#servlet架构" class="headerlink" title="servlet架构"></a>servlet架构</h2><ul><li>架构<br><img src="https://www.runoob.com/wp-content/uploads/2014/07/servlet-arch.jpg" alt="架构"></li><li>tomcat与servlet<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566486469/hexo/874710-20170214204632894-1786729693_hjhji5.png" alt="tomcat">  <ul><li>这里可以知道，tomcat将浏览器发过来的http请求(http request)文本接收并解析，封装成httpServlet类型的request对象</li><li>tomcat服务器同时将要响应的信息封装成httpResponse类型的response对象，通过设置response的相关属性就可以控制输出到浏览器的内容，再将response交给tomcat，tomcat就会将其转换成要响应的文本格式返回给浏览器</li></ul></li></ul><h2 id="servlet任务"><a href="#servlet任务" class="headerlink" title="servlet任务"></a>servlet任务</h2><ul><li>读取客户端发送的显式数据，包括html表单，或者是applet或者用户定义程序的表单</li><li>读取客户端发送的隐式http请求，包括cookies等</li><li>处理数据并获得结果，可能会访问数据库调用web服务</li><li>发送显式的数据到客户端，可能是文档、图片等</li><li>发送隐式的http响应到客户端  </li></ul><h2 id="java-servlet包"><a href="#java-servlet包" class="headerlink" title="java servlet包"></a>java servlet包</h2><p>java servlet是运行在带有servlet解释器的web服务器(我用的是tomcat)上的java类。<br>通常需要<code>import javax.servlet.*</code>来导入包。<br>java servlet API 是servlet容器(tomcat为例)和servlet之间的接口，定义了各种servlet方法，和一些对象，其中主要是servletRequest和servletResponse对象比较重要。  </p><h2 id="编写servlet"><a href="#编写servlet" class="headerlink" title="编写servlet"></a>编写servlet</h2><p>编写servlet有两种方法：</p><ul><li>直接编写servlet类，实现相应的方法<br>这个方法需要编写完整的java类，比较复杂，而且容易出错。故我们采用第二种方法。</li><li>用IDE(我的是idea)新建myServlet<br>新建myServlet，默认会实现doGet()和doPost()方法，也可以根据自己的需要，实现其他方法，诸如：init()、service()、destory()  </li></ul><p>另外，要实现与jsp的交互，必须要配置<strong>web.xml</strong>文件，写入servlet、servlet-mapping等标签，除此之外，<strong>也可以在servlet类的添加注释(annoation)</strong>，例如：　<code>@WebServlet(urlPatterns = &quot;/signin&quot;, name = &quot;signin&quot;)</code>，这样就可以不用配置<strong>web.xml</strong>文件</p><h2 id="详解servlet原理"><a href="#详解servlet原理" class="headerlink" title="详解servlet原理"></a>详解servlet原理</h2><p><strong>1. servlet生命周期</strong>  </p><ul><li>servlet的生命周期始于servlet服务器启动时或者第一次请求该servlet，此时调用init()方法，初始化出一个servlet对象</li><li>servlet处理所有的客户端请求，执行service()方法</li><li>服务器关闭，执行destory()方法，servlet被销毁</li></ul><p><strong>2. servlet的service()方法</strong><br>这里有个问题，我们在编写servlet时，只写了doPost()和doGet()方法，并没有写service()方法，那么servlet是如何执行service()方法的呢？<br>public的service()方法，这是对外的公有方法，这里做了一个ServletRequest到httpServletRequest的转型<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566520802/hexo/11_bb7cxt.png" alt></p><p>内部的protected的方法，根据请求的方法<strong>method</strong>不同，调用不同的响应方式：<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566521046/hexo/22_jborni.png" alt></p><p>也就是说，service()方法一般情况下我们是不需要重写的，它已经包括的所有的推理机，我们只要重写相应需要的方法就行了，比如说doPost()、doGet()，这也是idea默认给我们重写的两个方法。<br><strong>3. servlet重要的对象</strong><br>servlet为我们创建了几个内置对象：</p><ul><li>servletCopnfig</li><li>servletContext</li><li>httpServletRequest</li><li>httpServletResponse</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/22/servlet%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C++对象模型--关于对象</title>
      <link>http://www.qianjipeng.top/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</link>
      <guid>http://www.qianjipeng.top/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</guid>
      <pubDate>Thu, 22 Aug 2019 01:39:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;为什么要写C++一栏的博客呢?其实是为了加深理解和敦促学习，我发现只要离开写博客，人就变得懒散起来，每天写的代码零零散散，C
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>为什么要写C++一栏的博客呢?其实是为了加深理解和敦促学习，我发现只要离开写博客，人就变得懒散起来，每天写的代码零零散散，C++这门课程是在大二上开的，上课也就水水过去了，老师上课其实也还挺好，无奈听不懂啊，听不懂就不想听啊。现在想想挺后悔的。<br><br>后来由于实验室需要，而且自己也意识到C++的重要性，于是便自学。(貌似我所有的编程语言都是自学的、除了大一的C)至于自学，我的做法是，找博客，一个一个知识点地去学，后来也勉强算是入门了把。<br>好记性不如烂笔头，于是还是记录下来比较好。</p><h3 id="关于入门"><a href="#关于入门" class="headerlink" title="关于入门"></a>关于入门</h3><p>入门书籍的选取太重要了。谁要是和你推荐诸如<em>21天学通C++</em>、<em>Visual C++ xxx</em>的，可以绝交了(滑稽)，我推荐<em>C++ primer</em>而不是<em>C++ primer plus</em>，不是带了个<em>plus</em>就是更牛x一点，相反，<em>plus</em>对于新入门的来说，讲的太过细致，有点晦涩，以至于你想放弃。搞清楚C++的大致框架后，可以读一读<em>C++沉思录</em>，这本书介绍的是一些C++思想，有助于你更好的理解。后期实战可以读一读<br><em>Effecitve C++</em>、<em>More Effective C++</em>，如果想深入了解C++底层机制的话，那么<em>深度探索C++对象模型</em>一定值得细细评味。   </p><h1 id="关于C-对象"><a href="#关于C-对象" class="headerlink" title="关于C++对象"></a>关于C++对象</h1><ol><li><p><strong>C++对象模式</strong><br>在C++中，有两种类数据成员：静态数据成员(static关键词修饰)和非静态数据成员(没有static关键词修饰)，三种类成员函数：static、non-static、virtual。<br>以下程序为例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    Point(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y);</span><br><span class="line">    <span class="keyword">virtual</span> ~Point();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">X</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Point point;</span><br></pre></td></tr></table></figure></li></ol><p>我创建了一个Point的对象，那么这个对象point的data member和funtion member是怎么布局呢?</p><ul><li><strong>简单对象模型</strong><br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482922/hexo/IMG_20190822_215545_xqr4z3.jpg" alt="简单对象模型"><br>这个模型是简单的一个模型，每个对象抽象成一些列的slots，每个slot对应一个成员，这样一来实现了member的对号入座。这样简化了编译器的设计复杂度，但是牺牲了效率和空间。<br>在这个模型下，<strong>members本身不在object中，而是指向members的指针存放在object中</strong>，避免了*”members有不同的数据类型，因而需要不同的储存空间”<em>。<br>如此，object中的member便是通过slots的索引值来索引的。<br>但是这个模型并**</em>没有***被C++所采用，不过这个观念被应用到了指向成员的指针(pointer-to-member)这一概念之中。</li><li><strong>表格驱动摸模型</strong><br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482837/hexo/0822_3_muhhsi.jpg" alt="表格驱动模型"><br>这个模型是把members划分为两类，datas放在data member table中，functions放在member function table中，object本身含有指向这两个表格的指针。data member table直接指向data本身，function member table是一系列的slots，每个slots指出一个member function。<br>很遗憾，这个模型也<strong><em>没有</em></strong>被采用。但是member funciton table这一观念却支持了virtual function的机制。</li><li><strong>C++对象模型</strong><br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482844/hexo/0822_2_jibhqp.jpg" alt="C++对象模型"><br>这是Stroustrup设计C++时采用的模型。在这个模型之下，所有的non-static members都被置于每一个class object之中，static data members则被存放在这个class中(原书说法是<del>存放在个别的class object之外</del>)，static和non-static function members也被存放在个别的class object之外。而virtual functions分两步处理:<ul><li>每一个class都会产生一系列指向virtual functions的指针，这些指针存放在一个叫<strong><em>virtual table</em></strong>(vtbl)的表格之中</li><li>每一个class object都会被”安排”一个指向这个class的<strong><em>vtbl</em></strong>的指针(<strong><em>vptr</em></strong>)，vptr的设置和重置由类的构造函数、拷贝构造函数、析构函数完成。(这里先不讨论)<br>每个class还会关联一个<strong><em>type info object</em></strong>,由vtbl指出来，通常放在vtbl的第一个slots的位置(<img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566482845/hexo/0822_1_fniz8u.jpg" alt="虚函数的实现机制">)。</li></ul></li></ul><ol start="2"><li><p><strong>关键词的差异</strong>(class和struct)<br>struct即结构，class即我们所说的类。C++为了兼容C，仍然保留了C的struct关键字，作为一种数据类型。</p><ul><li><p><strong>区别(简单理解)</strong></p><ul><li><p>struct默认访问限制和继承方式是<strong>public</strong>，并且C++中struct类型中也可以拥有构造函数<br>这点我在代码中有遇到过，一般用到struct的是一些比较操作，用于<strong>STL</strong>容器的<em>sort()</em>函数。如下示例程序:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> lhs, <span class="keyword">int</span> rhs)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> lhs &gt; rhs;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>class默认访问限制是<strong>private</strong></p></li></ul></li><li><p><strong>何时该用struct</strong><br>我觉得都可以，在C++中可以将两者等同，如果你愿意使用struct的话。</p></li></ul></li><li><p><strong>对象的差异</strong><br>C++程序设计模型直接支持以下三种程序设计范式： </p><ul><li><strong>程序模型(procedural model)</strong></li><li><strong>抽象数据类型模式(abstract data type model)</strong>  </li><li><strong>面向对象模型(object-oriented model)</strong>　</li></ul></li><li><p><strong>杂谈</strong></p><ul><li>关于指针<br>　　<strong><em>一个指针或引用，无论其指向哪种数据类型，其本身所占内存大小是固定的。</em></strong><br>指针的类型，“指向不同的类型的指针”之间的差异，不在于指针的表示方法不同，也不在于指针的内容(地址)的不同，<strong><em>而是在于由这个指针所寻址出来的object类型的不同</em></strong>。也就是说，指针类型会让编译器以相应的方式去解释特定地址中的内容及大小。<br>　　一个指向地址100０的int类型的指针，在32位机器上，其所占的地址空间为1000~1003，因为32位机器上int类型所占４个字节(byte)。<br>　　那么一个指向地址1000的<strong>void*</strong>类型的指针呢？我们不知道，这也是为什么一个void*的类型的指针只能持有一个地址，不能操作其所指的对象的原因。<br>　　这里可以学习一下C++的四种<strong>cast</strong>。其本质是，<strong>只影响被指出的内存的大小和内容，不改变指针所指向的真正地址。</strong><br>　　日后再补充。</li></ul></li></ol><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>C++真是一门<strong>magic</strong>的语言，究其本质，晦涩而又有点魅力，加油吧。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/22/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B--%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo配置gitalk评论插件</title>
      <link>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
      <pubDate>Tue, 20 Aug 2019 13:13:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;之前用的一直是来比力，不知为何加载很慢，而且社区版没有邮件登录的选项，比较不方便，于是乎，改成了gitalk，基于github issue的评论插件。&lt;br&gt;原理是，创建一个用来存放comment的repo，将所有的comment都放在特定的issue下。&lt;/p&gt;
&lt;h1 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>之前用的一直是来比力，不知为何加载很慢，而且社区版没有邮件登录的选项，比较不方便，于是乎，改成了gitalk，基于github issue的评论插件。<br>原理是，创建一个用来存放comment的repo，将所有的comment都放在特定的issue下。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">官方repo</a></p><h1 id="创建OAuth-application"><a href="#创建OAuth-application" class="headerlink" title="创建OAuth application"></a>创建OAuth application</h1><p>创建一个github OAuth application，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里</a>，点进去如下：<br><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566481819/hexo/1_px6klt.png" alt="图片1"></p><ul><li>Application name: 随便写</li><li>Homepage url: 写你的博客主页url</li><li>Application description: 应用的描述</li><li>Authorization callback url: 回调url，写你的博客url <del>如果你有自己的custom domain，写自己的域名</del></li></ul><h1 id="创建一个github-repo"><a href="#创建一个github-repo" class="headerlink" title="创建一个github repo"></a>创建一个github repo</h1><p>这个很简单，一个空的public的repo就行，先创在这。<br><del>私有仓库不知道行不行，貌似更加隐私</del></p><h1 id="配置hexo配置文件"><a href="#配置hexo配置文件" class="headerlink" title="配置hexo配置文件"></a>配置hexo配置文件</h1><p><em>以next主题为例，其他主题可能有所差别</em></p><ol><li><p>新建<em>gittalk.swig</em>文件</p><ul><li>路径: <strong>themes/next/layout/_third-party/comments/</strong></li><li>文件内容:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">   <span class="comment">&lt;!-- gitalk 评论系统 2019.8.19 --&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">const gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="xml">  clientID: '</span><span class="template-variable">&#123;&#123;theme.gitalk.clientID&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  clientSecret: '</span><span class="template-variable">&#123;&#123;theme.gitalk.clientSecret&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  repo: '</span><span class="template-variable">&#123;&#123;theme.gitalk.repo&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  owner: '</span><span class="template-variable">&#123;&#123;theme.gitalk.githubID&#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">  admin: ['</span><span class="template-variable">&#123;&#123;theme.gitalk.adminUser&#125;&#125;</span><span class="xml">'],// 注意使用列表</span></span><br><span class="line"><span class="xml">  id: location.pathname, // 依据官方readme,这里可能会有bug, post lable长度超过50会有报错</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改<em>index.swig</em>文件</p><ul><li>路径: <strong>themes/next/layout/_third-party/comments/</strong></li><li>修改内容:<br>在文件最后一行追加下列语句:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'gitalk.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>修改<em>comment.swig</em>文件</p><ul><li>路径: <strong>/themes/next/layout/_partials/</strong></li><li>修改内容:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.valine.appid and theme.valine.appkey %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>// 在这一行的下一行开始加</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">elseif</span> theme.gitalk.enable %&#125;</span><span class="xml">// 加入以下三行</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>修改主题配置文件<em>_config.yml</em></p><ol><li>文件路径: <strong>/themes/</strong></li><li>修改内容:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  githubID:</span> <span class="string">github用户名</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">用来存放comment的repo</span></span><br><span class="line"><span class="attr">  clientID:</span> <span class="string">你的clientID</span></span><br><span class="line"><span class="attr">  clientSecret:</span> <span class="string">你的clientSecret</span></span><br><span class="line"><span class="attr">  adminUser:</span> <span class="string">admin用户，只有admin才可以init</span> <span class="string">issue</span></span><br><span class="line"><span class="attr">  perPage:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">  pagerDirection:</span> <span class="string">last</span></span><br><span class="line"><span class="attr">  createIssueManually:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  distractionFreeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo d</code></p><h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p><img src="https://res.cloudinary.com/hexo-mokeeqian/image/upload/v1566481823/hexo/2_oppyfh.png" alt="图片2"></p><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><ul><li><em>comment.swig</em>文件配置错误，注意所加代码的位置</li><li><em>OAuth application</em>创建有错误，按以上做法即可</li><li>粗心、大小写、配置文件写错</li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>不知道为什么在hexo中markdown会解析奇怪的东西，比如说我写了`&lt;!–￼4–&gt;`这个东西，在<code>hexo g</code>的过程中，会报错，很奇怪的错误。<br>后来把这个post删除了，再生成就没有问题了，所以说，可以确定这个问题是出在我刚刚写的<code>.md</code>文件内容导致的。</p><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ul><li>删除所有代码块，错误消失，还原所有内容</li><li>删除`&lt;!–￼5–&gt;`这个内容，错误消失<br>至此，可以知道，问题就出在`&lt;!–￼6–&gt;`这段内容里，后来改成```包含的代码块就没有问题。<br>所以说，遇到<code>\{\%</code>这样的字符需要转义，否则会被md解析。<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2>这里还要深入了解一下md的解析原理</li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/hexo%E9%85%8D%E7%BD%AEgitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java web--学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Mon, 19 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &amp;gt; C &amp;gt; JAVA &amp;gt; PHP &amp;gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说：　我是做C++的。<br>可是，我们真的懂C++了吗？<br>这要看我们对<em>懂</em>的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: <em>你永远不知道C++编译器背着你干了哪些事</em>。这句话其实我很认同。<br>例如:</p><ul><li>默认构造函数在什么情况下编译器会为我们提供？<ul><li>答案是：　在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。</li></ul></li><li>C++的虚函数机制是什么样的？<ul><li>就我所了解的，虚函数机制是靠虚函数表<em>VTable</em>和虚函数指针<em>VPtr</em>来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">深度探索C++对象模型</a>)</li></ul></li></ul><p>C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。<br>至于为什么要学习前端知识呢？</p><ul><li>B/S模式向C/S模式转变的趋向<br>  当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现</li><li>增加技术栈<br>  俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。</li><li>放弃C++，转向java?<br>  真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。</li></ul><h1 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h1><p>目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
