<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Tue, 20 Aug 2019 07:20:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>java web 学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Mon, 19 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &amp;gt; C &amp;gt; JAVA &amp;gt; PHP &amp;gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说：　我是做C++的。<br>可是，我们真的懂C++了吗？<br>这要看我们对<em>懂</em>的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: <em>你永远不知道C++编译器背着你干了哪些事</em>。这句话其实我很认同。<br>例如:</p><ul><li>默认构造函数在什么情况下编译器会为我们提供？<ul><li>答案是：　在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。</li></ul></li><li>C++的虚函数机制是什么样的？<ul><li>就我所了解的，虚函数机制是靠虚函数表<em>VTable</em>和虚函数指针<em>VPtr</em>来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">深度探索C++对象模型</a>)</li></ul></li></ul><p>C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。<br>至于为什么要学习前端知识呢？</p><ul><li>B/S模式向C/S模式转变的趋向<br>  当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现</li><li>增加技术栈<br>  俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。</li><li>放弃C++，转向java?<br>  真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。</li></ul><h1 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h1><p>目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之进制转换</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sat, 17 Aug 2019 13:08:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:&lt;br&gt; 栈是一种数据结构，一种特殊的线性表&lt;/li&gt;
&lt;li&gt;特点:&lt;ul&gt;
&lt;li&gt;只允许在一端进行插
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ul><li>定义:<br> 栈是一种数据结构，一种特殊的线性表</li><li>特点:<ul><li>只允许在一端进行插入操作，另一端进行删除操作</li><li>元素满足先进后出原则，即先入栈的元素最后出栈</li></ul></li></ul><h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><p>算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可<br>上代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack, *pseqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">pseqstack <span class="title">init_stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pseqstack s = (pseqstack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(seqstack));</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        s -&gt; top = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top &gt; maxsize <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"入栈失败!\n"</span>);</span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s -&gt; top ++;        <span class="comment">/*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!)　*/</span></span><br><span class="line">        s -&gt; data[s -&gt; top] = e;</span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *x = s -&gt; data[s -&gt; top];</span><br><span class="line">        s -&gt; top --;</span><br><span class="line">        <span class="keyword">return</span> *x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*　输出栈的每一个元素　*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_each</span><span class="params">(pseqstack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top0 = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(top0 != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s-&gt;data[top0]);</span><br><span class="line">        top0 --;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进制转换，x是十进制de 数，y 是待转换进制*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(pseqstack s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">/* 　整除后不等于０，　执行循环 */</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        push_stack(s, (x%y));</span><br><span class="line">        x = x / y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", s-&gt;top);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*　加上输出功能　*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(s-&gt; top != <span class="number">-1</span>)&#123;</span><br><span class="line">        pop_stack(s, &amp;res);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">// 十进制数</span></span><br><span class="line">    <span class="keyword">int</span> scale;      <span class="comment">// 要转换的进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数字，进制数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;scale);</span><br><span class="line"></span><br><span class="line">    pseqstack S = init_stack();</span><br><span class="line">    transfer(S, num, scale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//print_each(S);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之约瑟夫问题的求解</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</guid>
      <pubDate>Sat, 17 Aug 2019 13:00:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a></p><h1 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h1><ul><li>顺序表</li><li>循环链表(不带头节点)<br>值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘</li></ul><ol><li>顺序表</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">约瑟夫问题的顺序表实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">date: 2019-3-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList, *PSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">PSeqList <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PSeqList L;</span><br><span class="line">    L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (L)&#123;</span><br><span class="line">        L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;       <span class="comment">/*　返回顺序表指针　*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span> || L-&gt;length &gt;= maxsize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">for</span> (j=L-&gt;length; j&gt;=i; j--)&#123;</span><br><span class="line">            L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];          <span class="comment">/*　依次往后移动　*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除位置不合法\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">// 保存将被删除的元素</span></span><br><span class="line">tmp = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i ; j &lt;= L-&gt;length; j++ )&#123;<span class="comment">// 从第I 个开始往前移动一位</span></span><br><span class="line">L-&gt;data[j<span class="number">-1</span>] = L-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length --;</span><br><span class="line"><span class="comment">//printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数 s 开始， 数到  m </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yusefu_SeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s1;</span><br><span class="line">    <span class="keyword">int</span> w;      <span class="comment">// 保存删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>( L-&gt; length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s1 = s <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次出去</span></span><br><span class="line">    <span class="keyword">for</span> (i = L-&gt;length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 关键步骤　*/</span></span><br><span class="line">        s1 = (s1+m<span class="number">-1</span>) % i;</span><br><span class="line">        w = L -&gt; data[s1];      <span class="comment">// 下标 s1, 是第s1+1 个元素！！！</span></span><br><span class="line">        DelSeqList(L, s1+<span class="number">1</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出列: %d\n"</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">// 序列长度</span></span><br><span class="line">    <span class="keyword">int</span> num[maxsize];       <span class="comment">// 用来存输入的数</span></span><br><span class="line">    PSeqList L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入序列元素个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入约瑟夫序列(空格分开): "</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[l]);</span><br><span class="line">        InSeqList(L, l+<span class="number">1</span>, num[l]);</span><br><span class="line">        <span class="comment">//printf(" %d ", num[l]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yusefu_SeqList(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.循环链表</p><p>这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:<br>1.　先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空<br>2.　接着用个循环，创建剩下的单个节点，同样只有数据域<br>3.　再把这些节点连接起来</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  约瑟夫问题的循环链表实现</span></span><br><span class="line"><span class="comment">* author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">* date: 2019-3-24</span></span><br><span class="line"><span class="comment">* version: 2.0(1.0 aborted for too complexed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* node definition　*/</span></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;linklist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　</span></span><br><span class="line"><span class="comment">\brief: crate the linklist and do insert, return the first node's ptr　</span></span><br><span class="line"><span class="comment">\param: n -&gt;&gt; the size of the serises</span></span><br><span class="line"><span class="comment">\return: the first node's ptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creat the node in range(1, n)*/</span></span><br><span class="line">linklist * initLink(int n)&#123;</span><br><span class="line">    linklist * head = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the first node initionalized (not head node)*/</span></span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span><span class="keyword">data</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span>next = NULL;        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a ptr to move through the list */</span></span><br><span class="line">    linklist * tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we satrt with the second node for a loop */</span></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        linklist * body = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* creat and init single node */</span></span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> <span class="keyword">data</span> = i;</span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> next = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* connect the single nodes together */</span></span><br><span class="line">        <span class="function"><span class="title">tmp</span> -&gt;</span> next = body;</span><br><span class="line">        <span class="function"><span class="title">tmp</span> = tmp -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", tmp-&gt;data);</span></span><br><span class="line">    <span class="comment">/* now tmp is just the last node */</span></span><br><span class="line">    <span class="function"><span class="title">tmp</span> -&gt;</span> next = head;     <span class="comment">/*connect the head and the rear */</span></span><br><span class="line">    return head;</span><br><span class="line">    <span class="comment">/* by this method, we created a loop linklist */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void yusefu(linklist * head,int k,int m)&#123;</span><br><span class="line">    linklist * tail = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (tail -&gt;</span> next != head) &#123;</span><br><span class="line">        <span class="function"><span class="title">tail</span> = tail -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linklist * p = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到编号为k的人(或者是第几个开始，可以改)</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> <span class="keyword">data</span> != k) &#123;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> next != p) &#123;</span><br><span class="line">        <span class="comment">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            tail = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p -&gt;</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">tail</span>-&gt;</span><span class="function"><span class="title">next</span>=p-&gt;</span>next;<span class="comment">//从链表上将p结点去除</span></span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d \t",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        free(p);</span><br><span class="line">        <span class="function"><span class="title">p</span> = tail -&gt;</span> next;<span class="comment">//继续使用p指针指向出列编号的下一个编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the last one */</span></span><br><span class="line">    <span class="function"><span class="title">printf</span>("%d \n",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    linklist * head=initLink(<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">    yusefu(head, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之逆波兰式</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</guid>
      <pubDate>Sat, 17 Aug 2019 12:40:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;学的数据结构，感觉掌握的不牢固，于是实现了一个demo&lt;/p&gt;
&lt;h1 id=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;a href=&quot;#中缀表达式转换为后缀表达式并求值&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;/a&gt;中缀表
        
      
      </description>
      
      <content:encoded><![CDATA[<p>学的数据结构，感觉掌握的不牢固，于是实现了一个demo</p><h1 id="中缀表达式转换为后缀表达式并求值"><a href="#中缀表达式转换为后缀表达式并求值" class="headerlink" title="中缀表达式转换为后缀表达式并求值"></a>中缀表达式转换为后缀表达式并求值</h1><ol><li>算法思想:<br>创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，<br>遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，<br>直到表达式末尾, 最后一个入栈的就是最终结果</li><li>先实现求值这一步吧，已知后缀表达式 </li><li>转换这一环节待更新…</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[maxsize];</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">// top 指明当前栈顶元素的位置</span></span><br><span class="line">&#125; SeqStack, *PSeqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序栈</span></span><br><span class="line"><span class="function">PSeqStack <span class="title">Init_SeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">PSeqStack S;</span><br><span class="line">S = (PSeqStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line"><span class="comment">//printf("%p\n", S);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S)</span><br><span class="line">S -&gt; top = <span class="number">-1</span>;<span class="comment">// top 设为-1 (认为设定),表示空</span></span><br><span class="line"><span class="keyword">return</span> S;<span class="comment">// 返回指向顺序栈的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(PSeqStack S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 没有元素，空栈</span></span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 1 表示为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_SeqStack</span><span class="params">(PSeqStack S, datatype x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈满不能再入栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 返回 0 表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">S -&gt; top ++;</span><br><span class="line">S -&gt; data[S -&gt; top] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈,保存栈顶元素于*x中，并删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能出栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 0 表示出栈失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line">S -&gt; top --;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能取top元素\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，参数为待销毁顺序栈的指针地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory_SeqStack</span><span class="params">(PSeqStack *S)</span></span>&#123;</span><br><span class="line"><span class="comment">// *S 二级指针</span></span><br><span class="line"><span class="keyword">if</span> (*S)</span><br><span class="line"><span class="built_in">free</span> (*S);</span><br><span class="line"></span><br><span class="line">*S = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　判断是否是操作数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsNum</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> *A)</span></span>&#123;</span><br><span class="line">PSeqStack s = Init_SeqStack();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> a, b, c;    <span class="comment">// a,b 上一次，上上一次入栈的元素，Ｃ是临时变量</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">ch = *A ++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们人为设置，在字符数组末尾加一个'#', 作为结束符　*/</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (IsNum(ch))&#123;</span><br><span class="line">Push_SeqStack(s, ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这里注意，　先进后出　*/</span></span><br><span class="line">Pop_SeqStack(s, &amp;b);</span><br><span class="line">Pop_SeqStack(s, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        c = a+b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        c = a-b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        c = a*b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        c = a/b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时结果入栈　*/</span></span><br><span class="line">Push_SeqStack(s, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch = *A ++;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetTop_SeqStack(s, &amp;result);</span><br><span class="line">Destory_SeqStack(&amp;s);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"计算结果: %d\n"</span>,calculate(num));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有<em>std::sort()</em>函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…<br>我学数据结构最大的收获就是：</p><ul><li>学会用计算机的思维去思考问题</li><li>学会如何调试程序</li><li>学会耐心做一件事<a href>课程设计</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux系统下文件乱码问题解决</title>
      <link>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</guid>
      <pubDate>Sat, 17 Aug 2019 12:28:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是用到了Linux的 &lt;a href=&quot;https://baike.baidu.com/ite
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。</p><ul><li>主要是用到了Linux的 <a href="https://baike.baidu.com/item/iconv/524310" target="_blank" rel="noopener">iconv</a> 命令</li></ul><h2 id="Step-one-获取当前文件编码"><a href="#Step-one-获取当前文件编码" class="headerlink" title="Step one　获取当前文件编码"></a>Step one　获取当前文件编码</h2><p>我当前文件是 <em>Student.cpp</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file Student.cpp</span><br></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.cpp: C <span class="built_in">source</span>, UTF-8 Unicode text</span><br></pre></td></tr></table></figure><p>是个万国码</p><h2 id="Step-Two-获取本机编码"><a href="#Step-Two-获取本机编码" class="headerlink" title="Step Two 获取本机编码"></a>Step Two 获取本机编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure><p>不知道为什么我这里报错，没有这个文件???<br>不过Linux一般都是UTF-8</p><h2 id="Step-Three-修改文件编码"><a href="#Step-Three-修改文件编码" class="headerlink" title="Step Three 修改文件编码"></a>Step Three 修改文件编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f GBK -t UTF-8  Student.cpp -o  Student0.cpp</span><br></pre></td></tr></table></figure><p>这里<em>Student.cpp</em>是原来的文件，<em>Student0.cpp</em>是我修改后的文件。</p><p>改后打开文件就没有乱码问题了</p><h3 id="这里有个问题，如果有多个文件不能在一起转化"><a href="#这里有个问题，如果有多个文件不能在一起转化" class="headerlink" title="这里有个问题，如果有多个文件不能在一起转化"></a>这里有个问题，如果有多个文件不能在一起转化</h3><p>比如我有两个文件，<em>Student.cpp</em> 和 <em>Student.h</em> 必须要执行两次命令，尴尬。<br>后来想起来可以用通配符，文件名不改变，即可</p><ul><li>注意： 通配符要慎用!</li><li>最后的最后: 写了个小项目，放在了仓库中<a href="https://github.com/mokeeqian/demo-projects/tree/master/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">编码转换</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>和小薇薇的700天</title>
      <link>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</link>
      <guid>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</guid>
      <pubDate>Fri, 16 Aug 2019 13:47:53 GMT</pubDate>
      <description>
      
        Encrypted passage, enter password to read.
      
      </description>
      
      <content:encoded><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Encrypted passage, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
