<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Tue, 20 Aug 2019 07:20:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>java web 学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Mon, 19 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &amp;gt; C &amp;gt; JAVA &amp;gt; PHP &amp;gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说：　我是做C++的。<br>可是，我们真的懂C++了吗？<br>这要看我们对<em>懂</em>的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: <em>你永远不知道C++编译器背着你干了哪些事</em>。这句话其实我很认同。<br>例如:</p><ul><li>默认构造函数在什么情况下编译器会为我们提供？<ul><li>答案是：　在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。</li></ul></li><li>C++的虚函数机制是什么样的？<ul><li>就我所了解的，虚函数机制是靠虚函数表<em>VTable</em>和虚函数指针<em>VPtr</em>来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">深度探索C++对象模型</a>)</li></ul></li></ul><p>C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。<br>至于为什么要学习前端知识呢？</p><ul><li>B/S模式向C/S模式转变的趋向<br>  当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现</li><li>增加技术栈<br>  俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。</li><li>放弃C++，转向java?<br>  真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。</li></ul><h1 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h1><p>目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之进制转换</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sat, 17 Aug 2019 13:08:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:&lt;br&gt; 栈是一种数据结构，一种特殊的线性表&lt;/li&gt;
&lt;li&gt;特点:&lt;ul&gt;
&lt;li&gt;只允许在一端进行插
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ul><li>定义:<br> 栈是一种数据结构，一种特殊的线性表</li><li>特点:<ul><li>只允许在一端进行插入操作，另一端进行删除操作</li><li>元素满足先进后出原则，即先入栈的元素最后出栈</li></ul></li></ul><h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><p>算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可<br>上代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack, *pseqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">pseqstack <span class="title">init_stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pseqstack s = (pseqstack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(seqstack));</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        s -&gt; top = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top &gt; maxsize <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"入栈失败!\n"</span>);</span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s -&gt; top ++;        <span class="comment">/*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!)　*/</span></span><br><span class="line">        s -&gt; data[s -&gt; top] = e;</span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *x = s -&gt; data[s -&gt; top];</span><br><span class="line">        s -&gt; top --;</span><br><span class="line">        <span class="keyword">return</span> *x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*　输出栈的每一个元素　*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_each</span><span class="params">(pseqstack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top0 = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(top0 != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s-&gt;data[top0]);</span><br><span class="line">        top0 --;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进制转换，x是十进制de 数，y 是待转换进制*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(pseqstack s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">/* 　整除后不等于０，　执行循环 */</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        push_stack(s, (x%y));</span><br><span class="line">        x = x / y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", s-&gt;top);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*　加上输出功能　*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(s-&gt; top != <span class="number">-1</span>)&#123;</span><br><span class="line">        pop_stack(s, &amp;res);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">// 十进制数</span></span><br><span class="line">    <span class="keyword">int</span> scale;      <span class="comment">// 要转换的进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数字，进制数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;scale);</span><br><span class="line"></span><br><span class="line">    pseqstack S = init_stack();</span><br><span class="line">    transfer(S, num, scale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//print_each(S);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之约瑟夫问题的求解</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</guid>
      <pubDate>Sat, 17 Aug 2019 13:00:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a></p><h1 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h1><ul><li>顺序表</li><li>循环链表(不带头节点)<br>值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘</li></ul><ol><li>顺序表</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">约瑟夫问题的顺序表实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">date: 2019-3-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList, *PSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">PSeqList <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PSeqList L;</span><br><span class="line">    L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (L)&#123;</span><br><span class="line">        L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;       <span class="comment">/*　返回顺序表指针　*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span> || L-&gt;length &gt;= maxsize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">for</span> (j=L-&gt;length; j&gt;=i; j--)&#123;</span><br><span class="line">            L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];          <span class="comment">/*　依次往后移动　*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除位置不合法\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">// 保存将被删除的元素</span></span><br><span class="line">tmp = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i ; j &lt;= L-&gt;length; j++ )&#123;<span class="comment">// 从第I 个开始往前移动一位</span></span><br><span class="line">L-&gt;data[j<span class="number">-1</span>] = L-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length --;</span><br><span class="line"><span class="comment">//printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数 s 开始， 数到  m </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yusefu_SeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s1;</span><br><span class="line">    <span class="keyword">int</span> w;      <span class="comment">// 保存删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>( L-&gt; length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s1 = s <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次出去</span></span><br><span class="line">    <span class="keyword">for</span> (i = L-&gt;length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 关键步骤　*/</span></span><br><span class="line">        s1 = (s1+m<span class="number">-1</span>) % i;</span><br><span class="line">        w = L -&gt; data[s1];      <span class="comment">// 下标 s1, 是第s1+1 个元素！！！</span></span><br><span class="line">        DelSeqList(L, s1+<span class="number">1</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出列: %d\n"</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">// 序列长度</span></span><br><span class="line">    <span class="keyword">int</span> num[maxsize];       <span class="comment">// 用来存输入的数</span></span><br><span class="line">    PSeqList L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入序列元素个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入约瑟夫序列(空格分开): "</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[l]);</span><br><span class="line">        InSeqList(L, l+<span class="number">1</span>, num[l]);</span><br><span class="line">        <span class="comment">//printf(" %d ", num[l]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yusefu_SeqList(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.循环链表</p><p>这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:<br>1.　先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空<br>2.　接着用个循环，创建剩下的单个节点，同样只有数据域<br>3.　再把这些节点连接起来</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  约瑟夫问题的循环链表实现</span></span><br><span class="line"><span class="comment">* author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">* date: 2019-3-24</span></span><br><span class="line"><span class="comment">* version: 2.0(1.0 aborted for too complexed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* node definition　*/</span></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;linklist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　</span></span><br><span class="line"><span class="comment">\brief: crate the linklist and do insert, return the first node's ptr　</span></span><br><span class="line"><span class="comment">\param: n -&gt;&gt; the size of the serises</span></span><br><span class="line"><span class="comment">\return: the first node's ptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creat the node in range(1, n)*/</span></span><br><span class="line">linklist * initLink(int n)&#123;</span><br><span class="line">    linklist * head = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the first node initionalized (not head node)*/</span></span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span><span class="keyword">data</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span>next = NULL;        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a ptr to move through the list */</span></span><br><span class="line">    linklist * tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we satrt with the second node for a loop */</span></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        linklist * body = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* creat and init single node */</span></span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> <span class="keyword">data</span> = i;</span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> next = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* connect the single nodes together */</span></span><br><span class="line">        <span class="function"><span class="title">tmp</span> -&gt;</span> next = body;</span><br><span class="line">        <span class="function"><span class="title">tmp</span> = tmp -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", tmp-&gt;data);</span></span><br><span class="line">    <span class="comment">/* now tmp is just the last node */</span></span><br><span class="line">    <span class="function"><span class="title">tmp</span> -&gt;</span> next = head;     <span class="comment">/*connect the head and the rear */</span></span><br><span class="line">    return head;</span><br><span class="line">    <span class="comment">/* by this method, we created a loop linklist */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void yusefu(linklist * head,int k,int m)&#123;</span><br><span class="line">    linklist * tail = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (tail -&gt;</span> next != head) &#123;</span><br><span class="line">        <span class="function"><span class="title">tail</span> = tail -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linklist * p = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到编号为k的人(或者是第几个开始，可以改)</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> <span class="keyword">data</span> != k) &#123;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> next != p) &#123;</span><br><span class="line">        <span class="comment">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            tail = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p -&gt;</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">tail</span>-&gt;</span><span class="function"><span class="title">next</span>=p-&gt;</span>next;<span class="comment">//从链表上将p结点去除</span></span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d \t",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        free(p);</span><br><span class="line">        <span class="function"><span class="title">p</span> = tail -&gt;</span> next;<span class="comment">//继续使用p指针指向出列编号的下一个编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the last one */</span></span><br><span class="line">    <span class="function"><span class="title">printf</span>("%d \n",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    linklist * head=initLink(<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">    yusefu(head, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之逆波兰式</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</guid>
      <pubDate>Sat, 17 Aug 2019 12:40:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;学的数据结构，感觉掌握的不牢固，于是实现了一个demo&lt;/p&gt;
&lt;h1 id=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;a href=&quot;#中缀表达式转换为后缀表达式并求值&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;/a&gt;中缀表
        
      
      </description>
      
      <content:encoded><![CDATA[<p>学的数据结构，感觉掌握的不牢固，于是实现了一个demo</p><h1 id="中缀表达式转换为后缀表达式并求值"><a href="#中缀表达式转换为后缀表达式并求值" class="headerlink" title="中缀表达式转换为后缀表达式并求值"></a>中缀表达式转换为后缀表达式并求值</h1><ol><li>算法思想:<br>创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，<br>遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，<br>直到表达式末尾, 最后一个入栈的就是最终结果</li><li>先实现求值这一步吧，已知后缀表达式 </li><li>转换这一环节待更新…</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[maxsize];</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">// top 指明当前栈顶元素的位置</span></span><br><span class="line">&#125; SeqStack, *PSeqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序栈</span></span><br><span class="line"><span class="function">PSeqStack <span class="title">Init_SeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">PSeqStack S;</span><br><span class="line">S = (PSeqStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line"><span class="comment">//printf("%p\n", S);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S)</span><br><span class="line">S -&gt; top = <span class="number">-1</span>;<span class="comment">// top 设为-1 (认为设定),表示空</span></span><br><span class="line"><span class="keyword">return</span> S;<span class="comment">// 返回指向顺序栈的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(PSeqStack S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 没有元素，空栈</span></span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 1 表示为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_SeqStack</span><span class="params">(PSeqStack S, datatype x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈满不能再入栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 返回 0 表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">S -&gt; top ++;</span><br><span class="line">S -&gt; data[S -&gt; top] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈,保存栈顶元素于*x中，并删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能出栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 0 表示出栈失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line">S -&gt; top --;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能取top元素\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，参数为待销毁顺序栈的指针地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory_SeqStack</span><span class="params">(PSeqStack *S)</span></span>&#123;</span><br><span class="line"><span class="comment">// *S 二级指针</span></span><br><span class="line"><span class="keyword">if</span> (*S)</span><br><span class="line"><span class="built_in">free</span> (*S);</span><br><span class="line"></span><br><span class="line">*S = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　判断是否是操作数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsNum</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> *A)</span></span>&#123;</span><br><span class="line">PSeqStack s = Init_SeqStack();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> a, b, c;    <span class="comment">// a,b 上一次，上上一次入栈的元素，Ｃ是临时变量</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">ch = *A ++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们人为设置，在字符数组末尾加一个'#', 作为结束符　*/</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (IsNum(ch))&#123;</span><br><span class="line">Push_SeqStack(s, ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这里注意，　先进后出　*/</span></span><br><span class="line">Pop_SeqStack(s, &amp;b);</span><br><span class="line">Pop_SeqStack(s, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        c = a+b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        c = a-b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        c = a*b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        c = a/b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时结果入栈　*/</span></span><br><span class="line">Push_SeqStack(s, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch = *A ++;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetTop_SeqStack(s, &amp;result);</span><br><span class="line">Destory_SeqStack(&amp;s);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"计算结果: %d\n"</span>,calculate(num));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有<em>std::sort()</em>函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…<br>我学数据结构最大的收获就是：</p><ul><li>学会用计算机的思维去思考问题</li><li>学会如何调试程序</li><li>学会耐心做一件事<a href>课程设计</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux系统下文件乱码问题解决</title>
      <link>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</guid>
      <pubDate>Sat, 17 Aug 2019 12:28:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是用到了Linux的 &lt;a href=&quot;https://baike.baidu.com/ite
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。</p><ul><li>主要是用到了Linux的 <a href="https://baike.baidu.com/item/iconv/524310" target="_blank" rel="noopener">iconv</a> 命令</li></ul><h2 id="Step-one-获取当前文件编码"><a href="#Step-one-获取当前文件编码" class="headerlink" title="Step one　获取当前文件编码"></a>Step one　获取当前文件编码</h2><p>我当前文件是 <em>Student.cpp</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file Student.cpp</span><br></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.cpp: C <span class="built_in">source</span>, UTF-8 Unicode text</span><br></pre></td></tr></table></figure><p>是个万国码</p><h2 id="Step-Two-获取本机编码"><a href="#Step-Two-获取本机编码" class="headerlink" title="Step Two 获取本机编码"></a>Step Two 获取本机编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure><p>不知道为什么我这里报错，没有这个文件???<br>不过Linux一般都是UTF-8</p><h2 id="Step-Three-修改文件编码"><a href="#Step-Three-修改文件编码" class="headerlink" title="Step Three 修改文件编码"></a>Step Three 修改文件编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f GBK -t UTF-8  Student.cpp -o  Student0.cpp</span><br></pre></td></tr></table></figure><p>这里<em>Student.cpp</em>是原来的文件，<em>Student0.cpp</em>是我修改后的文件。</p><p>改后打开文件就没有乱码问题了</p><h3 id="这里有个问题，如果有多个文件不能在一起转化"><a href="#这里有个问题，如果有多个文件不能在一起转化" class="headerlink" title="这里有个问题，如果有多个文件不能在一起转化"></a>这里有个问题，如果有多个文件不能在一起转化</h3><p>比如我有两个文件，<em>Student.cpp</em> 和 <em>Student.h</em> 必须要执行两次命令，尴尬。<br>后来想起来可以用通配符，文件名不改变，即可</p><ul><li>注意： 通配符要慎用!</li><li>最后的最后: 写了个小项目，放在了仓库中<a href="https://github.com/mokeeqian/demo-projects/tree/master/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">编码转换</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>和小薇薇的700天</title>
      <link>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</link>
      <guid>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</guid>
      <pubDate>Fri, 16 Aug 2019 13:47:53 GMT</pubDate>
      <description>
      
        Encrypted passage, enter password to read.
      
      </description>
      
      <content:encoded><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Encrypted passage, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
