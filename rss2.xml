<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mokeeqian&#39;s Blog</title>
    <link>http://www.qianjipeng.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Welcome to mokeeqian&#39;s blog</description>
    <pubDate>Tue, 20 Aug 2019 07:20:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>java web 学习开篇</title>
      <link>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</link>
      <guid>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/</guid>
      <pubDate>Mon, 19 Aug 2019 16:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &amp;gt; C &amp;gt; JAVA &amp;gt; PHP &amp;gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>以前其实挺看不上前端coder的(该死的程序员鄙视链: C++ &gt; C &gt; JAVA &gt; PHP &gt; HTML …)，究其原因，我个人认为，做C++的，以后可很自豪的说：　我是做C++的。<br>可是，我们真的懂C++了吗？<br>这要看我们对<em>懂</em>的定义了，你要说我会用C++开发一个坦克大战，我会用C++开发一个管理系统，我会用C++，我懂C++了。这样其实也没错，可是C++这门特殊的语言，它所表现的并不只是面向对象的特性。业界有句话说的C++: <em>你永远不知道C++编译器背着你干了哪些事</em>。这句话其实我很认同。<br>例如:</p><ul><li>默认构造函数在什么情况下编译器会为我们提供？<ul><li>答案是：　在程序员没有自己定义构造函数的时候，编译器会为我们提供一个默认的无参的构造函数，一旦程序员定义了构造函数，默认的构造函数便不再被提供。</li></ul></li><li>C++的虚函数机制是什么样的？<ul><li>就我所了解的，虚函数机制是靠虚函数表<em>VTable</em>和虚函数指针<em>VPtr</em>来实现的，VTable里存放了虚函数的函数地址…(移步侯捷大师译作<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C%2B%2B%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">深度探索C++对象模型</a>)</li></ul></li></ul><p>C++是一门Magic的语言，要想学好C++、用好C++，必须要掌握深层次的内容，作为一只野生程序员(姑且允许我自称为程序员)，我认为我是不懂C++的。要学好C++，时间成本很高，但是一旦有所领悟，才算是入门了C++，就直接可以作为饭碗。否则，只会搬起石头砸自己的脚。<br>至于为什么要学习前端知识呢？</p><ul><li>B/S模式向C/S模式转变的趋向<br>  当下随着浏览器技术的不断发展和计算机硬件水平的不断提高，C/S模式(即客户端/服务端模式)已经不能满足用户的需求、或者说开发维护成本高，比如：动态交互、可移植性，这些C/S模式下都很难去实现</li><li>增加技术栈<br>  俗话说技多不压身(何况”技“也不多)，目前只是简单学了C、C++、Python、JAVA，作为一名非科班coder，任重道远啊。再者，之前老师有找我做个一个互联网+的项目，由于缺少前端开发经验，虽然想接手，但是还是拒绝了老师。后来想想挺后悔的。于是乎，打算这个暑假进击JSP，目标是开发出一个web管理信息系统。</li><li>放弃C++，转向java?<br>  真的是，越学越发现自己越菜。相比较于C++，JAVA更容易能够实现一些东西，估计以后自己会走JAVA方向的吧？当然C++也会持续挖掘的。</li></ul><h1 id="学习过程"><a href="#学习过程" class="headerlink" title="学习过程"></a>学习过程</h1><p>目前正在狂补知识，顺便实现一下配套的小demo，先写到这里，待实战遇到问题时，再更。</p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/20/java%20web%20%E5%AD%A6%E4%B9%A0%E5%BC%80%E7%AF%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://www.qianjipeng.top/2019/08/17/hello-world/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/hello-world/</guid>
      <pubDate>Sat, 17 Aug 2019 13:25:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/hello-world/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之进制转换</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sat, 17 Aug 2019 13:08:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义:&lt;br&gt; 栈是一种数据结构，一种特殊的线性表&lt;/li&gt;
&lt;li&gt;特点:&lt;ul&gt;
&lt;li&gt;只允许在一端进行插
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><ul><li>定义:<br> 栈是一种数据结构，一种特殊的线性表</li><li>特点:<ul><li>只允许在一端进行插入操作，另一端进行删除操作</li><li>元素满足先进后出原则，即先入栈的元素最后出栈</li></ul></li></ul><h1 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h1><p>算法很简单，除Ｘ取余法，用栈来把余数存起来，再出栈即可<br>上代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;seqstack, *pseqstack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">pseqstack <span class="title">init_stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pseqstack s = (pseqstack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(seqstack));</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        s -&gt; top = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top &gt; maxsize <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"入栈失败!\n"</span>);</span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s -&gt; top ++;        <span class="comment">/*一定要先把ＴＯＰ加一，否则top 原来是－１,导致第一个元素入栈失败(bug fixed!)　*/</span></span><br><span class="line">        s -&gt; data[s -&gt; top] = e;</span><br><span class="line">        <span class="comment">//return 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_stack</span><span class="params">(pseqstack s, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || s -&gt; top == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        *x = s -&gt; data[s -&gt; top];</span><br><span class="line">        s -&gt; top --;</span><br><span class="line">        <span class="keyword">return</span> *x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*　输出栈的每一个元素　*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_each</span><span class="params">(pseqstack s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top0 = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(top0 != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s-&gt;data[top0]);</span><br><span class="line">        top0 --;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进制转换，x是十进制de 数，y 是待转换进制*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(pseqstack s, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">/* 　整除后不等于０，　执行循环 */</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        push_stack(s, (x%y));</span><br><span class="line">        x = x / y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", s-&gt;top);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*　加上输出功能　*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(s-&gt; top != <span class="number">-1</span>)&#123;</span><br><span class="line">        pop_stack(s, &amp;res);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">// 十进制数</span></span><br><span class="line">    <span class="keyword">int</span> scale;      <span class="comment">// 要转换的进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数字，进制数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;scale);</span><br><span class="line"></span><br><span class="line">    pseqstack S = init_stack();</span><br><span class="line">    transfer(S, num, scale);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//print_each(S);</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之约瑟夫问题的求解</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/</guid>
      <pubDate>Sat, 17 Aug 2019 13:00:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p><a href="https://baike.baidu.com/item/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">约瑟夫问题</a></p><h1 id="求解方案"><a href="#求解方案" class="headerlink" title="求解方案"></a>求解方案</h1><ul><li>顺序表</li><li>循环链表(不带头节点)<br>值得注意的是，其实两种方法都是利用了循环的结构，想象成一个时钟的表盘</li></ul><ol><li>顺序表</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">约瑟夫问题的顺序表实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">date: 2019-3-21</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[maxsize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList, *PSeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="function">PSeqList <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PSeqList L;</span><br><span class="line">    L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="keyword">if</span> (L)&#123;</span><br><span class="line">        L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;       <span class="comment">/*　返回顺序表指针　*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 插入 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length+<span class="number">1</span> || L-&gt;length &gt;= maxsize)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        L-&gt;data[i<span class="number">-1</span>] = e;</span><br><span class="line">        <span class="keyword">for</span> (j=L-&gt;length; j&gt;=i; j--)&#123;</span><br><span class="line">            L-&gt;data[j] = L-&gt;data[j<span class="number">-1</span>];          <span class="comment">/*　依次往后移动　*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        L-&gt;length ++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelSeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> i, <span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除位置不合法\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span> tmp;<span class="comment">// 保存将被删除的元素</span></span><br><span class="line">tmp = L-&gt;data[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i ; j &lt;= L-&gt;length; j++ )&#123;<span class="comment">// 从第I 个开始往前移动一位</span></span><br><span class="line">L-&gt;data[j<span class="number">-1</span>] = L-&gt;data[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;length --;</span><br><span class="line"><span class="comment">//printf("删除第 %d 个位置元素 %d 成功！\n", i, tmp);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能函数 s 开始， 数到  m </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">yusefu_SeqList</span><span class="params">(PSeqList L, <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s1;</span><br><span class="line">    <span class="keyword">int</span> w;      <span class="comment">// 保存删除的元素</span></span><br><span class="line">    <span class="keyword">if</span>( L-&gt; length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s1 = s <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次出去</span></span><br><span class="line">    <span class="keyword">for</span> (i = L-&gt;length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 关键步骤　*/</span></span><br><span class="line">        s1 = (s1+m<span class="number">-1</span>) % i;</span><br><span class="line">        w = L -&gt; data[s1];      <span class="comment">// 下标 s1, 是第s1+1 个元素！！！</span></span><br><span class="line">        DelSeqList(L, s1+<span class="number">1</span>, &amp;x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出列: %d\n"</span>, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">// 序列长度</span></span><br><span class="line">    <span class="keyword">int</span> num[maxsize];       <span class="comment">// 用来存输入的数</span></span><br><span class="line">    PSeqList L = (PSeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqList));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入序列元素个数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入约瑟夫序列(空格分开): "</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; len; l++ )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[l]);</span><br><span class="line">        InSeqList(L, l+<span class="number">1</span>, num[l]);</span><br><span class="line">        <span class="comment">//printf(" %d ", num[l]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    yusefu_SeqList(L, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.循环链表</p><p>这里的循环链表是没有头结点的，为了操作方便，否则每每循环到头结点还要跳过这个头结点，我的做法是:<br>1.　先把第一个元素放入第一个节点(即首元节点)，只有数据域，指针域置空<br>2.　接着用个循环，创建剩下的单个节点，同样只有数据域<br>3.　再把这些节点连接起来</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  约瑟夫问题的循环链表实现</span></span><br><span class="line"><span class="comment">* author: Qian Jipeng(C)</span></span><br><span class="line"><span class="comment">* date: 2019-3-24</span></span><br><span class="line"><span class="comment">* version: 2.0(1.0 aborted for too complexed)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* node definition　*/</span></span><br><span class="line">typedef struct node&#123;</span><br><span class="line">    int <span class="keyword">data</span>;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;linklist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　</span></span><br><span class="line"><span class="comment">\brief: crate the linklist and do insert, return the first node's ptr　</span></span><br><span class="line"><span class="comment">\param: n -&gt;&gt; the size of the serises</span></span><br><span class="line"><span class="comment">\return: the first node's ptr</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* creat the node in range(1, n)*/</span></span><br><span class="line">linklist * initLink(int n)&#123;</span><br><span class="line">    linklist * head = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the first node initionalized (not head node)*/</span></span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span><span class="keyword">data</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="title">head</span>-&gt;</span>next = NULL;        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* a ptr to move through the list */</span></span><br><span class="line">    linklist * tmp = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we satrt with the second node for a loop */</span></span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        linklist * body = (linklist*)malloc(sizeof(linklist));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* creat and init single node */</span></span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> <span class="keyword">data</span> = i;</span><br><span class="line">        <span class="function"><span class="title">body</span> -&gt;</span> next = NULL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* connect the single nodes together */</span></span><br><span class="line">        <span class="function"><span class="title">tmp</span> -&gt;</span> next = body;</span><br><span class="line">        <span class="function"><span class="title">tmp</span> = tmp -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//printf("%d\n", tmp-&gt;data);</span></span><br><span class="line">    <span class="comment">/* now tmp is just the last node */</span></span><br><span class="line">    <span class="function"><span class="title">tmp</span> -&gt;</span> next = head;     <span class="comment">/*connect the head and the rear */</span></span><br><span class="line">    return head;</span><br><span class="line">    <span class="comment">/* by this method, we created a loop linklist */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void yusefu(linklist * head,int k,int m)&#123;</span><br><span class="line">    linklist * tail = head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到链表第一个结点的上一个结点，为删除操作做准备</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (tail -&gt;</span> next != head) &#123;</span><br><span class="line">        <span class="function"><span class="title">tail</span> = tail -&gt;</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    linklist * p = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到编号为k的人(或者是第几个开始，可以改)</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> <span class="keyword">data</span> != k) &#123;</span><br><span class="line">        tail = p;</span><br><span class="line">        <span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从编号为k的人开始，只有符合p-&gt;next==p时，说明链表中除了p结点，所有编号都出列了，</span></span><br><span class="line">    <span class="function"><span class="title">while</span> (p -&gt;</span> next != p) &#123;</span><br><span class="line">        <span class="comment">//找到从p报数1开始，报m的人，并且还要知道数m-1de人的位置tail，方便做删除操作。</span></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            tail = p;</span><br><span class="line">            <span class="function"><span class="title">p</span> = p -&gt;</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">tail</span>-&gt;</span><span class="function"><span class="title">next</span>=p-&gt;</span>next;<span class="comment">//从链表上将p结点去除</span></span><br><span class="line">        <span class="function"><span class="title">printf</span>("%d \t",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">        free(p);</span><br><span class="line">        <span class="function"><span class="title">p</span> = tail -&gt;</span> next;<span class="comment">//继续使用p指针指向出列编号的下一个编号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the last one */</span></span><br><span class="line">    <span class="function"><span class="title">printf</span>("%d \n",p -&gt;</span> <span class="keyword">data</span>);</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    linklist * head=initLink(<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">    yusefu(head, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%82%E8%A7%A3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构之逆波兰式</title>
      <link>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/</guid>
      <pubDate>Sat, 17 Aug 2019 12:40:35 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;学的数据结构，感觉掌握的不牢固，于是实现了一个demo&lt;/p&gt;
&lt;h1 id=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;a href=&quot;#中缀表达式转换为后缀表达式并求值&quot; class=&quot;headerlink&quot; title=&quot;中缀表达式转换为后缀表达式并求值&quot;&gt;&lt;/a&gt;中缀表
        
      
      </description>
      
      <content:encoded><![CDATA[<p>学的数据结构，感觉掌握的不牢固，于是实现了一个demo</p><h1 id="中缀表达式转换为后缀表达式并求值"><a href="#中缀表达式转换为后缀表达式并求值" class="headerlink" title="中缀表达式转换为后缀表达式并求值"></a>中缀表达式转换为后缀表达式并求值</h1><ol><li>算法思想:<br>创建一个操作数栈，自左向右遍历后缀表达式，遇到一个操作数就入栈，<br>遇到一个操作符就从栈中取出两个操作数进行当前计算，载把结果入栈，<br>直到表达式末尾, 最后一个入栈的就是最终结果</li><li>先实现求值这一步吧，已知后缀表达式 </li><li>转换这一环节待更新…</li></ol><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> datatype int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">datatype data[maxsize];</span><br><span class="line"><span class="keyword">int</span> top;<span class="comment">// top 指明当前栈顶元素的位置</span></span><br><span class="line">&#125; SeqStack, *PSeqStack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序栈</span></span><br><span class="line"><span class="function">PSeqStack <span class="title">Init_SeqStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">PSeqStack S;</span><br><span class="line">S = (PSeqStack) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line"><span class="comment">//printf("%p\n", S);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (S)</span><br><span class="line">S -&gt; top = <span class="number">-1</span>;<span class="comment">// top 设为-1 (认为设定),表示空</span></span><br><span class="line"><span class="keyword">return</span> S;<span class="comment">// 返回指向顺序栈的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(PSeqStack S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 没有元素，空栈</span></span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// 1 表示为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_SeqStack</span><span class="params">(PSeqStack S, datatype x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S -&gt; top == maxsize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈满不能再入栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 返回 0 表示失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">S -&gt; top ++;</span><br><span class="line">S -&gt; data[S -&gt; top] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈,保存栈顶元素于*x中，并删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能出栈\n"</span>);</span><br><span class="line"><span class="comment">//return 0;// 0 表示出栈失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line">S -&gt; top --;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//return 1;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取栈顶元素，只是获取他的值并存入*x，并没有取出来(删除),注意区别</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTop_SeqStack</span><span class="params">(PSeqStack S, datatype *x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(S))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈空不能取top元素\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">*x = S -&gt; data[S -&gt; top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁栈，参数为待销毁顺序栈的指针地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Destory_SeqStack</span><span class="params">(PSeqStack *S)</span></span>&#123;</span><br><span class="line"><span class="comment">// *S 二级指针</span></span><br><span class="line"><span class="keyword">if</span> (*S)</span><br><span class="line"><span class="built_in">free</span> (*S);</span><br><span class="line"></span><br><span class="line">*S = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*　判断是否是操作数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsNum</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">transfer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 核心函数　*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> *A)</span></span>&#123;</span><br><span class="line">PSeqStack s = Init_SeqStack();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">int</span> a, b, c;    <span class="comment">// a,b 上一次，上上一次入栈的元素，Ｃ是临时变量</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">ch = *A ++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们人为设置，在字符数组末尾加一个'#', 作为结束符　*/</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (IsNum(ch))&#123;</span><br><span class="line">Push_SeqStack(s, ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 这里注意，　先进后出　*/</span></span><br><span class="line">Pop_SeqStack(s, &amp;b);</span><br><span class="line">Pop_SeqStack(s, &amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        c = a+b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        c = a-b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        c = a*b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        c = a/b;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临时结果入栈　*/</span></span><br><span class="line">Push_SeqStack(s, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch = *A ++;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GetTop_SeqStack(s, &amp;result);</span><br><span class="line">Destory_SeqStack(&amp;s);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"计算结果: %d\n"</span>,calculate(num));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输入:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> num[<span class="number">12</span>] = &#123;<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'8'</span>,<span class="string">'5'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'+'</span>,<span class="string">'4'</span>,<span class="string">'2'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>, <span class="string">'#'</span>&#125;;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>其实，习惯了用C++的STL容器，我在平时的coding中很少会自己去创建一些数据结构，要排序会有<em>std::sort()</em>函数，而且STL容器的算法复杂度要远比单一数据结构算法复杂度要小的多，就拿排序来说，他用的可不止一种排序算法，不信这个有时间咱们可以验证…<br>我学数据结构最大的收获就是：</p><ul><li>学会用计算机的思维去思考问题</li><li>学会如何调试程序</li><li>学会耐心做一件事<a href>课程设计</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux系统下文件乱码问题解决</title>
      <link>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</link>
      <guid>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/</guid>
      <pubDate>Sat, 17 Aug 2019 12:28:45 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要是用到了Linux的 &lt;a href=&quot;https://baike.baidu.com/ite
        
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在github上clone了一个master，想拿来练手，无奈是Windows下的编码，中文乱码，英文OK。于是想到之前看过一篇帖子，记录如下。</p><ul><li>主要是用到了Linux的 <a href="https://baike.baidu.com/item/iconv/524310" target="_blank" rel="noopener">iconv</a> 命令</li></ul><h2 id="Step-one-获取当前文件编码"><a href="#Step-one-获取当前文件编码" class="headerlink" title="Step one　获取当前文件编码"></a>Step one　获取当前文件编码</h2><p>我当前文件是 <em>Student.cpp</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file Student.cpp</span><br></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.cpp: C <span class="built_in">source</span>, UTF-8 Unicode text</span><br></pre></td></tr></table></figure><p>是个万国码</p><h2 id="Step-Two-获取本机编码"><a href="#Step-Two-获取本机编码" class="headerlink" title="Step Two 获取本机编码"></a>Step Two 获取本机编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br></pre></td></tr></table></figure><p>不知道为什么我这里报错，没有这个文件???<br>不过Linux一般都是UTF-8</p><h2 id="Step-Three-修改文件编码"><a href="#Step-Three-修改文件编码" class="headerlink" title="Step Three 修改文件编码"></a>Step Three 修改文件编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f GBK -t UTF-8  Student.cpp -o  Student0.cpp</span><br></pre></td></tr></table></figure><p>这里<em>Student.cpp</em>是原来的文件，<em>Student0.cpp</em>是我修改后的文件。</p><p>改后打开文件就没有乱码问题了</p><h3 id="这里有个问题，如果有多个文件不能在一起转化"><a href="#这里有个问题，如果有多个文件不能在一起转化" class="headerlink" title="这里有个问题，如果有多个文件不能在一起转化"></a>这里有个问题，如果有多个文件不能在一起转化</h3><p>比如我有两个文件，<em>Student.cpp</em> 和 <em>Student.h</em> 必须要执行两次命令，尴尬。<br>后来想起来可以用通配符，文件名不改变，即可</p><ul><li>注意： 通配符要慎用!</li><li>最后的最后: 写了个小项目，放在了仓库中<a href="https://github.com/mokeeqian/demo-projects/tree/master/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">编码转换</a></li></ul>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/17/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>和小薇薇的700天</title>
      <link>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</link>
      <guid>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/</guid>
      <pubDate>Fri, 16 Aug 2019 13:47:53 GMT</pubDate>
      <description>
      
        Encrypted passage, enter password to read.
      
      </description>
      
      <content:encoded><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Encrypted passage, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+uEjKQMbhILRDkhCfQ1QGD5og9YFhz9jsfiomJNvQ5783emh915R7WCC4yi+TGkboWQKuJK5W3gU+enqXPmkNG5Hfj+09IERaY+9YOw6YCihe0+Sbp0GqlB5vTzE+GR7qTaWvYnrUhn6Sic0AHSS8MRV6Sd+cX+7wx3Iq7cTyKnbmKqT53Yu/UjvvuusKDxJrK8bMeYrQmAw1b22yGDfknMSryJd8ev9rM2i4nx6pxWPc8NoV982ulGsyBnhFqJJH1HaiTP4qb7O2+FwzcwmKRyi64oefy9HhWjfGVtanDaaTkCBqXfidnXrIkhB+X5qc4B1kc1YZxlh64LWSzNORXoDz4NkMvRW7Pom3bvR/K5Mslyv90U8FWaZXYpzisNVmvjhYONXHTkV+Dkup3AwB5S0ge/3wmPLYTJHktxJ6HstOuh5yFYe848WR1MJrp8cKdUskQj4CPLI/tigzWdPg+vSqkRM+IRXBZ8sptZiBI98bSexyopI5jzTd9t4S2RmOb64c7ccXhGKYC/g3WP54V/6uNjeiaIv+tGJcdF5N5uBhdEDpsUQaNliw8qlVSs8V9+9eXmTdEdVFpsN+uE3QqYyUWAQjSIXYF1DpZrtxOqEVEhbofjCbQo4hNZV7Hr5XCVTzyiJGOrJDeQErgRSb5czYdCwZ4DkO7zmI2LqYHyVC3BJEg/R5n/A8g9bwSIKTk6CcgqmTHevBOXWrbcnDbF3wAFYPf4bCCzMRGQ2IcqEb9Kw8o6CvzOLNljcT559uxFBYGsJUyoUOiocbqZQTiWHXa+UXMcyGsZ8YgTHbZbmW2rkh8YiYW2uM+bE/yZ/nmNcPxkfA65Q2L4dddNN80twaXRbft4DAt59hP8xCFVXTC4u7KiG0L3fxT+/hcYpReVxoFPBotnLlS99nDcmntJjd7vesWtU2Y1th0zEDTqiII+yQMW3P2+PFCiQlm1IqI541r0Tmm/JN/zbZ0cIQxp96Emh7SgoRqby/r717tziOVPn7ldWSlWqvsx5Zo8poaVjZ1gHPe+XfgYhgkJsrOZBdrOnXPEShF/5dqGuUk2cTrDJi5T+uul4MpAH7WZ8JEphk2qCQIy9nWnP+Kegw2q68nCluHZHa/5zPgGafFLLtn8DgrN0ml2Tslj7ScL6TCfksnY0kb3iNQ1c3KPw2huyKVaLT+hVP3AG2f1LhlAIU0kkZZBP7pwTgKlRNzhYX+aOMIo9MMfJwH2KroUgSL7YPuHJmJPjh/BZ+o4zCWQdzqxwiZsGyb2k0Rm/7jXiaJJTmsxdTameUfqK5lexdG27yjYO66VmUosPAa5LwM59ic8cOoWumVbmxOIPUgPjlUPI7CVn6ZqBaSU2Wylzi8+toIfjU5vbYAbntvqP9SaOj7mjbybj7R9tVC5FGPQvAX5BFdWT5kPBpCt6yPaAdNZWJWgZNRs655QU2Tlm4x4W6ETLtr5ewUphl8JBZCX0GjNuXp2cz6jb9k35rgmHPROSDMF9QRztid2i1IrNsHfVi2K1hZuN+9zh9FwYGxcFWNyfKaRgIoFUumv26NsHIt0o2Cm89EcVPa2Ia8UWijrvKed7FI+fdKFwJDBL6Fg5320d7BCDUOyklBxwoDYA2cr9GN4pAtnV/At874efKMMa1nnWA/AxGUpTetX7mU7Pc3IttaGfpxQV9zESKL7lDq/D2CwvV0sBaa4fBTWD1i91ElONUdoUKs4taWBjPhXxTqfWjT7AgDdZd3HuYsUhDGKCFHhWi/pCrDW80RbJEQ8Tvi2C20CKhziH6DrlmqxUXWNmw15XBPP3XAf3pVDLPO8wGNMMdxPaoSFJ0akg5pVY3+C4Q1EkbLrD81cCCRjH0wCbXUgjMdOnl3X3Bgz4ywFUYHsgTFdOI1ELPKTHTZEJ09d3Lj72xfh9GlDwt0Y2T0aoxpLvifMVQYQK3HkQnUpTNkqPIs4eufb+i90CbE+Fgl+hbQWRiDdRiGkW/2uG7zAA1Ni3Zsy9sMaOjTs0rXR8zJnlG+sCJOb9VvRZ95AJwvkIs3Nzqkf2BDRKJk+Oxn+orEzjpYo9t4HqDKokyS4JF4q0QJfVxCoU75STKDaHUapRzTSUAk1pecxPzkRqOBd++6toepl9OIT1GrbxLCxisFo9ovwrM/OIDS4pVpJiT8MwWFlZi7HfCbVf5gRank8Vc5MZ2SUNjX8lEUUAWgRG+186N5JzILbNjrH6ozfKjQWmslAZT8gajjGNhFP2+Ds2CHBLQRxURWkSrmR9LrxLfkWsCJsvSuCxDMAe+hJpZEXP+tlhwopQ34Nl5Mi5QWyZnayEAAiobPGCYVx167ZbIBIPgMcFI4B+36K+IPBppCHyyHso9g1dY4goJq0XnS+hIwIp8ktNtS6PcsWHsEPQGuwQbzQCaXHjaeOWyS6oUCclupZOG2kjpU43U6h75AhiT7hlIaiH/IYU8ZxU+p+QPRBXQSAjoTv0SyGoN2PoTLs+bz5h8tGXqD0r5vKG4b/3e1Kga1DHVmUaa+YGeVMfRDweTJJCfw1fHr4YpqBz3HdgLTReTEL3SVDQIqKvfGJeiC7EAj3/rKZcLEDypgyXVb9OLtDKO/cj4DIC1fMjAEolZRFtJgcO2MRCZnFQf1PZr06YD1zWkOO5PCrYXPkcyPR8ZgTYxxxt/OGorNN9pY1BtFpMUC1lW7I6HrEVsdCwZak7WALLfGE/zu6BEeUW7+g32xQ3mzKXBapxxy0JiQyUEguAZPFdqvTa1340d4zrq4P03dRZr9ZjE1HHVfUnPerlQz2ZQQbGvQE2mMCG0xfw61c2a1lqv1qejOFTP/lUzhim8sHT2yVNzazFDkDxR0j0GdQLJ2Xf1F19J8U/+u3tSYOjIUSHvnFRtgtcYu5Oh186/EM/osr6aR/8h/825meenXUUJEVzB+d49ClDRkv86KhxF32R1DNdcqrLt0naQmFQVXtMKj3+pIm3rDoOxmL3OtE3nNPApjKAPBKudnkxMY117EUCZM3BnJm2XHNhFjQ5e0o3L2JbBV5joLOgqCx8v+20JJP6IYtMJ9c4Sge0mzknr4s0N1ZvDscUdScY9Y6QPPW5CnEjNZRpG5m2P1RYN1TBZcIKl/kh+Xyl8i1g3Cj8vxWIjREKz77E5cezz3PRRvKCWAqqcKGQ4pAboU6xlv6jxKliI/1emmFAHtsa49VjkUQ28Ffs85qV0nSO9aRJXedOtoQfc7w1FmW1SmfscdHXhWvZ7i3EjcGggc+7OLrvLzsPrv5ZI/iqHqXDbpOS8WB4Bt3kEf4dKBFEuVww+g7J02h8oA/Cv2KxZQlgxgXEds0IhzQ9OFz7twbHkwTb3+Akgz1JiQjrftxCFM5keFR+tR+Ktn9Y4beYHu3d/8bi1Gs+HToOyv9onh1m+ZZ0LbMospmNt4DwV/mlRRu0LUZLI3kwHVXH1L2RHIVksFTGpUN87jF4Sqx9G13rFLoBYHcL1U+mmgC+bmZoWiQjCPec2jm4oq4g3I2j8vCR/4xZw79HEZPwQ/oNNuO0A/TdhZownB6ICvKUKGY8lkDtujhqjJ4stForp9XwTkFIk3gbwQeiSwSDMUIYp2XbNT4WVr77aYdfoFUkw1s91KTZRT7+jr+o+nqjrqo6pRjBWqVlc1SoEO1s5oARuRuyXnQyiUOEnLvzJNyod9mV5a42fi0cy5gH0GGWnmLhYXQeP5NsuY5QsFfnWuM+E891C0L+KnTTgHxDJlZhxVjmGBVRjGXhHqwnszxT07TdMWt/Hkd+SaH9jDW8Dp7s22IegJUCoU9mb2lKXHayhTThWNuD1Kb741bNhIfG4wqtlIc9GN/TwAbyWGOhDmN8DClSjnzq2R2+LsA7x5A2+JeIBuzCO6njyFvM+gIBKshT4fsL47cvLXuPiZvLtjzCWyNsdOp8NLt+ALFM+n6MMdhWmfP8KcyiyDCPodh361MbDPEe7UOYV7jP2GODR/OkEjTxv+cpTnSErDL/gFDP01dojsEwHtx9uH95nQb2PfAZ2C7kgd89aw0wqKBBKCMG5gOEkZRfGYU88luoNP2KEH7+73L2Lr1QNWdgUa9SV8KoAL0JrX8TLSwqeHEqthlxWkMkr9bB2Y0Q0OYFuMA3R61HN+YvEjCZUrlEq6QzWH6cgzwHPGAEgSFlF3+DMChqovOa+4uiEJHQa5SWsFycbxpa2iV+8CfTQnxO3124JNWWj1AQa+abrF9faIfh0cQH+HV7Cwr8QSr1B3HFUlZ4guIYMinxBEoU1lJ8YjJbNbbpJaqpb8ZnuEYQYzw3hYY38PG7R7vkDF+9Bfz3rELbBF2Qzn9p8gI0GTDsf8UOagKziH8xuyaQb1RSNq7aLE2fdkzEbv5HfbmZ21yxCzzK7OHPpr9qXpZl+JuI+Wduwh5FaxT10qNOcngqfbu2YoMaZcGFoM6wnYO8Cidn2nPsq5lz2ftzapU0kAkuKWfPDmyWij9MAT8bbmKN1Mysu0mwYEuP9L9qbnpGNo3k40yNydPNkJX1oKeMNqx+H4IXkZxkX7UqyJn2CBIGllaDTLfy3DRwHME9mpOPluqnHqZwshz3+YxJZ/8VC/fDgFDCijq/p6KtEUWY8IYf4EWJlp1i+BQYtKc1Y/beTCv+KvazvbBDgwRHkwRbVU5OL8N8q/Ys9Nr9lICjnGvgqGD8KrZsvCg7iXPcSZ+hzIGkG/2QHvKnHp/i0JiG7PW20D4NX2eEul3wb1YXxSTIAeEqzX5z4w426f+RZ1c+C8o9ITEmaPcl7X+2WdvxWn8bOqcHpI0AV878rXbsFum50xuZjVjWQClGq9Fi2hy47GxTD0uPNnaoXlTq6ieS8m1zPNhZeJbNxt68K/bbJ5UZUz6hYWWLlCMEUEnDHTs/2ULOiONn2AYUGCi4vUaVW0p6YTlw+yWMfy0UspRPogy43qtg7rm8FTjRFaVlbxJwiLaNDZKJsQsm300BLR/LrIFMWcWs18oFMvG4sDN+Hv2iHrOGfNfWf5N2EZ+lBueLKJb4jnh2qu/mF8Fo6MXTUDNoxllUfx2x/+vFh6z5BXAWmf21lMufmPRPTIDbSWH5YaM19i7XQQ0g80WhQtrjGSf/DvGB3frwiH4ZrumTkk8uqBol0/c9SrD1HSoGKVbHDdzGRUun3a/tpyVYRXhTl2yspO1yCpM5DBR8H2ggPtv5BRFfcyDuaD7izg3rvtRVe7m9klON4R2sAibGQpbLBJUU60KcJz1Lptdt60Y4oyuKPTzIrBXTEhJ9aaX2GvKE4VDk7oITqRkV517xzGzJ4JzFmJvLyFuQ4ICL+PsPBKynA0zF7T82QiISyuTmv7irP5CtXh3rCSa7sJQCLNLTkMz1E/102ruBF5W2g9hTDsiMK12NOpzqjrlWjTMnS3M5lJVlePUo+WnpL39y3qNaYCm42ycKY7gipQEUBYNhGwYmWTiW05K6sDMjrPkJ5ychqo2mt2AZJ6XzbD2zfvAKKOngcxi71aci4QImrUPEyDUKPJZrbB2pjfVf7wDBmUWE/QFCa29GovQiWd+RMNYjSqbPXMqynuz+1xfVbdu9lp/3utzovSutQe5c0WKqNu6yHz0ZU7pW7kr4mM9LNu7ClMTrOYxREiWnOy+GguXF/kU4NAUVgFsoVRXw9o4UmofB1NoXrryUpD6LXTH50+U334MoiE8Z8hFXp8tywgpRNDWbl60uWKjmJO7Nza9sX5Ow0uYB7AfX/pgCweHcdt29zbMIbftW2rgcP9LS2DdbgeaaIMXNHdZTUrsRk507rKRcjvx/MmRx/ObpqnEQ1D9End0EcWbJhaCxeHTfdynrcRaKMg5wdaBlmNesgwgju1KbA6rkoZtaIBFlZig7r1LXJJzh1oR8Y8srRgWCfF/g3JmgO6w7tGV2RN7AOk2eCmI5zhKx3pc0lBXZPnh0zeKMt9MMDhOlhzm4ObPSOu/4uwxM3QgFpyHeamr2nR1d0zpMzeXcd+ZcPlmCmVNRvG8G/FhTJNBFNC2u9uFtr9m/WYiFugX088wp3+c/YMcZoB3K0mPnskEp+V4T0KtB/it+keY9DGVg2F0H9fc+4uEC2ATIBDOEm/nnO/Koyzh5FxZjbQYvaocXbcrxnspaNJadbO6YXZfCo/AN/y2L3tUByDlDo6+3zj3UrcW7DLoiK3DlOR1RJHNzxvN2SU9dhmSNDmTAJHveBajWQnw01P4uKPgRsHSZevr7m8fEhLOo6drvmnRLIsvgS9Hz0vvPy0w4ZR3/zZcuQT7d32SY8Pt4WK1GCMm2y9s17wHwqP/pttSKBHnncmSdGSAudrBbOYrFDpoBrXIz5iAjJxFJC987JHk4xiz7xfNHBi0b1WjrAt56dFyVph0wryTay3jiACJyK40Jclw1PuEt1If83gPvZKJd8fB1ki5aheLJG5aK1/QT/9z0WPI5TfDztqXwhpjtjIRTBYaYNYMjNuah5zJStVeG0GW14TkeNl52f5ivFAQyydYwr7KgCwjNsJLMUA1ov25uoW8dQCpf5e+4GMvo1knvekYhSDNo51DgR2RTFBJDJn9V+2MDdvxJ3FIZTEAohQeEjXPwD9EmrSkRVwUc0hIteP4C7cFWdyEXbSwSpqb4rYZARgvIUCV+jZLlEmcUQYcTpxXBNwy+JLbECQMdLp0mh/niMZfXvIA1zh5cM3+9mEyvOWJlHOtvP32pNw/n+F4KzhJD8RAU5QygVCOSN732ZPaugFKiCwk/c3eyLPaZHO7hi479KwomUeIyde3+1nYeHI1VLy8fOKCaK+uAlS6mKZT5xDQYei2Zgu4UOzBldA6XZumxWTMQQYbHp2EcDbwGDDJrNRt6cudP30W2mbgMdgoKQAFiS9lFZzthZnMdDphsmuO1g85mLChsiwyglRERSqT2qxpAudqM15t5LkkMhOVVQZgNVVs9abSYsCbHkdCn/qO8ONAR1tmNBzpuMWoCUjSe2BbZ0MCfiNept8FOnlhr7ySHGc1rWfDDICodk8Uj2FlJQxh6X39z+SSwEPhPOrRy9YBS7489N8/wuhZxfQxtDSv2hrqaSRs7fW+fvzfK+Th+piVnfHQdyeIDDkukkb99u1D5uRYgg1lPLYagwimosZFnC/LVWiTVnvyIE2QeopW9fzCTsJUMmvCamEbEkLxpzm1S6P5dTa2TXDiVEHwKQrTvww7XR45k/46MRyEU5VFk0XBuuByvNNHGOtZWLLrPoB5DibOh3aNZ5+pV1tsfl6xS22B/u7e29fCbfdn8rrHdnBFPAjDpZ207Qiphz1C3T8KmiRa3c/in0rrnOLPR0up7/2odu1PU32z8YV0M1reBVVK36xN/WeuDXidVMLtvzR0mgA5iX2izXgOIxoIsdZeoYUdueZwfuzRa2Lgq/TsNHMM6/hMe0jefDv2bTwXfRW1W/e+Yu2nwwT4Eb5GtrMkqWS0lsvAtSk3tGRC17ozDExIepJbqckTxifFNaO5pIVyuJc4Wc3sIVvleUptGY3XtH4Ej5Gi86koth/eTKyDbjtyY4rgkJNqQ5UIan5cBUvJA39yVBooYbSMs19pcWEjXkJbFMplLxYM7Vr9JKMV3JuthUBJvp8fUa5t9+/x6TZ9KXBXn/GSqy226vzMgdU54fhHT7pgBUg/r/Mg6SQckI36luumJGY07xvWjBgX3ur1kcofASzp3OU9hye0nhTvF3Om/pFhFmV+W3+8Jdan6fMgDdpdjApvZGs0WzFsYweKr/duL06YssUwW8g5XidjPcopa45PC2rpJlWUEUCAtYhanWy9j+VXdejEec0haqwiAiAsAamQme7RrmJJjD8gwGN63eRrA/UcR56j3z5VRVat7AsLYtT+zeCUgWEF6/OiXGcWt7xP312pP36ewrwJkBoq0k5DcntXR5wFJ+0+Cq+j1NRHNdjdxbgTTj1BiS54ddmtuIHG4tj0wfIEfrv4/NyNIsDgK82hDHJP7P/ivF5rHEiM0OY0MeesAzA+Lbk8cIjvvUcIfQ2L52vUpV3kOYi7xAwvIhqO27y+Dyt2uOJymgluh7LVEBTZueQFb07usieZvGkI+z2EtJcYjNbOMgiF24nBWR1yaLKWUvlDhoeJWuLUN0FE9vyxyoCsv7kXG/tpoU+7MAlthklniawo252A7bSvb+5mrlH378jE6mEaUFjqDaR4TpCBudV6u/ooy+gdWN1IJcMA5E8SkM+R7kMhVZIR1kSOT9A2Aepkvu1sCc8GZvxFZMf3cStAAO+opSoTqAdQlRGq+w8dFFOxJG71yHQbGmBX71mb2wVNYxyWpbLViwRjG1r0geBcu9OVSlWp6XAxDrRsOhYrw7M+Nv3NQ6q/rTegOtAAl3EhNpLZqTEuy83Gb73aXjX03Nmzvf5mzklC8i7ia3m1XbuAVLJlseqo0SYuOUHzRLWAaSujE+wKyZSv5pPygKF9yJ8hDWN3bEWtS/+8wfsFZtM7JJNDeu4rhbqWPEkC1XnL/pWijIvwG544V8k4+34nOyjjBNL6aCEuBylEl1bbmxilB1BeJ7ZqQ08mp7HQ7/c2vdsudTDUx7t5ZcrvPRMb9GWAK53ZcdV+cBc3hsV5hhWGPOEfqxjGXJ13EVX+G1rVTmpe0tX1hBTL8ghGWxPT9haoOmEb1hLhOC9AM4ZU8G8Gu8mWKDBK3g9B9v7JvZtlbwjX1RDG48IFRUtXESJxamJfKEJsdkShQFao6H9Uqt4Osynw/P7krkxvDpkil9bOh9QjQLLAr/IiqpK8xzNiS4foyHp4Lw7lDRdqBQEHx+TD1iqgpDlNBPJY6D84e6kaKByzGm+iXEnYBfphcIk3HR04dPhFI3SC8lzgFz//zGCqxr91s1qB1J5aqlVroPvNBJZaoH10kQtK6ncWASXFFF/JAZgiIsqNszrAF+in7tjGfGKnMfycfgMIKpF+erTjmj8piEJxR+lZSLC47A1Lc7dkWcROJ0VMMM9qz414QavEmh4QVVlG/N3GYAA0w7FtFvAEvvP7HLHL3N7JKdtA75w6vuskARqVy2M5G9BBgcdtyd4CYmksdZRM3SusE/eQIgoQOUwwgU102qyHtb1+pZLH/OJ9XMbbOTbLbVY2mtpYy2G/Si6t/qGuHukuRSwZwvV83rDiIQZ4C6btZ4L95TPtPNlDW3xmcMZOUYj5Q+3Ahe/K85w3Ujfcb6Txuff27eWh0Cr3fPNJUshYLB5MtzGxc4itMLACnHDhORgq7Q6159ECekLBJ27kpUCX1hSPM/H8APHP/vBj0TDiybWx+lhyJEynbFiZG5bRysnn1vYRiqGA4Z/2j1EPli8YJAohRXPCsJ2BnUE9iEUf3V9urnSzZb6HJwFIkCjLWwrguNMW7b/wOkl6dzpeygY2c4hBOJRpQuNitx2x7aPBYdz8lUzcrevwjr8SNm3uxlJhHdFL8ORJBSZ2n0YvJU74JTo4D5F9FMBz7NQjB1Xn2dv2NkynAhHQRGMpZduYRR5d465jpT7hjhwZCzxHU+OnkXIAo9A6nmfI0RSfV2NEmuy1hPOnRWkvES0S2aeutUymS/dczrEl57XjAVt4RyXpMqowJ3H4Bqrw5xpXYNTLnWWzK8qPdl+/pYyhWonZknmIMyv7VjzYjbRXIjq38/kmg8ATuJ3C2jPpI0hXzx1+7nHE1f1d8zlJipiFxhrvPK+EkH+4UXv0mCB0i5a5vk7pGDLYtO47vUoO8cHAoebPQmCi+MaVZHAVgJEBd40g6puK2RxesdyHeTW+nYxJu/2o3BRKaAFRFfp4amtfV3MOPMT7BtpNtHdosNRomzV3/PzK6PeXXebHS2pWXw/s7/Xmw/GIVhPD53mpSRuhpgiLbH2BGV0qyl4horwd6AHxjUCpAauw5knTGhwzyAreTzCw6ZTwehwqIfWmf+HoS+5wWgxiQ1dBsXk97VDYDZjdFM/Gqxud4iJaOjhzPemqL7VuEPDI33loZwEhPKRZnNBB/2uA4C7QcbXBD/GdEsanCuu/QhRW/TUTE5ec6ClC/jRoXw2Kj62trAWURlTUcdXvGU8UQIE8vWQaJjR0199t3Psog9vQG+JlDlLQnydFOrEhxh/Snxni/zQ5ZMVo80HebsF/DASWc1cSiRfa+u9BahfTQ28Po40lifu1hXA7obJIpXd60Q3OzvMV/jtnbJS9UB0y9bNVdLeYue6+69k3poHOwUzydHgc50KU9jE7yFWUroyawFAe5WlDDkLy8f8EzIlbiU0/btyfeHEGGsyzkzsmb/j6npW2bxtM9hRFrckvEHA7C8mI4ztTAC0AaSw6vgvIxXmEyyh1AveQ5je2CIErY3aDFE9nIpAnqareXWSxdOGETdn1S0XiZiYcuBhsxtNejz5uftWHtk7X0NgN7TIDWScxX7QXx8FPy4uzfe1+Ss0mEKxps/YaTiVYXcFdoF4wJrVWa+pFLUlK4EGvBRlTBe4EnQBGDVNs1iIzG4XuRNx74ih7wqoMZ8Cv+qAS3xqH3Q5FIPibPvkqlT1xKVcaU+ZWWactnxxyIPlE8eJDdlFXI9hmiNRyY5Vt2V8wHWT+aMce+R+gi4QzpmjTPogZ01SI742O7PuUtrQddCeZSA2CGlo3YZFXLAC4qa8WL58AbmWMy/YmpDd0KLt+6x7/j7727gz16h4DbngIowbbdKJ8k6dUDnoo+SAsuiyDK0sbrr9g4GAGDjTqgj85W60gRNGfV29sGMd/4h3bumYO6p9AjmVxoowl1Ir7FKnkVI0GSACW9C3vF9hlH5ZV4yOXqnKXUYXYlsuGNjkGDDnfDsYBMDcsFOnMghTBw9WNUNxKvl6LrMMVA0Ilft4/uYY5GI1wsWog6vBWgrt4MmFIxL13z9vrfRoTKXxW1kmoe4mFVDVbij09nZmjE/XEmjyrX49b1CEJ0itvENG7ntqpzGRbY215MiC6eSTRwwoAy/A77/Owq2O2B/9EMuRksmf3SoSRWeer1+dyLNGgMbH1cgBeLm6ojVVRPn+kbqWKdnyCip4Ooi0SKtqqlXkKRjXXKYCi+lB/A0yUKFx8Roii+58NTAGW3eQfJ2jLYQa+tudvlWNE5CKIsN+I1YMH2a7Gxj0ZJRNe7sfPzixn/YUtaUIDquZDCBsXONYJ9NBIBAUP0WLsOug07y+Vm46tKzE5Cll4OGVUnStr6HCrskKehrb/RpX5t3YCauHdSY+RBPUOaG7HPtl6eiRhaLtLaesD30AQB+OqPP7TE7zLPd8vJTQ1KA1ntWX8ChHzqVe7XrkPooz8RmX4DvnpdA+T7oW8oq6ZYMQhLjKZbB9Dnpf7dx7ZmPLoSmDK3kQo/+9HCRY7wnKD3hkuUfH00hAoAl1XfsUnSUyaOosT9hDCzMJsFjjqBIZvQhAg6Py/1Su9FwmD/mo9U1zSSH4MKhbrBQB1HCzhPaOq2m5FwGWAuDSHG3LouLbe++CykiIePHHs43QmxV5yGNc4TFLbjWNAySpz+ngakRTfpYwIw3PieZgvigrfuk4XYaPMaiFXLTAdJW+j5BIkjqWjYAy7NNo5Aa1p9a+Rwf7LvVZyDj+MvdxxFsNQM7aU3G4uXHdLbU3oGiVQecYarGQOUuo4sibUeikw4700PE0NLO0lRg7d0avcqc4UY+ms/CI41x0u3QuZm0qUskr0qfwgVjST//3lBPB6Smi0jVkxKVZ81GdFp+Y7SAEzgQ3zRUZCYMMvBm9EcIf3DxZER0wCb+s6a3gj6o2xgtRJAynenT8FAfsZoCZ/EO0y32dwIw9mQnyfUv8Kt3N4+i1Ycb+PtmYJMUfcxQU6Mziu40mTCu67WFgaYvnLWOSG5AHN9+d+ceXvrWN9F9z7ub6/5I4Jvr/zJ4AoyhiYwJrcnuOjEV30JdC/D4IP3NzDiWIqLvMs5blXmFY0+EqTKvaH4kngpQyUfDe3VDujBg4VUu9ZF6iw4xpQtIxhg9BdXdPZv2I5bc5EPJKhhBXfAeiH9sRi92apKwJ2UPLarUhQXYQxoatun0t2lOQGx+DyqF9gj6nvIeoPjM2oiQCiwDDDkNtC6+Rza1rqdmWvYDRua/c7y6febPay6sLyaVhsxIvK1+Rtw5xJEC1yG6aBEVekc/abDXnfOvzrqkqLAsqE98/i867e632mIdIfdotYb6HeoiFMs3rTNxTAscZ4Ya3a5l/8LnqB4873sVofBAe4tuzm3iDgzbER/8Bqr2Ht1IMOU7IkCDeZWsEnhnL6OOMNxIftp7wv0TnDJ85fsAflpD7cFqcad0f/4LNv1kNT6KK80N/2NNbMviKSUu3LsO3+8CuAETjg6RQQeZJLCiW7g9ALwBuetE+yQgq5zNKHrukZ5JHDCq1wi9Fvl2sLSoK1Vc2WdGkucUzh+WX0jEj0f3xrmMC4s8TWhezG4FFlTVYKO1n5qcuFPPS4e+3FFuOV4b9jpn6ECAITUmq/RlR1cjdvlm8KUeBG7rwXms4N2VrYme8VNREad2gpe8u0Y94FIRosL8aP2mdYEnwU5PbcdV8uqmPfo7QWt1cEJOVmmSu67Ss81T3coZiOIbWC+NCTM75dqTdceNPFGnJfRWPiXr87jfbOLvkJcsaAukOblC/E1aXv3BH/TOn0RYb4dUEeU1X+7pBWFVpUPiv8TqzacdJeBC7cG+J0pj1W+APInb1JCfBfMbtsfJJh0cC4LP4Xj8vCyXKqNXS9moqThxIjeEWD1l+aqhxzVunkSdBbuJFcFEUK90VS22ThSFxvoRCRWMrSeqr7a/Q1Y2TuJt6eYqTY6CBmDzzhxwtrXDbF/oIHSaipXfBB7hknfW5Z+s3ySTBbzlIx6WHaycJGm6peW9odfpQ6+g0O4qVJh0qFld9ER5TTLO1RtftN0TW7s6tREE35JEVYa37lFiaCs+1cJzZYUJinPdn9FA0wEx3b9/DXjlQ/6Ynn1kyhnk4quvCFcoP+VaO1YJdQavOgHq9hgNbLFN2q1ecCmaKw13k/WsN2VHPDefLyrRAsXfDJ+2A6VMb9o8PmFjtg5eb/HwA3K0E7Fbb8zGzUgb1I+to7I2aoJhmmNiOSM3OKsCaiI+VobOSExPhSWqIkp1T1r+jpJz94n2p0ur5ukrI+D5OmjqycO5h29Q/ScB9dWFFrvv3QdRyqAKrzyA+4wsIVXbY8cVTyw7OrohI9/m1N6lq9QDEAD8XN04dD6ORxWRkrNxVs8vyrAVAgy3bDb/Hi9uo8O5pz4ZwHqtFTwRPLoyqzr3/1p7yade2ySFD7C6bOriRUSVNN7iJ7A32CN93ZJpXeybiD8muYL5prRuC8UxwbVaKurRhc8O5k2UJn/tMv1D/DLdjy2VwJSZUI1UDzHQIXoe+iCwjZa0KpEuK+2XXh2/J7eUXl03gX1GjKGvd/sin6zrPIzHoofD86TM5+ecqSG44X160cRV7CLdOKU6bTPVS7x4M1KPTxwBh+oHry5vg0NHIjUfhDo/amLWODhCPwFgLmnQu9wCDO22cTTyRi9c9m1/Juj9z9s6hrE3Lx4PP+J2F7omf80LsU9jdUr3NeKBn9HL+sEUhkdz9quREZUQgOM8FMir5GfbfdORVmfUcoI610U0OT344Ldojb+QmxczODyt+z8uJq7S5fkwUAOfNnnMFomksZ8aYO3PObgkdZmOcdO0Q03Zvjsdi5dqcxYBerxMcypI9m4zzLHOl7oB5tTCrb50fZBmhyn4hF88sDSGBgbRus5LLsWCtTo+QYSCfVZ4qyZIYou6xiStf69POO2c/RSzN53dpQ7aumFZqJE8jmhdEyY3NzAfFb6Faq76PElosshtESxTQhLgOHyIsx4k8G9eahqml5XBukgTa1GUOZbdqTVuBXHgf4e3+XlEDGQRTT20gtgq9cfuXhl4tbXLeIyKJseUeu8uHZGXuv+AB4yzWyAtVvBsyjSV3tHq2vmN8qTFkcH9d/LvFCBQtDJNHfTDhNYJpjry+pLlxPTB6fjknL06kfos169Ku/huJNf2ucwAV0C9GvDl8vcRKMpVWCbG4OsELEd8BiAK3TSbKZWhVCn7SBlxqkZtKurLFPkFF6jF/z7ya9IPvt7/eTRXt9KnekLnbqktsNlzZ9rndEI6mqU7+zZTJbFii7y1QgMttZj1BkusZnrP8WIYrrmb0+YQfZRlqh0zUmKlZ6VErR4DgujovCO4OC/5Ed8l/V5jvN8fHWg7FpPvnjioP3bIE7+mt10FoY2xLa3rDG+mTKeyo2i3LaVT+uT/sNpW5MutgeOTaFXKiTuC0w/WER0lA5Dl1b5an/5NyIiFlgQXA5M1UH42dBiHA3JZMnyEH2O5aQo/xndjWXS4lWoc7TGFPvrZRgBsDPuTs1y0QaEHT2yOJ76aIc/7RwBL+7+7fui9R4ABUU9CuvfxCHCwokHUr79pFTDP4t0aTsjCyuLhpcRQsjm4/dvp8ziVNWCKpCcthym2+2GDcadqXWEGCXjxd7vYKhMNTcRalZvOfeRqDBa8PzFwl6uscIZ7ABDTsipdORABdW2JaCeil99QibA3/BVVWDpY96eshsfSAHgENIRYtc6q1pnSSlDyDi3uPIW8oXBQCtcz0hAp1ygsOo69+T/bDfuNzOQb4bLh4QPs/BiF0Kv/hJBD6qAW+/CvYq01iFVPuGBtqhkiJC7bLt2Q/CD9Nl52+kIbNtRtpEefxqorIGGyebBEQxuDWAxImW0GyKX1rwz/xBvDWsloGLqHN+MYsUsuEcbhcep7+2ok+hMKsWvwNPHaLwzNSrB4+AOXRMuLmkDa9xPvphSrLPslaOuVukn80ZmvbQmAdjxBTqMD3jsz+xGGLzROfuPfEWt/u3LBMb1uAOhja96SrKSCToRLFUvGgddPglB9E2F3t2EiTwMfCgCNVs8uRRTXwkDsH9q9sfkxnaCPaEBZt6uflbhy8dymh0SVoCWXqePT3miuxgpQVauQvRafmbYXkH3iCTNrBX9rRDLL11Z82AWOaFM9KB3Ru1sWzPkYWxeOJrBBz0T6mBV2tZRWtUMjXuHm4tmNy2Xg3OOtz4KFjCcl3FrajtLawaJ0+q00TSQyBPGq134Re9DXnsoOJmSrBBEZGN/8JWsoxWY3MMtAoldNwCDUU6qz2plUaa2gF+GI7fwmbafI19e/s3G5GCMYyedCS/DZGKqpPqpKj0/Y7IE5t0ek58HsEog1z/4QJQ5OZqPI2HHGsuIU+LXH9A1VZTxIVVXcFWnhru0nX94mbX57s78iBvd8shozdyhJPbCL6QlZ4N9eJ6ur8pBzxjdGtkxzrorhR9icDLMBeUEMX93FlZLWLRnPlrhNyFqHFV3dxVNHtwLhw7sPSAy2wXGjca8YsquQobPW5GK+HSUocYA7Fvw3ur2W9KfIZbyVAEjbQw1RAZCFjxxyCMshDmUVmiDYUJN779xrwuhG4/Z1vhlx10wNl7YyxyxQCziKZEQWUkVi51svVncAv9EG0z/NTaw69lWTLyTC15m9PTF9rEOiNUxD4V60+PcOYXP86rNq+snQHMJQwnb7PdOthiWrfY2lwB1K71MV26h+LUgmZ6IMHATCsZyuRVgcc2j8yxhXXzkfn2szVSVSZYBt/APViZQzZKAZvM3zYMkiVIcO8hxAgIBCuGnFe5a97cqnCqIFKkNduMW3B7+5+Vs5OMCncQSmzsCTBQeikyvsBzGwZRvEN0YW5xnZ5E8gh1jpl2xv9fI2d+Su3nSYEKvWYI+N7Ehr8RaFQDoEfS9+V0CwLenrIXZtCZ/Y9uBXUBWFp66hutJn+za+gpCtWoJvXWqJ0tm6u7WnLmmHmoVo1+EEZ2S9FoNpUIej7u6TnVk5S+CM1EQAOsUXkaq31nJ0yu8fkEFniaiBs008A6p9rWcstIxFIekFrpPqSpwefkHVQchxF0jIBVAh/9F1cY0ihmJdHMu11I9a1HirGEM6SsaTWEL/NmlszJ6TijAEuA1oJgEwALwnHqpOoGDaDZyph3jL6KJBFl748xDsCDQoqUS1/f+N55fFwxxG/rzUO+iIpzx2NcADbvq/VxuseWbuWYmN0ETo1eXUAvJGj3nKfQBuswXu4uoZFfxh/muLeOyyzHbDD+v95AkHIxbBR8LrlgNKHa0p52kjNMY+ljco/TTRhn0qifySokvdWA+YC7zUQB3xr7uffuvNFzdWp7O55PU2ssPH3RfVFsjG5V2WhZUSuxwawkzzxLQWFTxLJtN9PdOsJs6b32r2yHM2W49XuvgaiElOXJKLz6Y+byq2WlmodHQvai24Ed0q4a6VLtcy6ocvTS/B1k/YsGaxaWIKQIP+UQIPupfP+oco3LGleafbdHR2Dz34D60rPG64qRWLesNBeP9yJlI1dWR52cX9h5LZqY4q1cZaQuHOR7JlqlS2vBSZWJ+xV9+FvKo9/O07ZLj9CN9rfniRgGK+K8Y3YazJlehT1NEl9ZBCPMn+3XK5rmMiwWJlkrSMiiAs+zYK1qhzOXLXOJVp+lWViQboz7GFTTp0tkhd3RgiJ8ZSOlz06eHz8SLOg860wfjVfLYU3z0BIPowG9PgS5ucmTMNl/eHCY2vHUu0WrKu/6OrNfWq3NVEEJT0sNVLDClEmkSnRrJTkQ5YOkEwAPHTPi1mN8ZWVZIzwqv1luI5YIRYiYs5cdWSkWRy0ekTxRhvok/+6ZPYqVqx/vHssdLdBIQWszvxeYmNyOYxTxbDySr5tFoL8NIXvJMFVInoZynBz0ZWqs7xLck31CD81FKmoa+IcFT8xGpYo/RZCLU6vTTN4qxZvnX58RB7AT0kL6YNSTIUdjpw3hrl/zBHh5H/4qHTgGx2pn8wosve9BgY0B5qGE/YP9zelH6Zk5p4uJFTser1i6m5XRuxjiPxy3TRjDPfdlXZ3yuZgf+benY6xv6ctbtu/l98uaAE3wv4PHEwS/JYpEhRAgr/5yk0Dzv0vwQwnVWhCQ4/FtMqrK8Z1K/JthRQMATJ6g1FO1itgqSqwVlTdBuewdt5S3/Ps+pYtiDnRQK9WEMCPseiBRGBBl17ftEbJEwacSUVleCvqG2n61XBnvRFXvbQDlAyf/29ae2n9ZlVcDMf7yOHxqO/xu4KM0mdVRpRY9fNJuQINRjBMeFWQRK9sNnL79U7zS7bNy6+sZWN5TqrCZdO9ZiayJCzTsNi5xB1cTMcTIdZ5EBKVnQtu6udV4xr3inhSxwbrSesg8QIieC82NKFAHYpkq1ucafcM1q9VF7ogtpkDDTdJbiWbN2j1KvqV7K5i9dnxQSLv8E43nXctBFPkFoiyHkVktsrIUNSW/GzAGV0gbxmlf/46LueXUr+FRtTmSqDEHn18rrAoLwraYVMs+N6KIxGj21RCnL2K/+gFH3cdbvc47lED9MDCHOLe7XJKyQY9g0LphHxT8YaH9nUqWlVG9mkONYbZKZWobshfZlbd5lcQtWMySMdQ94UanP88vHry5ySEhgjIDFM7/XTHSICYp6RRQ5gT5A7LErnIWYgm5JBykbc/GQX0xXeFLVf0FCBYsgxINTSG7vxl7TltH1oy4Iyis1z9lRZq8blUcD4rZPU5To6Y25gyghC1oTstCJQze00M3OoNUUoKAvliRJyJsDaX8NXtTq7hkiwASIz9jT1StrY4Dhlo/A4s5lK9U3+WoXtWWAFirByl+dji1aUR/FWwliMevgZGd40cb0zqQ4TX8ojDTHui3dIT6txf5o/q+s2jlSn/5T6I3sQTMPPenxQfFelBBMk1l6ryKrPicF8wRuOLUf/aPcoXH24h6I9Zf8dc/0EW4/wFmLyg622DxtReed9HXd8t2RtiTleomAzbtj0awKPPrc4POxyTLnaXqTLvq98Z6g9TSPKjL0uEG1lr7QZ3aZ+5eliX+iOf3OrD4ZDwd6Zy8xViBEHUe5OsQdtroGs19gYpR++VgYV0AkZdzhNbw40cVUZMpuMt6gJZZjGs0nz6lBFPjgGFVStzEgfL+MEeDC7JCtUr0UCIDXsBQEinaRB2ffHWFcO9UBhjs+YfHYOWKb5T1XjwKn7+PucCf0gDS0z/AwZgoC7HdlLf3bmiEeGlLfpH6j9nNo94zgCzH6YT2mqRft+WuLpI6eXVnDcvGYeowhisGtTt15t0m3zxWdCKbjFr7NPilJVBFwc7LQw7fDym1b3T4Fq5kPY1Pu252BGRBD+QTpwHHBYxKHL8o++rZhGdj3h0uPQrOGnzGwdFShxChuLMk7/IFXPfronxReaxgQWMLjRg3yyNkYBF1gmWzfbLHRO6PuIlpdc4iWJ5peUko5jSUYBj1kLaSSKy/OWQh31vYXq1B1KG6UNJFcUtP4eub4AGenwe2n6nip5vxNWbFH+BJEK3OXHmuyfG133dbVsB9TS4v/Bm8ZlWiX5M2Qjqszqpm+9U6VcOtnJUfZcqEgRyqMMj0owoewVC54CAonb4Y4urdogJjPupkkJteibG6CZzEtzSA4aR0AgI0sCsybj/u78pj2CMnotEjyRmR8M3JWpk2az8CFMeEzU+Vt/tqyVpVSy21ZCHKU2T3aCs+80d8ZfgSJDocZLsP21LbndatDDcnLqG+1fxUiqSfNQsnfwAYUJZf35lqIJQKhR494fGLXZ7gD/CnVsH6R+D5niW6y65VhayGteQjhDDC8ByPLeAtpB/9jVfoXARAQJWraOHC17IOwqFkc4NNN9bxJ+Z3qs3t2iweuLUXITEdL/WoooIqPT8luA8Czoy+GwbBr0Drfd87CPBKT6FThUQnOBXA2UivcV1i0X0MqKU6dJM9cuNFq7xf7Kva7PoptUwdez6Z/uFqFOvUW2DIw7E+1LC1r0QnZm/jKshjprmp8yehMGBWEu/Sh9c16oWLYhac2Mpkr3hQ766Guibom0RaUAYtGo8l0wKTWkmEYXKF7yRoIOLH1Fjqjx1gSHjZsVKiRXNoHoM0Ktu5+YRKUHameV10br+zwQ/Sq6o/0wE6S3ILfN49gOLWsN6MDTsfODeJVKf9V7Li5FYHVMig86ENgNkKj4G4r4SnqjWYiFbhYtwIGlgdVCE4n/N72CW4GqrisqPr7VJEnEuA4ZmaBM4dv1Mia/FVFsl/oerbavD1OXgc+JX9ZcQl1Eq+y+YdL5CSnhPz3uhzQ830b3I9VN4HjCnL3yLWGrDTOgJXPnzUO81rMDJ40T0z6cVKie8+t2/l3t8M27y8hvtv/JbAeAZnxkJVvTGkqutNxGs6qiW1rZErbVGagL5QXcurc3kfCdmsOQWsf/dl8IaPSKtYOAcBOySFLHBgSMTubJAdGDCbXBr6h2SyXRjmeSeBS5p5fJRCGjtCMWXGpQ/LopGPsp8g3dtnCIejnc5fNSs7RecsLF7ar2lvzXnZUzR2AtfbK9voErfiJLes3WCFk0n+80eJo5coYIDsUIBOqNDojU8eUPywWn5y7/YfOcO0dP4+u3SJQcVoKB1eKmZFjJ65YJQdkOLnYbrAuuqyZftuZ0iJWKEfj9hcLu725TsX7b0zhXgmdi0pAUZagpFyuXO+4xOB3ufcPmcr2XWqjSEiVTmq62iWG2u7n9KxrBTZk1U7rIzB8vGonS4BGdsTG5UzBImJFoz/1SWzL0WCtARX19OAeBeUcHxA+oHwsHpLzunZGSD1uuqnZjIT7P1YF15lQamAVXEY9v9HtYmyqB3viirELLAY4/DLEDV7A/RsXyMO6ZqhAdq8T1Ix4WEQMAwMEWYi4s86ScXsJdCZq1jqq0RZflT5Hzi461L/bVD7smKznuOMQAo8Km7tEyYLTQFXIvwqQfT6YtDfJFAYh68Cis3tB1JM33pMzf0zlQzZ+AytfX8aja695o9fQl2c6HZf7OUCvgyBpxy2JpU7XrVnI5uWBcOx2hMLXfzq51GT8tyP2/X5ot2Y6sRGM2fhNrgknhsUZG5yfXIKk+ZN4OCAyNfQzJljk9sntzxDE764bx/WsB7F8Lxc0WHgVH525/aijckRPxbhCZOsxDYRvarfcdeBJpJaVEbR2tVgghHbyh4X2SMosUUZkQ0iOkACt+UKgAWHwJpMqjW39sU8Fi+czaHwInvn4puIxvyV9gRJeUJfy+1G/N0jFXsqKHIWhCwUH72gShcbI1DlzuODnXDwl3vAB9nDejJoMYKYHOomTX+Z7tsbEv/+6heiVBWvl0zzO8WVtv7pBk6oBWZOjwwCyLjD4sL/Ws5ozdAkEDKTd6ZTcetwdKX1ao0lFvoiV7eKqHVnEghKn2TH9ak2X2jqRe9AEJhYpaRc9A9MpLXq+G4q2HdkNXzceHfNXyyktKLgUxubQEdDY2Csn4EmEkdgFjgvd18RjLgOo4WErpxT+OREZOr0uBogH9Lms+vEYZMXSwvkL8zv+GPrXIRpyLYnIe1aIL2YgdzbLJRZMlaSRHdDM0uXyGcJFMY1xXxZXVa2jggmWTwuDWFVZrhYqZ0jifQoTncWZPrCnndlNeBlijB6FtPj/fqPyoqs3Ok6FT9dUdQ5mE2gfBrHcNWaaTxI8ttrBzRFayLPVsdrAUqlCJ+EXJZcfloVdQygHSyQ/lZ3z6WoTKT/mIoAsZhX4bWO9MG6gm9TuUquvBELaQzHUZtU6KE289rOahXl/kL1cWERoePvgp3GuoXdnn/kbuwNYQNqqex76ns81BXG0C+Q0utwhlao71uf7mGe0gSQEiovhPnMJm++R/8nGSXRIUq1SC8xqnD1WVJSvN4cWdzdwSAq3ahv3TjmjmUgH8o2id9ACCqV2njGyOxbDqa+Fe7i1dEwRHE8JRkPa1itSo8WU8Ibg+Ts4nc4eERR7Ns6b3XYmnSHnPZ5DO2SvAVhJD26t3J6jgs0AQaYOHSGaCy7H6L4DxGGqRH88pBGPEIxYOYrifOyFIzSej/CKzyyYy8xU8nM1F2FvNOH7+FmOdzZraz3ObK9Ur3+fgn1AHO/HKwQapBA15cyKVNpMHIQLMH/Pk8c5eW09qHdrFsbrnG75nI/gI73MQ/F7dJOfOIyNW49yua6yYp2bTZMvSdd1XsP3CWfZavArmm2nOELSuRo7gLtlzbVYsNKeux6k942HCHAcLZXcPIymm77eT47FsDLhvUMaqy3W/yJujcl9mBIiMZyNmiHtYQUA0wUMOn0vJWtKBQ5TSS8bCoxATosiudqhquGvZOTLv9tZ2wJvxCR0BxCr9sq6xOrmOXZO6WQFTsv18nngstCzLmcOcLL547gMJliI6To6TG76DfwHuN9p3wzl7TYdLep0kkuEcpuDwW17WtuSRPzdcHe1NLnY3ZfhGW/LNdOBFi+rGCN/sBCpkvOb3PZB6uhQIQGGlYsKgo6uxRHnmkTAJl/wAWCw1kM2RYddDnjZcpBWq00IWZG7kNH2yDShpkKQB8KwGFzKncTU5S7zAJfyc2iLvYXcBQ6Z4GWeBjSSiSF7DH4p6D36+kIz9mXSY7lsE4kIkUZZUnCPShd1PjacXHrMnNW5iPq04Giz7NMQZ89Ma6UZFNHZnuUabMjFp8ARJ3nPTRA+776Zl8ib/TU1lNRh8I0xyHdFUvrBCQAB9Ub1tQ9/dBwa7PIDochEzxNMlRuPu8FxqQHGyV/Aw37geHhlGxXHAGhh1mIwHJccVlbihGgXpTpekURPTN+27YCgMyuB2VpGQ84MvCtLtgf7i3JuoHsHyp+Xqj6QG6TUjzyj9zwL/tDYATbgb8HQwj8ClCROy3mBlHYbj8iKHeYEFZHSAd+GglEcZ5cS2RJ3Bi0p71Adx+W3/5eRRnIdFy686ZELF+AJAT7mzdBAXBFy8zr+PLeQ847YEegyM42Ihf/lVwKAv4haGD5aBkQK+Hppmae5iUQm/gBWiYmYhDE593I8o1lBYCtkIBIMVtfakmKEOkVC3H2U+qZVmoRfpjFQrWwXGOb1yd+PYnj1gFGpqeA+pUQtISANXNcg44+ABuLygvr4X8VtKE0Sd5AV3iM178RvZL9G5vy6N0fjUWaFwuXgYvcIFXhy00coD/5Anvzmm3DNOxuNsmudZl+a2C1UniJCqBbkJpg8/mW2R3Ww/6u5A6kdgaWNuF38dosi38zfqaxAIaOeq7St9Kt8lb2+BcWq+We4+4Thg04o0YcicZ3bZ+XtRG8WWBAD2MnPfqJdsj/Otl4t+Jk4Eoe0qx+Iqx57JI3EqQjQXkEYyJo4I6sVY+PkNIlcs/Wc9j1DCPORzk4SyW4XCn6Udb3fdOpOaEl/vl2sI12E2QWPTEmjv0lkTAzzA6FBFnhN5YR/NC4JZF6+63SxIuCNMws4pPGAvpUngoUAV4Utk0jCWiVblQN8pBKy8kp3PyqbYSey0U6Y+XXTsULmV+mDVqW27DKk0q+eIWa9RLyR1E3O8lwJMEQAv0hsfnGIt/A/ucExalhr7w/y6Bn1otelwqpmWeH+imT8liZ0Z95+AKUMgoAnwbUO75G/Jd2wu9HUoT+DUXDTFkX79tohz50u7bLZ3k1NpS43HB+WZP1EwS831xm7x3aeADfvYnUEXIS7VSwpono50bQbL5RoOmowl3cu74JL1iI+4/R9dPZw6qrR8Kv/2+ZBuz3SEDEinjzKjTGsd0fLR9JOoda2xUPg47oa3uz8LcbAnC+0n9+3Ie1zdPmdbtYMWr9+fYquJj5dc4Ph+YG47pRiGHAavHU1/F5nHYKMF6BVjhRH1vUr4f8bRiSHaXbbCncpucbQK1GSN4Ih0eDbkWkb1DQYRU3iI8nUZStOlnhHjEyNNWvTG/GiQJxwVSfAnqZlINtHKzkiJhXp1R+MZ1qiZUwj4WJlnBxSrh3VGXM0F27tv/xA/d81zto9zQL9zwV5aBqmQmUUw/CGlb0mPCNBaRl0LMb5kkxuO2NevLSktSr1V4l+T2o6nA5t5qN8iauwZUhe5aHn1hUQeO8E/tcKkj+7wmyQk1z7v5Gk2Mvt3pjnxC/20HvCA96I8l4HQ6PezurlSp1Uf+2DWE/1nx4QXkoZmMFAXWPSorfocJ6YnmSX1keKtkClGe8zcVUVuDL/L8pEgRYMKHq+3pDQoMNj1ESLqI/p7CvhGlAyDqeeplYftwVWylf13p6aKt9L1vAz0auZS1RKzaHHBjE25xWrfn4lcI8940izFpWAUNOY5v3GYsE9d/bNaq8N4d3T3hz8HiNAtC6R7Nou0nlK/Ll7igkFFOYmDkaS8OGV/XrWroFh6b0RQYmSKtkLIPAQQ1RbhGOB5LHPuzNFT8Ur11COBpTD+zo9QNxK9pVfJ6/CES3n0cHixwRepd6OdqfW1HXHHQRKH2gaH+OEQCBwx5aYlUtWyXCG8PHyCP2RuobBnMJDMsm1pq0haEpYOJ/ALpwv44w3SH1lnm0v/w8d4hR3YXl9dA26ln8D3Siaij3IK8wTKQys2k69PrSPy3VbjYYb9iBgd62fE3KzO+aLv+TAFy6h7jDTKXQrROlop79qjSh4qxvKimtjfjBiuInceMXnIX2fYOLFeqlLETWgC9gGBFrzYSdmfk/w5kaR17PE4jVGQs41jZ5VfkJJzJzstfKTYcbjk9q7KbaSiwoGgF+KYz1SDxPjuzkwYbGQe6go6fynCA20xf1h+XqTwtPE6/c7GLJfbD+bslE1BiSHD/Lr2Psllfh0KUV4U++h649XvjOX4FTDK0v8Uk6Al30hWvowPOcEu99w6/oUziVcX/2W9M/kSjqLdtoCcB6TIu87zmnejGpHeMQS3E5WKk3q9GaVsjEbTixogswBG3Okjsrs6jUQw6DIe0YCGHucqiKPBJIYQkIOdXICD8EmN93GmGf5U2FZMi+TSR3absL34mBxQUpOfl7N4LDQrmppa+iEFnOsmrbL8fUpglDnbtQkPYKs0mVUpWdf9wfZZRCtCgzYv89mdTJawhglN9SzdPiPUGxZj1QtaRH3j6QdKmzOAEw7zhk9UbQPVIIvmyRanRmeeIg50qRaKdh3x0TPudtKYajylOd074ymKOB6x5iRuDLZBFyzqBqAegCAw3uO1WRS+13RoYW54JYw6hOQJZGuiOVg4yg3YMUieNLTn/vlG/NbveZKjOJ15jrJyDQOBDaB7RlODG6m75OK6P3a7iaKfBfU7c0+RFMfY46V83h+yblTtqXNJmNpHJnFSuv6l2pHYxyDnbgASslg4KbTae8rMlgwSGyoRRdKrCBGLshRZBRCNlDaWopQ5HW14TYHbeRr+SqhkJfTrRwH+O75XDFv+mS90f9AjuIyglAevE8hXHkjHIkXze2VG8SRsBJu4plxNNvTDl0YRpFgzhrSaLNvX2CUl+wOgyUkMXV8NjLvuZqmS6e9TA+97mt+CzbWWQ37NZ68Gnn6vugLK1dqkqPRIFoE4I8VY9tcb8c76gYvcDveA3cT3zQfdrNegYx6lh0w26zyUhX2ewYy10QT6o+f2yveOAsRw3xkGQy1F1Gk0C816UzoMi+5AntfxjdFXxKphoL0LWfMlv3RArbCk+4O62JUC7IiFke8TepjTwGZbNQQV+sdwTObjrUEAjmxK59mnA3rfSJa51eG/oFY0SqK+wSsj58nNz5i8hysbO35JaJ3Y/QclqN5ulH+r2UKIRYn+v/ZzQWhPEuiYO6rLYHMp01qUGjHgEBHXrOWgRyf2Ss6fPmhG43hFpjuzqHhvRHEsW6WeKE0ntssjCiI1tjONB5TLQlj3oJAsRkGqGzmq5KkycT70XDOSQt2R2mKghJlj9/AhczRcnP48Ntkpg+kubhSXy7vi86WX5SSXdUNNqh4tJ3Rd7tL5sx2TY48mWgocwc69yKjcmsQA1YIeaau1jZLZVefI5C+VeTQbDg2Fpa51TpzwEB+NZvpYPBdt5Fzk15j+J6us4EyLRXbhzAqjUwmblRn7ivjdhLizjw6cFu9ay6MTKf30Zi/SHUPNHo2fKFDlhr3aCd7/VohjgY5gnRjCD86fkLfolsenRKkm9CQR0PGzLMbqSfySdu7ySYZLkhgQxM314HC5gnZ9vWOYBuD3lSMM/TK78dB+K6+cN4jC3fpDshbz1n8RvzenfOVbnqXDax9NJvHd2iscoJX31TPGjOaqwAzNHoxBTTQpHGsKdO2JdHUww5XUFB2/qW+QVpEKY7SX21nDG1PyMGXC+Q0dMNtepe1CwVvDeGy396Dokw87BS/HuOm5TP5vGt2UvY14wXETIrYHgL8jAr6aETExrkp8V1RW2W+3LT8g6SBQfVIzLJ5K/2Wl97TkvAQDYLb8GJkEDbIV5XtvGp400jwkL1uD3/ZH1tdZv5gNX9AYIiPKrZR+dlfaqrmN3CT5p8nJx7OyHRMpZJrczamX0CqJrJ4dit3btpiAtTCbaDF/Fc2OpSsS9uwPKTAV6m51NjnRiBmAdAb5mpgcFighSlUqnH+lAiyM7gUh1xcryb0TO5jVa+JUPdFGKQCBpckUNJRWHSQuzIdx7HTNCAGdewvRUlt8Dq1Pq9yuVKTi/675KhPn16hACtexfeI0/hwe2UxGJ8CnTLdxBl1F1kU5g9nLd/d7BBpmZ794JpwTjuge216pdyfEGyjONm7L8t58faL7jRv1UknYqDp5yIP2ki/1M2SBbuOyaW1Yrl6CSOYwZYzWilzNvoI9v0sqeT2T1/CNL9MS528Im/ZoWg+wMFr290I+VL0Hn5UjNYBhb+iEi4SxnsbTUMVZ9tdoGLHr05DUo26OjBxPH7kVL3yhFlZH/y/TEcVwxTRGz1ejpdM2qHxg+g6Q0a9zkVPmzIJkWHdj4AzbAtflWeXrpOep006fkiZCLr9QJyRD4yRZiWjiypSYavGGNQJBmzuwC47CD+hrLpQco9ElK+Dfx0p+jVaBHgTdbHjuptI2qIqWbQQZTsJDiMenME9I9/jxmkulFDBHQshUyGgsYyrLJSBxeENm4YfGd2ggPYVBBs0yXsbBKwttUUQ/XXF+Z8RybxxwTEUbgPxDSzHlJFYqhk5ea/nusfCfUOroHyGyVfm/wZbuReBCqcLmD9JZJctCwvM6zs7wga/kQNc26EJOshlTVlL5p6/A0hfnAuR1KDSMr+aAh1eV7WXn8tb0fbeLKhWnGhjMvn4uAW8Cc5vRwiJRGc2MT+80Lj9xB9lpOgbOslWf+hLZO+cl6UKE= </div>]]></content:encoded>
      
      <comments>http://www.qianjipeng.top/2019/08/16/%E5%92%8C%E5%B0%8F%E8%96%87%E8%96%87%E7%9A%84700%E5%A4%A9/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
